{{- if and .Values.conditionalPackageInstalls.argoWorkflows .Values.conditionalPackageInstalls.gatekeeper }}
# The ConstraintTemplate for restricting image repositories
apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sallowedrepos
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "5"  # Make sure this runs after the wait-for-crds job
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRepos
      validation:
        openAPIV3Schema:
          type: object
          properties:
            repos:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedrepos

        violation[{"msg": msg}] {
          container := input.review.object.spec.template.spec.containers[_]
          image := container.image
          not valid_repo(image)
          msg := sprintf("container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, image, input.parameters.repos])
        }

        valid_repo(image) {
          repo := input.parameters.repos[_]
          startswith(image, repo)
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.template.spec.initContainers[_]
          image := container.image
          not valid_repo(image)
          msg := sprintf("init container <%v> has an invalid image repo <%v>, allowed repos are %v", [container.name, image, input.parameters.repos])
        }
---
# Apply the constraint with the configured allowed repositories
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sAllowedRepos
metadata:
  name: migration-assistant-allowed-repos
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "10"  # Higher weight to ensure it runs after the ConstraintTemplate
    # Add wait-for hook to ensure CRD is established
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  match:
    kinds:
      - apiGroups: ["apps"]
        kinds: ["ReplicaSet", "Deployment", "StatefulSet", "DaemonSet"]
      - apiGroups: ["batch"]
        kinds: ["Job", "CronJob"]
  parameters:
    repos:
    {{- toYaml .Values.workflowService.allowedRepos | nindent 6 }}
{{- end }}