plugins {
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.2.1'
}

allprojects {
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }
    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
    def excludedProjects = [
            'buildSrc',
            'dockerSolution',
    ]
    if (!(project.name in excludedProjects)) {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                    artifact javadocJar
                    artifact sourcesJar


                    group = 'org.opensearch.migrations.trafficcapture'
                    version = '0.1.0'

                    // support -Dbuild.snapshot=false, but default to true
                    if (System.getProperty("build.snapshot", "true") == "true") {
                        version += "-SNAPSHOT"
                    }


                    pom {
                        name = project.name
                        description = 'Everything opensearch migrations'
                        url = 'http://github.com/opensearch-project/opensearch-migrations'

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        developers {
                            developer {
                                name = "OpenSearch"
                                url = "https://github.com/opensearch-project/opensearch-migrations"
                            }
                        }
                        scm {
                            connection = "scm:git@github.com:opensearch-project/opensearch-migrations.git"
                            developerConnection = "scm:git@github.com:opensearch-project/opensearch-migrations.git"
                            url = "git@github.com:opensearch-project/opensearch-migrations.git"
                        }
                    }

                    // Suppress POM metadata warnings for test fixtures
                    suppressPomMetadataWarningsFor('testFixturesApiElements')
                    suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
                }
            }
            repositories {
                maven { url = "${rootProject.buildDir}/repository"}
                maven {
                    url "https://aws.oss.sonatype.org/content/repositories/snapshots"
                    name = 'staging'
                }
            }
        }
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    tasks.withType(Test) {
        // Provide way to exclude particular tests from CLI
        // e.g. ./gradlew test -PexcludeTests=**/KafkaProtobufConsumerLongTermTest*
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
        useJUnitPlatform {
            systemProperty 'junit.jupiter.execution.parallel.enabled', 'true'
            systemProperty 'junit.jupiter.execution.parallel.mode.default', "concurrent"
            systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
        }
    }

    test {
        systemProperty 'disableMemoryLeakTests', 'true'
        useJUnitPlatform {
            excludeTags 'longTest'
        }
        jacoco {
            enabled = false
        }
    }

    task slowTest(type: Test) {
        useJUnitPlatform {
            // SlowTests currently use additional resource overhead, so halving core based parallelism
            systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
            systemProperty 'junit.jupiter.execution.parallel.config.dynamic.factor', '0.5'
        }
        systemProperty 'disableMemoryLeakTests', 'false'
        jacoco {
            enabled = true
        }
    }

    // Utility task to allow copying required libraries into a 'dependencies' folder for security scanning
    tasks.register('copyDependencies', Copy) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        from configurations.runtimeClasspath
        into "${buildDir}/dependencies"
    }
}

jacocoTestReport {
    dependsOn subprojects*.slowTest
    additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojects.sourceSets.main.output))
    executionData.from(subprojects.collect {
        "${it.buildDir}/jacoco/slowTest.exec"
    })

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/protos/**', '**/JMeterLoadTest**'])
        }))
    }

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test/html")
    }
}

