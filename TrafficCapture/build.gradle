plugins {
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '8.2.1'
}

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'org.owasp.dependencycheck'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
        }
    }

    jacoco {
        toolVersion = '0.8.11'
    }

    test {
        // Provide way to exclude particular tests from CLI
        // e.g. ./gradlew test -PexcludeTests=**/KafkaProtobufConsumerLongTermTest*
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
        systemProperty 'disableMemoryLeakTests', 'true'
        useJUnitPlatform {
            excludeTags 'longTest'
            systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
            systemProperty 'junit.jupiter.execution.parallel.mode.default', "concurrent"
            systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
            systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
            systemProperty 'junit.jupiter.execution.parallel.thread-count.factor', '0.50'
        }
        jvmArgs '-ea'

        jacoco {
            enabled = true
        }
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    task slowTest(type: Test) {
        dependsOn test
        // Provide way to exclude particular tests from CLI
        // e.g. ./gradlew test -PexcludeTests=**/KafkaProtobufConsumerLongTermTest*
        if (project.hasProperty('excludeTests')) {
            exclude project.property('excludeTests')
        }
        systemProperty 'disableMemoryLeakTests', 'false'
        useJUnitPlatform {
            includeTags 'longTest'
            systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
            systemProperty 'junit.jupiter.execution.parallel.mode.default', "concurrent"
            systemProperty 'junit.jupiter.execution.parallel.mode.classes.default', 'concurrent'
            systemProperty 'junit.jupiter.execution.parallel.config.strategy', 'dynamic'
            systemProperty 'junit.jupiter.execution.parallel.thread-count.factor', '0.50'
        }
        jvmArgs '-ea'

        jacoco {
            enabled = true
        }
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    // Utility task to allow copying required libraries into a 'dependencies' folder for security scanning
    tasks.register('copyDependencies', Copy) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        from configurations.runtimeClasspath
        into "${buildDir}/dependencies"
    }
}

jacocoTestReport {
    dependsOn subprojects*.slowTest
    additionalSourceDirs.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    sourceDirectories.from(files(subprojects.sourceSets.main.allSource.srcDirs))
    classDirectories.from(files(subprojects.sourceSets.main.output))
    executionData.from(subprojects.collect {
        "${it.buildDir}/jacoco/slowTest.exec"
    })

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/protos/**', '**/JMeterLoadTest**'])
        }))
    }

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test/html")
    }
}