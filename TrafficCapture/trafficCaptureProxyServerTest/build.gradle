plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    //The 'com.bmushcko.docker-remote-api' line IS required (due to the remaining DockerBuildImage tasks) but W/O
    // a specified version. The version is managed within the buildSrc/build.gradle file.
    id 'com.bmuschko.docker-remote-api'
}
import org.opensearch.migrations.common.CommonUtils
import org.opensearch.migrations.common.CommonConfigurations
import java.security.MessageDigest
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

// see https://github.com/apache/jmeter/issues/5322
def withoutBom = {
    exclude group: 'org.apache.jmeter', module: 'bom'
}

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(project.fileTree("src/main/docker/${projectName}"))
}

dependencies {
    api project(":common:dependencyVersionConstraints")

    implementation project(':TrafficCapture:trafficCaptureProxyServer')
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
    implementation group: 'org.apache.jmeter', name: 'ApacheJMeter_core', withoutBom
    implementation group: 'org.apache.jmeter', name: 'ApacheJMeter_http', withoutBom
    implementation group: 'org.apache.jmeter', name: 'ApacheJMeter_config', withoutBom
    implementation group: 'com.beust', name: 'jcommander'
}

CommonConfigurations.applyCommonConfigurations(project)
configurations {
    all {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        exclude group: 'net.sf.jtidy', module: 'jtidy'

    }
}


def dockerFilesForExternalServices = [
        "nginx": "nginx-perf-test-webserver"
]

// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    task("buildDockerImage_${projectName}", type: DockerBuildImage) {
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def javaContainerServices = [
        ":TrafficCapture:trafficCaptureProxyServerTest": "jmeter"
]
def baseImageProjectOverrides = [
        "nginx": "nginx-perf-test-webserver"
]

def createContainerTasks = { projectName, dockerImageName ->
    def sourceArtifactProject = project(projectName);
    CommonUtils.copyArtifactFromProjectToProjectsDockerStaging(project, sourceArtifactProject)
    CommonUtils.createDockerfile(project, sourceArtifactProject, baseImageProjectOverrides, dockerFilesForExternalServices)
}

javaContainerServices.each(createContainerTasks)

(javaContainerServices).forEach { projectName, dockerImageName ->
    def escapedProjectName = project(projectName).name;
    def dockerBuildDir = "build/docker/${escapedProjectName}"
    task "buildDockerImage_${escapedProjectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${escapedProjectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}



dockerCompose {
    useComposeFiles.add("src/main/docker/docker-compose.yml")
}

task buildDockerImages {
    dependsOn(':TrafficCapture:dockerSolution:buildDockerImage_trafficCaptureProxyServer')
    dependsOn buildDockerImage_nginx
    dependsOn buildDockerImage_trafficCaptureProxyServerTest
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
