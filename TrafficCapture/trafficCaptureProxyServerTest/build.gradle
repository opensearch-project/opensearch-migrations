plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose"
    //The 'com.bmushcko.docker-remote-api' line IS required (due to the remaining DockerBuildImage tasks) but W/O
    // a specified version. The version is managed within the buildSrc/build.gradle file.
    id 'com.bmuschko.docker-remote-api'
}
import org.opensearch.migrations.common.CommonUtils
import org.opensearch.migrations.common.CommonConfigurations
import java.security.MessageDigest
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(project.fileTree("src/main/docker/${projectName}"))
}

dependencies {
    implementation project(':TrafficCapture:trafficCaptureProxyServer')
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    implementation libs.jmeter.core
    implementation libs.jmeter.http
    implementation libs.jmeter.config
    implementation libs.jcommander
}

CommonConfigurations.applyCommonConfigurations(project)

def dockerFilesForExternalServices = [
        "nginx_perf_test_webserver": "nginx"
]

// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { dockerImageName, projectName ->
    task("buildDockerImage_${dockerImageName}", type: DockerBuildImage) {
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:${hash}".toString())
        images.add("migrations/${dockerImageName}:latest".toString())
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def javaContainerServices = [
        "jmeter": ":TrafficCapture:trafficCaptureProxyServerTest"
]
def baseImageProjectOverrides = [
        "nginx": "nginx_perf_test_webserver"
]

def createContainerTasks = { dockerImageName, projectName ->
    def sourceArtifactProject = project(projectName);
    CommonUtils.copyArtifactFromProjectToProjectsDockerStaging(project, sourceArtifactProject, dockerImageName)
    CommonUtils.createDockerfile(project, sourceArtifactProject, baseImageProjectOverrides[dockerImageName], dockerFilesForExternalServices, dockerImageName)
}

javaContainerServices.each(createContainerTasks)

(javaContainerServices).forEach { dockerImageName, projectName ->
    def escapedProjectName = project(projectName).name;
    def dockerBuildDir = "build/docker/${dockerImageName}_${escapedProjectName}"
    task "buildDockerImage_${dockerImageName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${dockerImageName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}".toString())
        images.add("migrations/${dockerImageName}:latest".toString())
    }
}

dockerCompose {
    useComposeFiles.add("src/main/docker/docker-compose.yml")
}

task buildDockerImages {
    dependsOn ':TrafficCapture:dockerSolution:buildDockerImage_capture_proxy'
    dependsOn buildDockerImage_nginx_perf_test_webserver
    dependsOn buildDockerImage_jmeter
}

tasks.named('copyArtifact_jmeter') {
    // Add dependency on inter-project dependencies from above dependencies
    dependsOn ':TrafficCapture:trafficCaptureProxyServer:build'
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
