plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import org.opensearch.migrations.common.CommonUtils
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(project.fileTree("src/main/docker/${projectName}"))
}

clean.doFirst {
    delete project.file("./src/main/docker/migrationConsole/build")
}

dependencies {
    implementation project(':TrafficCapture:trafficCaptureProxyServer')
    implementation project(':TrafficCapture:trafficReplayer')
    constraints {
        implementation('software.amazon.awssdk:secretsmanager:2.25.19') {
            because 'mend security issue'
        }
    }
}

def dockerFilesForExternalServices = [
        "elasticsearchWithSearchGuard": "elasticsearch_searchguard",
        "elasticsearchTestConsole": "elasticsearch_client_test_console",
        "migrationConsole": "migration_console",
        "otelCollector": "otel_collector",
        "grafana": "grafana"
]
// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    def escapedProjectName = projectName;
    task("buildDockerImage_${escapedProjectName}", type: DockerBuildImage) {
        if (escapedProjectName == "migrationConsole") {
            copyMigrationConsoleArtifactsFromProjectsToProjectsDockerStaging(project as Project,
                    List.of(project(":TrafficCapture:trafficReplayer"),
                            project(":CreateSnapshot"),
                            project(":MetadataMigration"),
                    ), projectName, "src/main/docker/${escapedProjectName}")

            dependsOn "copyArtifact_${escapedProjectName}"
            dependsOn "buildDockerImage_elasticsearchTestConsole"
        }
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}


static def copyMigrationConsoleArtifactsFromProjectsToProjectsDockerStaging(Project dockerBuildProject,
                                                                            List<Project> sourceArtifactProjects,
                                                                            String destProjectName, String destDir) {
    // Create the overarching task
    def parentCopyTask = dockerBuildProject.tasks.create("copyArtifact_${destProjectName}")

    sourceArtifactProjects.each { sourceArtifactProject ->
        def applicationDestDir = "${destDir}/staging/${sourceArtifactProject.name}/";
        def libCopyTask = dockerBuildProject.tasks.create("copyLibArtifacts_${destProjectName}_${sourceArtifactProject.name}", Sync) {
            from { sourceArtifactProject.configurations.findByName("runtimeClasspath").files }
            from { sourceArtifactProject.tasks.getByName('jar') }
            into "${applicationDestDir}/lib"
        }
        def binCopyTask = dockerBuildProject.tasks.create("copyBinArtifacts_${destProjectName}_${sourceArtifactProject.name}", Sync) {
            from { sourceArtifactProject.tasks.getByName('startScripts').outputs.files }
            into "${applicationDestDir}/bin"
        }
        libCopyTask.dependsOn(sourceArtifactProject.tasks.named("assemble"))
        binCopyTask.dependsOn(sourceArtifactProject.tasks.named("assemble"))

        // Make the parent task depend on this individual task
        parentCopyTask.dependsOn(libCopyTask)
        parentCopyTask.dependsOn(binCopyTask)
    }
}

def javaContainerServices = [
        ":TrafficCapture:trafficCaptureProxyServer": "capture_proxy",
        ":TrafficCapture:trafficReplayer": "traffic_replayer"
]
def baseImageProjectOverrides = [
        "trafficCaptureProxyServer": "elasticsearchWithSearchGuard"
]
javaContainerServices.each { projectName, dockerImageName ->
    def artifactProject = project(projectName);
    CommonUtils.copyArtifactFromProjectToProjectsDockerStaging(project as Project, artifactProject)
    CommonUtils.createDockerfile(project, artifactProject, baseImageProjectOverrides, dockerFilesForExternalServices)
}

javaContainerServices.forEach { projectName, dockerImageName ->
    def escapedProjectName = project(projectName).name;
    def dockerBuildDir = "build/docker/${escapedProjectName}"
    task "buildDockerImage_${escapedProjectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${escapedProjectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    def extensionsDir = "src/main/docker/composeExtensions/"
    useComposeFiles =
            ['src/main/docker/docker-compose.yml',
             "${extensionsDir}/" + (project.hasProperty("otel-collector") ?
                     "${project.getProperty('otel-collector')}" :
                     "otel-prometheus-jaeger.yml"),
             "${extensionsDir}" + (project.hasProperty("multiProxy") ? "proxy-multi.yml" : "proxy-single.yml")
            ]
}

task buildDockerImages {
    dependsOn buildDockerImage_elasticsearchWithSearchGuard
    dependsOn buildDockerImage_migrationConsole
    dependsOn buildDockerImage_otelCollector
    dependsOn buildDockerImage_grafana

    dependsOn buildDockerImage_trafficCaptureProxyServer
    dependsOn buildDockerImage_trafficReplayer
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
