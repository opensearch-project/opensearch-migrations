plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import org.opensearch.migrations.common.CommonUtils
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

dependencies {
    constraints {
        implementation('software.amazon.awssdk:secretsmanager:2.25.19') {
            because 'mend security issue'
        }
    }
}

def dockerFilesForExternalServices = [
        "elasticsearch_searchguard": "elasticsearchWithSearchGuard",
        "capture_proxy_base": "captureProxyBase",
        "k8s_config_map_util_scripts": "k8sConfigMapUtilScripts",
        "elasticsearch_client_test_console": "elasticsearchTestConsole",
        "migration_console": "migrationConsole",
        "otel_collector": "otelCollector",
        "grafana": "grafana"
]
dockerFilesForExternalServices.each { dockerImageName, projectName ->
    def escapedProjectName = projectName;
    task("buildDockerImage_${dockerImageName}", type: DockerBuildImage) {
        if (escapedProjectName == "migrationConsole") {
            def libraries = [
                project(":libraries:kafkaCommandLineFormatter")
            ]

            def applications = [
                project(":CreateSnapshot"),
                project(":MetadataMigration")
            ]
            def syncTask = getMigrationConsoleSyncTask(project, dockerImageName, escapedProjectName, libraries, applications)
            dependsOn syncTask
            inputDir = syncTask.destinationDir
        } else {
            inputDir = project.file("src/main/docker/${escapedProjectName}")
        }
        def hashNonce = CommonUtils.calculateDockerHash(project.fileTree(inputDir))
        images.add("migrations/${dockerImageName}:$hashNonce")
        images.add("migrations/${dockerImageName}:latest")
    }
}

static Sync getMigrationConsoleSyncTask(Project project, String dockerImageName, String escapedProjectName, List<Project> libraries, List<Project> applications) {
     // Create a single sync task to copy the required files
    def destDir = "build/docker/${dockerImageName}_${escapedProjectName}"
    def syncTask = project.tasks.create("syncArtifact_${dockerImageName}_${escapedProjectName}", Sync) {
        into destDir
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE

        // Applications and Standalone Libraries both have libraries, sync them
        (libraries + applications).each { lib ->
            def applicationDestDir = "staging/${lib.name}/"
            from (lib.configurations.findByName("runtimeClasspath").files) {
                into "${applicationDestDir}/lib"
            }
            from (lib.tasks.getByName('jar')) {
                into "${applicationDestDir}/lib"
            }
        }

        // Sync application start scripts
        applications.each { app ->
            def applicationDestDir = "staging/${app.name}/"
            from (app.tasks.getByName('startScripts').outputs.files) {
                into "${applicationDestDir}/bin"
            }
        }

        from "src/main/docker/${escapedProjectName}"
    }

    // Collect assemble tasks from libraries and applications
    def assembleTasks = (libraries + applications).collect { it.tasks.named("assemble") }
    // Ensure the sync task depends on the assemble tasks
    syncTask.dependsOn assembleTasks

    // Migration Console base image is the test console
    syncTask.dependsOn "buildDockerImage_elasticsearch_client_test_console"

    return syncTask
}

def javaContainerServices = [
        "capture_proxy": ":TrafficCapture:trafficCaptureProxyServer",
        "capture_proxy_es": ":TrafficCapture:trafficCaptureProxyServer",
        "traffic_replayer": ":TrafficCapture:trafficReplayer"
]
def baseImageOverrides = [
        "capture_proxy": "capture_proxy_base",
        "capture_proxy_es": "elasticsearch_searchguard",
]
javaContainerServices.each { dockerImageName, projectName ->
    def artifactProject = project(projectName);
    CommonUtils.copyArtifactFromProjectToProjectsDockerStaging(project as Project, artifactProject, dockerImageName)
    CommonUtils.createDockerfile(project, artifactProject, baseImageOverrides[dockerImageName], dockerFilesForExternalServices, dockerImageName)
}

javaContainerServices.forEach { dockerImageName, projectName ->
    def escapedProjectName = project(projectName).name;
    def dockerBuildDir = "build/docker/${dockerImageName}_${escapedProjectName}"
    task "buildDockerImage_${dockerImageName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${dockerImageName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    def extensionsDir = "src/main/docker/composeExtensions/"
    useComposeFiles =
            ['src/main/docker/docker-compose.yml',
             "${extensionsDir}/" + (project.hasProperty("otel-collector") ?
                     "${project.getProperty('otel-collector')}" :
                     "otel-prometheus-jaeger.yml"),
             "${extensionsDir}" + (project.hasProperty("multiProxy") ? "proxy-multi.yml" : "proxy-single.yml")
            ]
}

task buildDockerImages {
    dependsOn buildDockerImage_k8s_config_map_util_scripts
    dependsOn buildDockerImage_elasticsearch_searchguard
    dependsOn buildDockerImage_migration_console
    dependsOn buildDockerImage_otel_collector
    dependsOn buildDockerImage_grafana
    dependsOn buildDockerImage_traffic_replayer
    dependsOn buildDockerImage_capture_proxy
    dependsOn buildDockerImage_capture_proxy_es
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
