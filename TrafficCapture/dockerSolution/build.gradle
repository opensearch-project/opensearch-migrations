plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.16.12"
    id "com.bmuschko.docker-java-application" version "9.3.1"
}

import java.security.MessageDigest
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.taskdefs.condition.Os

def getTrafficComparatorDirectory() {
    String overrideTrafficComparatorDirectory = System.getenv(TRAFFIC_COMPARATOR_DIRECTORY_ENV)
    String rval = overrideTrafficComparatorDirectory != null ?
            overrideTrafficComparatorDirectory : TRAFFIC_COMPARATOR_REPO_DIRECTORY;
    return rval
}

ext {
    TRAFFIC_COMPARATOR_REPO_DIRECTORY = "build/traffic-comparator"
    TRAFFIC_COMPARATOR_DIRECTORY_ENV = "TRAFFIC_COMPARATOR_DIRECTORY"
    REALIZED_TRAFFIC_COMPARATOR_DIRECTORY = project.file(getTrafficComparatorDirectory())
 }

def calculateDockerHash(String projectName) {
    MessageDigest digest = MessageDigest.getInstance('SHA-256')
    fileTree("src/main/docker/${projectName}")
            .each( file ->
            file.withInputStream { is ->
                var buffer = new byte[1024]
                int read
                while ((read = is.read(buffer)) != -1) {
                    digest.update(buffer, 0, read)
                }
            }
    )
    return digest.digest().encodeHex().toString()
}

dependencies {
    implementation project(':trafficCaptureProxyServer')
    implementation project(':trafficReplayer')
}

task cloneComparatorRepoIfNeeded(type: Exec) {
    String comparatorDirectory = project.file(REALIZED_TRAFFIC_COMPARATOR_DIRECTORY);
    String repo = 'https://github.com/opensearch-project/traffic-comparator.git'
    onlyIf {
        !(new File(comparatorDirectory).exists())
    }
    commandLine = Os.isFamily(Os.FAMILY_WINDOWS) ?
            ['git', 'clone', repo, TRAFFIC_COMPARATOR_REPO_DIRECTORY ] :
            ['/bin/sh', '-c', "git clone ${repo} ${TRAFFIC_COMPARATOR_REPO_DIRECTORY}"]
}

def dockerFilesForExternalServices = [
        "elasticsearchWithSearchGuard": "elasticsearch_searchguard",
        "openSearchBenchmark": "open_search_benchmark"
]
// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    task("buildDockerImage_${projectName}", type: DockerBuildImage) {
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def trafficComparatorServices = [
        "trafficComparator": "traffic_comparator",
        "jupyterNotebook": "jupyter_notebook"
]
trafficComparatorServices.forEach {projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    task("copyArtifact_${projectName}", type: Copy) {
        dependsOn(tasks.getByName('cloneComparatorRepoIfNeeded'))
        from REALIZED_TRAFFIC_COMPARATOR_DIRECTORY
        into dockerBuildDir
        include '*.py'
        include '/traffic_comparator/*'
        if (projectName == 'jupyterNotebook') {
            include '*.ipynb'
        }
    }

    task "createDockerfile_${projectName}"(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
        dependsOn "copyArtifact_${projectName}"
        destFile = project.file("${dockerBuildDir}/Dockerfile")
        from 'python:3.10.10'
        runCommand("apt-get update && apt-get install -y netcat lsof")
        copyFile("setup.py", "/setup.py")
        copyFile(".", "/containerTC/")
        runCommand("pip3 install --editable \".[data]\"")
        // container stay-alive
        defaultCommand('tail', '-f', '/dev/null')
    }
}

def javaContainerServices = [
        "trafficCaptureProxyServer": "capture_proxy",
        "kafkaPrinter": "kafka_capture_puller",
        "trafficReplayer": "traffic_replayer"
]
def baseImageProjectOverrides = [
        "trafficCaptureProxyServer": "elasticsearchWithSearchGuard"
]

javaContainerServices.each { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    def artifactsDir = "${dockerBuildDir}/jars";
    task("copyArtifact_${projectName}", type: Copy) {
        dependsOn ":${projectName}:build"
        dependsOn ":${projectName}:jar"
        from { project(":${projectName}").configurations.findByName("runtimeClasspath").files }
        from { project(":${projectName}").tasks.getByName('jar') }
        into artifactsDir
        include "*.jar"
        duplicatesStrategy = DuplicatesStrategy.WARN
    }

    task "createDockerfile_${projectName}"(type: com.bmuschko.gradle.docker.tasks.image.Dockerfile) {
        dependsOn "copyArtifact_${projectName}"
        destFile = project.file("${dockerBuildDir}/Dockerfile")
        def baseImageOverrideProjectName = baseImageProjectOverrides.get(projectName)
        // The netcat installation commands are hacky here.  It just happens to work out that the base images are
        // using centos and that openjdk's already includes apt-get support.  We also don't need netcat for
        // all of the images, though they aren't very big.
        if (baseImageOverrideProjectName) {
            def dependentDockerImageName = dockerFilesForExternalServices.get(baseImageOverrideProjectName)
            def hashNonce = calculateDockerHash(baseImageOverrideProjectName)
            from "migrations/${dependentDockerImageName}:${hashNonce}"
            dependsOn "buildDockerImage_${baseImageOverrideProjectName}"
            runCommand("sed -i -e \"s|mirrorlist=|#mirrorlist=|g\" /etc/yum.repos.d/CentOS-* ;  sed -i -e \"s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g\" /etc/yum.repos.d/CentOS-*")
            runCommand("yum -y install nmap-ncat")
        } else {
            from 'openjdk:11-jre'
            runCommand("apt-get update && apt-get install -y netcat")
        }

        copyFile("jars", "/jars")
        // can't set the environment variable from the runtimeClasspath because the Dockerfile is
        // constructed in the configuration phase and the classpath won't be realized until the
        // execution phase.  Therefore, we need to have docker run the command to resolve the classpath
        // and it's simplest to pack that up into a helper script.
        runCommand("printf \"#!/bin/sh\\njava -cp `echo /jars/*.jar | tr \\   :` \\\"\\\$@\\\" \" > /runJavaWithClasspath.sh");
        runCommand("chmod +x /runJavaWithClasspath.sh")
        // container stay-alive
        defaultCommand('tail', '-f', '/dev/null')
        //defaultCommand('/runJavaWithClasspath.sh', '...')
    }
}

(javaContainerServices + trafficComparatorServices).forEach { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    task "buildDockerImage_${projectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${projectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
        String overrideTrafficComparatorDirectory = System.getenv(TRAFFIC_COMPARATOR_DIRECTORY_ENV)
        if (overrideTrafficComparatorDirectory == null) {
            environment.put(TRAFFIC_COMPARATOR_DIRECTORY_ENV, REALIZED_TRAFFIC_COMPARATOR_DIRECTORY)
            exposeAsEnvironment(this)
        }
    useComposeFiles.add("src/main/docker/docker-compose.yml")
}

task buildDockerImages {
    dependsOn buildDockerImage_elasticsearchWithSearchGuard
    dependsOn buildDockerImage_openSearchBenchmark

    dependsOn buildDockerImage_kafkaPrinter
    dependsOn buildDockerImage_trafficCaptureProxyServer
    dependsOn buildDockerImage_trafficReplayer
    dependsOn buildDockerImage_trafficComparator
    dependsOn buildDockerImage_jupyterNotebook
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
        .dependsOn(tasks.getByName('cloneComparatorRepoIfNeeded'))
