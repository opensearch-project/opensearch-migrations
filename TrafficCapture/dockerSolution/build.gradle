plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import org.opensearch.migrations.common.CommonUtils
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(projectName, project)
}

clean.doFirst {
    delete project.file("./src/main/docker/migrationConsole/build")
}

dependencies {
    implementation project(':trafficCaptureProxyServer')
    implementation project(':trafficReplayer')
    constraints {
        implementation('software.amazon.awssdk:secretsmanager:2.25.19') {
            because 'mend security issue'
        }
    }
}

def dockerFilesForExternalServices = [
        "elasticsearchWithSearchGuard": "elasticsearch_searchguard",
        "migrationConsole": "migration_console",
        "otelCollector": "otel_collector",
        "grafana": "grafana"
]
// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    task("buildDockerImage_${projectName}", type: DockerBuildImage) {
        if (projectName == "migrationConsole") {
            def destDir = "src/main/docker/${projectName}/build/jars"
            CommonUtils.copyArtifact(project, "trafficReplayer", projectName, destDir)
            dependsOn "copyArtifact_${projectName}"
        }
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def javaContainerServices = [
        "trafficCaptureProxyServer": "capture_proxy",
        "trafficReplayer": "traffic_replayer"
]
def baseImageProjectOverrides = [
        "trafficCaptureProxyServer": "elasticsearchWithSearchGuard"
]

javaContainerServices.each { projectName, dockerImageName ->
    CommonUtils.copyArtifact(project, projectName)
    CommonUtils.createDockerfile(project, projectName, baseImageProjectOverrides, dockerFilesForExternalServices)
}

javaContainerServices.forEach { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    task "buildDockerImage_${projectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${projectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    def extensionsDir = "src/main/docker/composeExtensions/"
    useComposeFiles =
            ['src/main/docker/docker-compose.yml',
             "${extensionsDir}/" + (project.hasProperty("otel-collector") ?
                     "${project.getProperty('otel-collector')}" :
                     "otel-prometheus-jaeger.yml"),
             "${extensionsDir}" + (project.hasProperty("multiProxy") ? "proxy-multi.yml" : "proxy-single.yml")
            ]
}

task buildDockerImages {
    dependsOn buildDockerImage_elasticsearchWithSearchGuard
    dependsOn buildDockerImage_migrationConsole
    dependsOn buildDockerImage_otelCollector
    dependsOn buildDockerImage_grafana
    
    dependsOn buildDockerImage_trafficCaptureProxyServer
    dependsOn buildDockerImage_trafficReplayer
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
