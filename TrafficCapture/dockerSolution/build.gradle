plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import org.opensearch.migrations.common.CommonUtils
import java.security.MessageDigest
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.apache.tools.ant.taskdefs.condition.Os

def calculateDockerHash = { projectName ->
    CommonUtils.calculateDockerHash(projectName, project)
}

dependencies {
    implementation project(':trafficCaptureProxyServer')
    implementation project(':trafficReplayer')
}

def dockerFilesForExternalServices = [
        "elasticsearchWithSearchGuard": "elasticsearch_searchguard",
        "migrationConsole": "migration_console",
        "opensearchDashboards": "opensearch_dashboards",
]
// Create the static docker files that aren't hosting migrations java code from this repo
dockerFilesForExternalServices.each { projectName, dockerImageName ->
    task("buildDockerImage_${projectName}", type: DockerBuildImage) {
        def hash = calculateDockerHash(projectName)
        images.add("migrations/${dockerImageName}:$hash")
        images.add("migrations/${dockerImageName}:latest")
        inputDir = project.file("src/main/docker/${projectName}")
    }
}

def javaContainerServices = [
        "trafficCaptureProxyServer": "capture_proxy",
        "trafficReplayer": "traffic_replayer"
]
def baseImageProjectOverrides = [
        "trafficCaptureProxyServer": "elasticsearchWithSearchGuard"
]

javaContainerServices.each { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    def artifactsDir = "${dockerBuildDir}/jars";
    CommonUtils.copyArtifact(project, projectName)
    CommonUtils.createDockerfile(project, projectName, baseImageProjectOverrides, dockerFilesForExternalServices)
}

javaContainerServices.forEach { projectName, dockerImageName ->
    def dockerBuildDir = "build/docker/${projectName}"
    task "buildDockerImage_${projectName}"(type: DockerBuildImage) {
        dependsOn "createDockerfile_${projectName}"
        inputDir = project.file("${dockerBuildDir}")
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

dockerCompose {
    useComposeFiles = project.hasProperty('multiProxy') ?
            ['src/main/docker/docker-compose.yml', 'src/main/docker/docker-compose-multi.yml'] :
            ['src/main/docker/docker-compose.yml', 'src/main/docker/docker-compose-single.yml']
}

task buildDockerImages {
    dependsOn buildDockerImage_elasticsearchWithSearchGuard
    dependsOn buildDockerImage_migrationConsole
    dependsOn buildDockerImage_opensearchDashboards
    
    dependsOn buildDockerImage_trafficCaptureProxyServer
    dependsOn buildDockerImage_trafficReplayer
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))
