apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: target-latch-helpers
spec:
  templates:
    - name: init-etcd-keys
      inputs:
        parameters:
          - name: configurations
          - name: targets
          - name: prefix
          - name: etcd-utils-image
          - name: etcd-utils-pull-policy
      outputs:
        parameters:
          - name: prefix
            valueFrom:
              path: /tmp/prefix
          - name: processors-per-target
            valueFrom:
              path: /tmp/processors-per-target
      container:
        image: "{{inputs.parameters.etcd-utils-image}}"
        imagePullPolicy: "{{inputs.parameters.etcd-utils-pull-policy}}"
        command: [ sh, -c ]
        args:
          - |
            SOURCE_CONFIG=$(echo '{{inputs.parameters.configurations}}')
            TARGETS_CONFIG=$(echo '{{inputs.parameters.targets}}')
            echo "source config = $SOURCE_CONFIG"
            echo "targets config = $TARGETS_CONFIG"
  
            # Function to normalize endpoint for use in etcd keys
            # Keeps protocol and port, but normalizes slashes
            normalize_endpoint() {
              echo "$1" | base64
            }
  
            # Check for duplicate source endpoints
            echo "Checking for duplicate source endpoints..."
            SOURCE_ENDPOINTS=$(echo "$SOURCE_CONFIG" | jq -r '[.[] | .source.endpoint] | unique | length')
            TOTAL_SOURCES=$(echo "$SOURCE_CONFIG" | jq -r 'length')
  
            if [ "$SOURCE_ENDPOINTS" -ne "$TOTAL_SOURCES" ]; then
              echo "Error: Duplicate source endpoints detected" >&2
              echo "$SOURCE_CONFIG" | jq -r '.[] | .source.endpoint' | sort | uniq -d >&2
              exit 1
            fi
  
            # Check for duplicate target endpoints
            echo "Checking for duplicate target endpoints..."
            TARGET_ENDPOINTS=$(echo "$TARGETS_CONFIG" | jq -r '[.[] | .endpoint] | unique | length')
            TOTAL_TARGETS=$(echo "$TARGETS_CONFIG" | jq -r 'length')
  
            if [ "$TARGET_ENDPOINTS" -ne "$TOTAL_TARGETS" ]; then
              echo "Error: Duplicate target endpoints detected" >&2
              echo "$TARGETS_CONFIG" | jq -r '.[] | .endpoint' | sort | uniq -d >&2
              exit 1
            fi
  
            # Check for duplicate snapshot/metadata/backfill configurations within each source
            echo "Checking for duplicate configurations..."
            echo "$SOURCE_CONFIG" | jq -c '.[] | .["snapshot-and-migration-configs"]' | while read -r configs; do
              # Check for duplicate indices in snapshot configs
              UNIQUE_INDICES=$(echo "$configs" | jq -r '[.[] | .indices | sort | join(",")] | unique | length')
              TOTAL_CONFIGS=$(echo "$configs" | jq -r 'length')
  
              if [ "$UNIQUE_INDICES" -ne "$TOTAL_CONFIGS" ]; then
                echo "Error: Duplicate snapshot configurations detected for the same indices" >&2
                exit 1
              fi
  
              # Check for duplicate migrations within each snapshot config
              echo "$configs" | jq -c '.[] | .migrations' | while read -r migrations; do
                UNIQUE_MIGRATIONS=$(echo "$migrations" | jq -r 'map(@json) | unique | length')
                TOTAL_MIGRATIONS=$(echo "$migrations" | jq -r 'length')
  
                if [ "$UNIQUE_MIGRATIONS" -ne "$TOTAL_MIGRATIONS" ]; then
                  echo "Error: Duplicate migration configurations detected" >&2
                  exit 1
                fi
              done
            done
  
            # Calculate the total number of processors
            # Count the total number of migrations across all sources and snapshot configs
            PROCESSOR_COUNT=$(echo "$SOURCE_CONFIG" | jq -r '[.[] | .["snapshot-and-migration-configs"][] | .migrations | length] | add')
            echo "Total processor count: $PROCESSOR_COUNT"
  
            echo "{{inputs.parameters.prefix}}" > /tmp/prefix
            export ETCDCTL_API=3
  
            # Run etcdctl with configured endpoints and authentication
            etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
  
            # Store the workflow prefix in etcd for future reference
            $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/info/prefix "{{inputs.parameters.prefix}}"
            $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/info/started "$(date +%s)"
  
            # Initialize target latches
            echo "$TARGETS_CONFIG" | jq -c '.[]' | while read -r target_json; do
              TARGET_ENDPOINT=$(echo "$target_json" | jq -r '.endpoint')
              NORMALIZED_TARGET=$(normalize_endpoint "$TARGET_ENDPOINT")
  
              # Initialize the latch with processor count
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$NORMALIZED_TARGET/endpoint "$TARGET_ENDPOINT"
              $etcdctl_cmd put /{{inputs.parameters.prefix}}/workflow/targets/$NORMALIZED_TARGET/latch "$PROCESSOR_COUNT"
  
              echo "Target $TARGET_ENDPOINT ($NORMALIZED_TARGET) latch initialized with count $PROCESSOR_COUNT"
            done
  
            # Output the processor count per target for workflow output
            echo "{\"processor_count\": $PROCESSOR_COUNT}" > /tmp/processors-per-target
  
            echo "Etcd keys initialized with prefix: {{inputs.parameters.prefix}}"
  

    # Check target processors progress and determine if all the work in this stage
    # for a target has been completed
    - name: target-processed-latch
      inputs:
        parameters:
          - name: processor
          - name: target
          - name: prefix
          - name: etcd-utils-image
          - name: etcd-utils-pull-policy
      outputs:
        parameters:
          - name: should-finalize
            valueFrom:
              path: /tmp/should-finalize
      script:
        image: "{{inputs.parameters.etcd-utils-image}}"
        imagePullPolicy: "{{inputs.parameters.etcd-utils-pull-policy}}"
        command: [sh]
        source: |
          set -e
          PROCESSOR_ID="{{inputs.parameters.processor}}"
          TARGET_ENDPOINT="{{inputs.parameters.target}}"
          ETCD_ENDPOINT={{workflow.parameters.etcd-endpoints}}
          PREFIX="{{inputs.parameters.prefix}}"
          
          normalize_endpoint() {
            echo "$1" | base64
          }
          
          NORMALIZED_TARGET=$(normalize_endpoint "$TARGET_ENDPOINT")
          
          USERNAME={{workflow.parameters.etcd-user}}
          PASSWORD={{workflow.parameters.etcd-password}}
          LATCH_KEY_NAME=/$PREFIX/workflow/targets/$NORMALIZED_TARGET/latch
          
          FRIENDLY_NAME="${NORMALIZED_TARGET}-${PROCESSOR_ID}"
          
          export ETCDCTL_API=3
          
          # Run etcdctl with configured endpoints
          etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINT --user $USERNAME:$PASSWORD"
          
          # Record this processor as finished
          $etcdctl_cmd put /$PREFIX/workflow/targets/$NORMALIZED_TARGET/finishedSubFlows/$FRIENDLY_NAME "completed"
          
          execute_transaction() {
          local current_value="$1"
          local next_value="$2"
          
          echo "LATCH_KEY_NAME=$LATCH_KEY_NAME"
          echo "current_value=$current_value"
          echo "next_value=$next_value"
          echo "etcdctl_cmd=$etcdctl_cmd"
          
          # be very mindful of the empty lines in the file being sent to the transaction command!
          $etcdctl_cmd txn  --write-out=json << EOF | jq -e '.succeeded == true'
          val("$LATCH_KEY_NAME") = "$current_value"
          
          put $LATCH_KEY_NAME "$next_value"
          
          
          EOF
          }
          
          # Transaction retry loop
          while true; do
            CURRENT_COUNT=$($etcdctl_cmd get  $LATCH_KEY_NAME --print-value-only)
            NEW_COUNT=$((CURRENT_COUNT - 1))
            if execute_transaction "$CURRENT_COUNT" "$NEW_COUNT"; then
              echo "Transaction succeeded"
              break
            else
              echo "Transaction failed, retrying..."
              sleep 1
            fi
          done
          
          # Default: don't finalize yet
          SHOULD_FINALIZE="false"
          
          # Check if latch has reached zero
          if [ "$NEW_COUNT" -eq 0 ]; then
            echo "All processors for target $TARGET_ENDPOINT have completed" >&2
            SHOULD_FINALIZE="true"
          else
            echo "Target $TARGET_ENDPOINT still has $NEW_COUNT processors pending" >&2
          fi
          
          # Output just the boolean value to stdout for the result
          echo $SHOULD_FINALIZE > /tmp/should-finalize
          echo $SHOULD_FINALIZE

    - name: cleanup-etcd-keys
      inputs:
        parameters:
          - name: prefix
          - name: etcd-utils-image
          - name: etcd-utils-pull-policy
      container:
        image: "{{inputs.parameters.etcd-utils-image}}"
        imagePullPolicy: "{{inputs.parameters.etcd-utils-pull-policy}}"
        command: [ sh, -c ]
        args:
          - |
            export ETCDCTL_API=3
            etcdctl_cmd="etcdctl --endpoints={{workflow.parameters.etcd-endpoints}} --user {{workflow.parameters.etcd-user}}:{{workflow.parameters.etcd-password}}"
  
            PREFIX="{{inputs.parameters.prefix}}"
            echo "===== CLEANING UP ETCD KEYS FOR PREFIX $PREFIX ====="
  
            # Record workflow completion time
            $etcdctl_cmd put /$PREFIX/workflow/info/completed "$(date +%s)"
            STARTED=$($etcdctl_cmd get /$PREFIX/workflow/info/started --print-value-only)
            COMPLETED=$(date +%s)
            DURATION=$((COMPLETED - STARTED))
  
            echo "Workflow completed in $DURATION seconds"
  
            # Get workflow stats for logging purposes
            echo "Workflow completion stats:"
  
            # Keep statistics in a separate key that will persist
            STATS_KEY="workflow-stats/runs/$PREFIX"
  
            # Save summarized workflow stats to a persistent key
            $etcdctl_cmd put /$STATS_KEY/started "$STARTED"
            $etcdctl_cmd put /$STATS_KEY/completed "$COMPLETED"
            $etcdctl_cmd put /$STATS_KEY/duration "$DURATION"
  
            # For each target, save its finalized status and completed processors
            for TARGET_KEY in $($etcdctl_cmd get /$PREFIX/workflow/targets/ --prefix --keys-only | grep "/latch$" | sort); do
              TARGET_PATH=$(echo "$TARGET_KEY" | sed "s|/$PREFIX/workflow/targets/||" | sed "s|/latch$||")
              TARGET_ENDPOINT=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/endpoint --print-value-only)
              LATCH_VALUE=$($etcdctl_cmd get $TARGET_KEY --print-value-only)
  
              # Save the target stats
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/endpoint "$TARGET_ENDPOINT"
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/final_latch_value "$LATCH_VALUE"
  
              # Save the list of completed processor chains
              COMPLETED_PROCESSORS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | wc -l)
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/completed_processors "$COMPLETED_PROCESSORS"
  
              # Save the list of processor chain names
              PROCESSOR_CHAINS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | sort | tr '\n' ',' | sed 's/,$//')
              $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/processor_chains "$PROCESSOR_CHAINS"
  
              echo "- Target $TARGET_ENDPOINT: Latch=$LATCH_VALUE, Completed Processors=$COMPLETED_PROCESSORS"
            done
  
            # Delete all workflow keys for this run (but keep the stats)
            echo "Deleting all workflow keys with prefix: /$PREFIX/workflow/"
            $etcdctl_cmd del /$PREFIX/workflow/ --prefix
  
            echo "Cleanup complete. Workflow stats preserved under /$STATS_KEY/"
