apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: capture-replay
spec:
  entrypoint: run-all
  serviceAccountName: argo-workflow-executor
  templates:
    - name: run-all
      failFast: true
      inputs:
        parameters:
          - name: session-name
            # temporary - just to launch a migration console
          - name: source-config
            value: ""
            # Kafka setup
          - name: provided-kafka-bootstrap-servers
            value: ""
          - name: provided-kafka-k8s-name
            value: ""
          - name: kafka-prefix
            value: "ct"
          - name: topic-name
            value: ""
          - name: topic-partitions
            value: ""
            # Proxy setup
          - name: proxy-destination
          - name: proxy-listen-port
            # Replayer setup
          - name: replayer-target-config
      dag:
        tasks:
          - name: id-generator
            template: id-generator
            arguments:
              parameters:
                - name: service-name
                  value: "{{inputs.parameters.session-name}}"
                - name: proxy-endpoint
                  value: "http://{{inputs.parameters.session-name}}:{{inputs.parameters.proxy-listen-port}}"

          - name: kafka-cluster-setup
            templateRef:
              name: kafka-setup
              template: cluster-deploy
            when: "'{{inputs.parameters.provided-kafka-bootstrap-servers}}' == ''"
            dependencies: [ id-generator ]
            arguments:
              parameters:
                - name: kafka-name
                  value: "{{inputs.parameters.kafka-prefix}}-{{=last(split(tasks['id-generator'].id, '-'))}}"

          - name: get-brokers-list
            template: get-brokers-list
            dependencies: [ kafka-cluster-setup ]
            arguments:
              parameters:
                - name: created-kafka-name
                  value: "{{tasks.kafka-cluster-setup.outputs.parameters.kafka-name}}"
                - name: created-bootstrap-servers
                  value: "{{tasks.kafka-cluster-setup.outputs.parameters.bootstrap-servers}}"
                - name: provided-kafka-bootstrap-servers
                  value: "{{inputs.parameters.provided-kafka-bootstrap-servers}}"
                - name: provided-kafka-k8s-name
                  value: "{{inputs.parameters.provided-kafka-k8s-name}}"

          - name: kafka-topic-setup
            templateRef:
              name: kafka-setup
              template: create-kafka-topic
            dependencies: [ get-brokers-list ]
            arguments:
              parameters:
                - name: kafka-name
                  value: "{{tasks.get-brokers-list.outputs.parameters.kafka-name}}"
                - name: topic-name
                  value: "{{=let v=inputs.parameters['topic-name']; v == '' ? inputs.parameters['session-name'] : v}}"
                - name: topic-partitions
                  value: "{{inputs.parameters.topic-partitions}}"

          - name: deploy-capture-proxy
            templateRef:
              name: capture-proxy
              template: deploy-capture-proxy
            dependencies: [ get-brokers-list, kafka-topic-setup ]
            arguments:
              parameters:
                - name: backside-uri-string
                  value: "{{=fromJSON(inputs.parameters['proxy-destination'])['endpoint']}}"
                - name: allow-insecure-connections-to-backside
                  value: "{{=fromJSON(inputs.parameters['proxy-destination'])['allow_insecure']}}"
                - name: frontside-port
                  value: "{{inputs.parameters.proxy-listen-port}}"
                - name: kafka-connection
                  value: "{{tasks.get-brokers-list.outputs.parameters.bootstrap-servers}}"
                - name: kafka-topic
                  value: "{{tasks.kafka-topic-setup.outputs.parameters.topic-name}}"

          - name: proxy-service
            templateRef:
              name: capture-proxy
              template: deploy-service
            dependencies: [ deploy-capture-proxy ]
            arguments:
              parameters:
                - name: service-name
                  value: "{{tasks.id-generator.outputs.parameters.service-name}}"
                - name: frontside-port
                  value: "{{inputs.parameters.proxy-listen-port}}"

          - name: deploy-replayer
            templateRef:
              name: replayer
              template: deploy-replayer
            dependencies: [ get-brokers-list, kafka-topic-setup ]
            arguments:
              parameters:
                - name: target-url
                  value: "{{=fromJSON(inputs.parameters['replayer-target-config'])['endpoint']}}"
                - name: insecure
                  value: "{{=fromJSON(inputs.parameters['replayer-target-config'])['allow_insecure']}}"
                - name: auth-header-value
                  value: "{{=let a=fromJSON(inputs.parameters['replayer-target-config'])['basic_auth']; a==nil ? '' : 'Basic ' + toBase64(a['username'] + ':' + a['password'])}}"
                - name: speedup-factor
                  value: "20.0"
                - name: kafka-traffic-brokers
                  value: "{{tasks.get-brokers-list.outputs.parameters.bootstrap-servers}}"
                - name: kafka-traffic-topic
                  value: "{{tasks.kafka-topic-setup.outputs.parameters.topic-name}}"
                - name: kafka-traffic-group-id
                  value: "{{tasks.id-generator.id}}"
                - name: replicas
                  value: "1"

          - name: run-migration-console
            templateRef:
              name: migration-console-template
              template: deploy-console
            dependencies: [ get-brokers-list ]
            arguments:
              parameters:
                - name: name
                  value: "diagnostic-console-{{inputs.parameters.session-name}}"
                - name: source-cluster
                  value: "{{=replace(inputs.parameters['source-config'], fromJSON(inputs.parameters['source-config'])['endpoint'], tasks['id-generator'].outputs.parameters['proxy-endpoint'])}}"
                - name: target-cluster
                  value: "{{inputs.parameters.replayer-target-config}}"
                - name: kafka-info
                  value: |
                    {
                      "broker_endpoints": "{{tasks.get-brokers-list.outputs.parameters.bootstrap-servers}}",
                      "standard": ""
                    }
                - name: command
                  value: tail -f /dev/null

          - name: get-user-satisfied-confirmation
            template: get-user-satisfied-confirmation
            dependencies: [ proxy-service, deploy-replayer, run-migration-console ]

    - name: get-brokers-list
      steps: [[]]
      inputs:
          parameters:
            - name: created-bootstrap-servers
            - name: created-kafka-name
            - name: provided-kafka-bootstrap-servers
            - name: provided-kafka-k8s-name
      outputs:
        parameters:
          - name: kafka-name
            valueFrom:
              expression: "inputs.parameters['provided-kafka-k8s-name'] == '' ? inputs.parameters['created-kafka-name'] : inputs.parameters['provided-kafka-k8s-name']"
          - name: bootstrap-servers
            valueFrom:
              expression: "inputs.parameters['provided-kafka-bootstrap-servers'] == '' ? inputs.parameters['created-bootstrap-servers'] : inputs.parameters['provided-kafka-bootstrap-servers']"

    - name: get-user-satisfied-confirmation
      suspend: {}

    - name: id-generator
      inputs:
        parameters:
          - name: proxy-endpoint
          - name: service-name
      outputs:
        parameters:
          - name: proxy-endpoint
            valueFrom:
              expression: "inputs.parameters['proxy-endpoint']"
          - name: service-name
            valueFrom:
              expression: "inputs.parameters['service-name']"
      steps: [[]]