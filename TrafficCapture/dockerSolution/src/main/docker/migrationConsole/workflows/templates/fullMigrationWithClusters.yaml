apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: full-migration-with-clusters
spec:
  serviceAccountName: argo-workflow-executor
  onExit: cleanup-all-clusters
  entrypoint: main
  parallelism: 100

  arguments:
    parameters:
      - name: cluster-namespace
        value: "ma"
      - name: source-cluster-template
        value: "elasticsearch-5-6-single-node"
      - name: target-cluster-template
        value: "opensearch-2-19-single-node"
      - name: snapshot-and-migration-configs
        value: |
          [{
            "indices": ["index_3", "index_4"],
            "migrations": [{
              "metadata": {
                "from_snapshot": null,
                "transformer_config_base64": ""
              },
              "documentBackfillConfigs": [{"indices": ["index_3", "index_4"]}]
            }]
          }]
      - name: replayer-config
        value: |
          {"batchSize": 1000, "concurrency": 4}
      # Any references to workflow.parameters must come from top level workflow
      - name: etcd-endpoints
        value: "http://etcd.ma.svc.cluster.local:2379"
      - name: etcd-user
        value: "root"
      - name: etcd-password
        value: "password"
      - name: s3-snapshot-configmap
        value: "migrations-default-s3-config"
      - name: migration-image-configmap
        value: "migration-image-config"

  templates:
    # Main workflow template
    - name: main
      steps:
        - - name: generate-cluster-names
            template: generate-cluster-names

        - - name: create-source-cluster
            templateRef:
              name: cluster-templates
              template: "{{workflow.parameters.source-cluster-template}}"
            arguments:
              parameters:
                - name: cluster-name
                  value: "{{steps.generate-cluster-names.outputs.parameters.source-cluster-name}}"
                - name: namespace
                  value: "{{workflow.parameters.cluster-namespace}}"

          - name: create-target-cluster
            templateRef:
              name: cluster-templates
              template: "{{workflow.parameters.target-cluster-template}}"
            arguments:
              parameters:
                - name: cluster-name
                  value: "{{steps.generate-cluster-names.outputs.parameters.target-cluster-name}}"
                - name: namespace
                  value: "{{workflow.parameters.cluster-namespace}}"

        - - name: wait-for-source-cluster
            template: wait-for-cluster
            arguments:
              parameters:
                - name: cluster-name
                  value: "{{steps.generate-cluster-names.outputs.parameters.source-cluster-name}}"
                - name: cluster-type
                  value: "source"
                - name: namespace
                  value: "{{workflow.parameters.cluster-namespace}}"

          - name: wait-for-target-cluster
            template: wait-for-cluster
            arguments:
              parameters:
                - name: cluster-name
                  value: "{{steps.generate-cluster-names.outputs.parameters.target-cluster-name}}"
                - name: cluster-type
                  value: "target"
                - name: namespace
                  value: "{{workflow.parameters.cluster-namespace}}"

        # Pause for integration test data setup
        - - name: pause-for-test-data
            template: suspend-step

        # Generate migration configurations
        - - name: generate-migration-configs
            template: generate-migration-configs
            arguments:
              parameters:
                - name: source-config
                  value: "{{steps.create-source-cluster.outputs.parameters.cluster-config}}"
                - name: target-config
                  value: "{{steps.create-target-cluster.outputs.parameters.cluster-config}}"
                - name: snapshot-and-migration-configs
                  value: "{{workflow.parameters.snapshot-and-migration-configs}}"
                - name: replayer-config
                  value: "{{workflow.parameters.replayer-config}}"

        # Run the full migration
        - - name: run-full-migration
            templateRef:
              name: full-migration
              template: main
            arguments:
              parameters:
                - name: source-migration-configs
                  value: "{{steps.generate-migration-configs.outputs.parameters.source-migration-configs}}"
                - name: targets
                  value: "{{steps.generate-migration-configs.outputs.parameters.targets}}"
        
        # Pause for integration test migration verification
        - - name: pause-for-migration-verification
            template: suspend-step

    # Template to generate unique cluster names based on template types
    - name: generate-cluster-names
      container:
        image: alpine:latest
        command: [sh, -c]
        args:
          - |
            # Generate unique suffix from workflow UID
            SUFFIX=$(echo "{{workflow.uid}}" | cut -c1-8)
            
            SOURCE_TEMPLATE="{{workflow.parameters.source-cluster-template}}"
            TARGET_TEMPLATE="{{workflow.parameters.target-cluster-template}}"
            SOURCE_ID=$(echo "${SOURCE_TEMPLATE}" | cut -d'-' -f1-3)
            TARGET_ID=$(echo "${TARGET_TEMPLATE}" | cut -d'-' -f1-3)
            
            SOURCE_CLUSTER_NAME="source-${SOURCE_ID}-${SUFFIX}"
            TARGET_CLUSTER_NAME="target-${TARGET_ID}-${SUFFIX}"
            
            # Output parameters
            echo "${SOURCE_CLUSTER_NAME}" > /tmp/source-cluster-name
            echo "${TARGET_CLUSTER_NAME}" > /tmp/target-cluster-name
            
            echo "Generated cluster names:"
            echo "Source: ${SOURCE_CLUSTER_NAME} (from template: ${SOURCE_TEMPLATE})"
            echo "Target: ${TARGET_CLUSTER_NAME} (from template: ${TARGET_TEMPLATE})"
      outputs:
        parameters:
          - name: source-cluster-name
            valueFrom:
              path: /tmp/source-cluster-name
          - name: target-cluster-name
            valueFrom:
              path: /tmp/target-cluster-name

    # Template to wait for cluster readiness
    - name: wait-for-cluster
      inputs:
        parameters:
          - name: cluster-name
          - name: cluster-type
          - name: namespace
      container:
        image: bitnami/kubectl:latest
        command: [sh, -c]
        args:
          - |
            echo "Waiting for {{inputs.parameters.cluster-type}} cluster pod to be ready..."
            
            # Use kubectl wait for conventional pod readiness check
            kubectl wait --for=condition=ready pod/{{inputs.parameters.cluster-name}}-0 \
              --namespace={{inputs.parameters.namespace}} \
              --timeout=200s
            
            echo "{{inputs.parameters.cluster-type}} cluster pod is ready!"

    # Generic suspend template for pausing workflow execution
    - name: suspend-step
      suspend: {}

    # Template to generate migration configurations from cluster configs using expressions
    - name: generate-migration-configs
      inputs:
        parameters:
          - name: source-config
          - name: target-config
          - name: snapshot-and-migration-configs
          - name: replayer-config
      outputs:
        parameters:
          - name: source-migration-configs
            valueFrom:
              expression: >-
                '[{' +
                  '"source": ' + inputs.parameters['source-config'] + ', ' +
                  '"snapshot-and-migration-configs": ' + inputs.parameters['snapshot-and-migration-configs'] + ', ' +
                  '"replayer-config": ' + inputs.parameters['replayer-config'] +
                '}]'
          - name: targets
            valueFrom:
              expression: >-
                '[' + inputs.parameters['target-config'] + ']'
      steps: [[]]  # no-op

    # Cleanup template that always runs on exit (success or failure)
    - name: cleanup-all-clusters
      container:
        image: alpine/helm:latest
        command: [sh, -c]
        args:
          - |
            # Regenerate the same cluster names using workflow UID and template names
            SUFFIX=$(echo "{{workflow.uid}}" | cut -c1-8)
            
            SOURCE_TEMPLATE="{{workflow.parameters.source-cluster-template}}"
            TARGET_TEMPLATE="{{workflow.parameters.target-cluster-template}}"
            SOURCE_ID=$(echo "${SOURCE_TEMPLATE}" | cut -d'-' -f1-3)
            TARGET_ID=$(echo "${TARGET_TEMPLATE}" | cut -d'-' -f1-3)
            
            SOURCE_CLUSTER_NAME="source-${SOURCE_ID}-${SUFFIX}"
            TARGET_CLUSTER_NAME="target-${TARGET_ID}-${SUFFIX}"
            
            echo "Cleaning up clusters: ${SOURCE_CLUSTER_NAME}, ${TARGET_CLUSTER_NAME}"
            
            # Cleanup source cluster
            echo "Uninstalling source cluster: ${SOURCE_CLUSTER_NAME}"
            helm uninstall ${SOURCE_CLUSTER_NAME} \
              --namespace {{workflow.parameters.cluster-namespace}} \
              --ignore-not-found || true
            
            # Cleanup target cluster  
            echo "Uninstalling target cluster: ${TARGET_CLUSTER_NAME}"
            helm uninstall ${TARGET_CLUSTER_NAME} \
              --namespace {{workflow.parameters.cluster-namespace}} \
              --ignore-not-found || true
            
            echo "Cluster cleanup completed"
