apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: bulk-load
  # add labels later w/ patch
spec:
  serviceAccountName: argo-workflow-executor
  entrypoint: run-bulk-load

  templates:
    - name: run-bulk-load-from-config
      inputs:
        parameters:
          # Required parameters (no default names)
          - name: target-config
            description: "Target host config object"
          - name: snapshot-config
            description: "Details of the snapshot to use (required)"
          - name: session-name
            description: "Name of the unique session to disambiguate coordinating indices"
          - name: optional-configs
            description: "JSON Key-Value form of all of the optional parameters to run-bulk-load"
            value: ""
      steps:
        - - name: run-bulk-load
            template: run-bulk-load
            arguments:
              parameters:
                - name: target-host
                  value: "{{=fromJSON(inputs.parameters['target-config'])['endpoint']}}"
                - name: target-insecure
                  value: "{{=fromJSON(inputs.parameters['target-config'])['allow_insecure']}}"
                - name: target-username
                  value: "{{=let a=fromJSON(inputs.parameters['target-config'])['basic_auth'];a==nil?'':a['username']}}"
                - name: target-password
                  value: "{{=let a=fromJSON(inputs.parameters['target-config'])['basic_auth'];a==nil?'':a['password']}}"
                - name: snapshot-name
                  value: "{{=fromJSON(inputs.parameters['snapshot-config'])['snapshot_name']}}"
                - name: s3-repo-uri
                  value: "{{=fromJSON(inputs.parameters['snapshot-config'])['s3']['repo_uri'] ?? ''}}"
                - name: s3-region
                  value: "{{=fromJSON(inputs.parameters['snapshot-config'])['s3']['aws_region'] ?? ''}}"
                - name: s3-endpoint
                  value: "{{=fromJSON(inputs.parameters['snapshot-config'])['s3']['endpoint'] ?? ''}}"
                - name: session-name
                  value: "{{inputs.parameters.session-name}}"
                  # TODO - parse the other stuff out and into the args.

    - name: run-bulk-load
      inputs:
        parameters:
          # Required parameters (no default names)
          - name: session-name
            description: "Name of the unique session to disambiguate coordinating indices"
          - name: target-host
            description: "Target host URL (required)"
          - name: snapshot-name
            description: "Name of the snapshot to use (required)"

          - name: s3-repo-uri
            description: "The name of the S3 bucket that is holding the snapshot"
          - name: s3-region
            description: "Region of the S3 bucket that holds the snapshot"
          - name: s3-endpoint
            description: "Endpoint exposing the S3 service (empty to indicate no override for AWS)"
            value: ""

          # Parameters with defaults - split into input and default pairs
          - name: replicas
            value: ""
            description: "Number of replicas to create"
          - name: default-replicas
            value: "1"
            description: "Default number of replicas"

          - name: image
            value: ""
            description: "Container image to use"
          - name: default-image
            value: "migrations/reindex_from_snapshot:latest"
            description: "Default container image"

          - name: documents-per-bulk-request
            value: ""
            description: "Number of documents per bulk request"

          - name: lease-duration
            value: ""
            description: "Initial lease duration"

          - name: target-insecure
            value: ""
            description: "Flag for insecure target connections"

          - name: target-username
            value: ""
            description: "Username for target authentication"

          - name: target-password
            value: ""
            description: "Password for target authentication"

          - name: doc-transformer-base64
            value: ""
            description: "Encoded transformer configuration"

          - name: index-allowlist
            value: ""
            description: "Indices to migrate"
      steps:
        - - name: create-rfs-replicaset
            template: create-rs
            arguments:
              parameters:
                # Required parameters - pass directly
                - name: target-host
                  value: "{{inputs.parameters.target-host}}"
                - name: snapshot-name
                  value: "{{inputs.parameters.snapshot-name}}"
                - name: session-name
                  value: "{{inputs.parameters.session-name}}"
                - name: s3-repo-uri
                  value: "{{inputs.parameters.s3-repo-uri}}"
                - name: s3-region
                  value: "{{inputs.parameters.s3-region}}"
                - name: s3-endpoint
                  value: "{{inputs.parameters.s3-endpoint}}"
                - name: replicas
                  value: "{{=inputs.parameters.replicas == '' ? inputs.parameters['default-replicas'] : inputs.parameters.replicas}}"
                - name: image
                  value: "{{=inputs.parameters.image == '' ? inputs.parameters['default-image'] : inputs.parameters.image}}"
                - name: documents-per-bulk-request
                  value: "{{inputs.parameters.documents-per-bulk-request}}"
                - name: lease-duration
                  value: "{{inputs.parameters.lease-duration}}"
                - name: target-insecure
                  value: "{{inputs.parameters.target-insecure}}"
                - name: target-username
                  value: "{{inputs.parameters.target-username}}"
                - name: target-password
                  value: "{{inputs.parameters.target-password}}"
                - name: doc-transformer-base64
                  value: "{{inputs.parameters.doc-transformer-base64}}"
                - name: index-allowlist
                  value: "{{inputs.parameters.index-allowlist}}"

        - - name: setup-wait-for-completion
            templateRef:
              name: migration-console-template
              template: get-console-config
            arguments:
              parameters:
                - name: target-cluster
                  value: |
                    { 
                      "endpoint": "{{inputs.parameters.target-host}}",
                      {{=let u = inputs.parameters['target-username']; let p = inputs.parameters['target-password']; 
                        (u == nil && u == '') ? "" : 
                     '"basic_auth": {"username": "' + u + '", "password": "' + p + '" }, ' }}
                      "allow_insecure": {{=inputs.parameters['target-insecure'] ?? "false"}}
                    }

        - - name: wait-for-completion
            template: wait-for-completion
            arguments:
              parameters:
                - name: session-name
                  value: "{{inputs.parameters.session-name}}"
                - name: config-contents
                  value: "{{steps.setup-wait-for-completion.outputs.parameters.config-contents}}"

        - - name: cleanup-rfs-replicaset
            template: delete-rs
            arguments:
              parameters:
                - name: name
                  value: "{{inputs.parameters.session-name}}"


    - name: create-rs
      inputs:
        parameters:
          - name: logging-configuration-contents
            value: '{"configuration":{"status":"ERROR","appenders":{"Console":{"name":"ConsoleAppender","PatternLayout":{"pattern":"%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n"}}},"loggers":{"logger":{"name":"org.opensearch.migrations","level":"trace","additivity":"false","AppenderRef":{"ref":"ConsoleAppender"}},"root":{"level":"warn","AppenderRef":{"ref":"ConsoleAppender"}}}}}'
          - name: target-host
          - name: snapshot-name
          - name: session-name
          - name: s3-repo-uri
          - name: s3-region
          - name: s3-endpoint
          - name: replicas
          - name: image
          - name: documents-per-bulk-request
          - name: lease-duration
          - name: target-insecure
          - name: target-username
          - name: target-password
          - name: doc-transformer-base64
          - name: index-allowlist
          - name: otel-collector-endpoint
            value: "http://otel-collector:4317"
      resource:
        action: create
        setOwnerReference: true
        manifest: |
          apiVersion: apps/v1
          kind: ReplicaSet
          metadata:
            generateName: rfs-
          spec:
            replicas: {{inputs.parameters.replicas}}
            selector:
              matchLabels:
                app: bulk-loader
            template:
              metadata:
                labels:
                  app: bulk-loader
              spec:
                volumes:
                - name: shared-data
                  emptyDir: {}
                initContainers:
                - name: resolver
                  image: migrations/migration_console:latest
                  imagePullPolicy: IfNotPresent
                  command:
                  - sh
                  - -c
                  - |
                    # Check if s3-endpoint is provided
                    if [ -z "{{inputs.parameters.s3-endpoint}}" ]; then
                      echo "No S3 endpoint provided, skipping resolution"
                      exit 0
                    fi

                    echo "Resolving S3 endpoint IP address for {{inputs.parameters.s3-endpoint}}"
                    # Extract hostname from URL if needed
                    S3_HOST=$(echo "{{inputs.parameters.s3-endpoint}}" | sed -E 's|^https?://||' | sed -E 's|:[0-9]+$||' | sed -E 's|/.*$||')
                    echo "Extracted hostname: $S3_HOST"

                    # Resolve IP address
                    S3_IP=$(/usr/bin/getent hosts $S3_HOST | awk '{ print $1 }')
                    if [ -z "$S3_IP" ]; then
                      echo "Failed to resolve $S3_HOST, using original endpoint"
                      S3_IP="{{inputs.parameters.s3-endpoint}}"
                    else
                      echo "Resolved $S3_HOST to IP: $S3_IP"
                      # Preserve protocol and port if present
                      if echo "{{inputs.parameters.s3-endpoint}}" | grep -q "^https"; then
                        PROTOCOL="https://"
                      else
                        PROTOCOL="http://"
                      fi
                      PORT=$(echo "{{inputs.parameters.s3-endpoint}}" | grep -Eo ':[0-9]+' || echo "")
                      PATH_SUFFIX=$(echo "{{inputs.parameters.s3-endpoint}}" | grep -Eo '/.*$' || echo "")
                      S3_IP="${PROTOCOL}${S3_IP}${PORT}"
                    fi

                    echo "Final S3 endpoint IP address: $S3_IP"
                    echo "$S3_IP" > /shared-data/s3-endpoint-ip
                  volumeMounts:
                  - name: shared-data
                    mountPath: /shared-data
                containers:
                - name: bulk-loader
                  image: {{inputs.parameters.image}}
                  imagePullPolicy: IfNotPresent
                  env:
                    - name: TARGET_HOST
                      value: "{{inputs.parameters.target-host}}"
                    - name: SNAPSHOT_NAME
                      value: "{{inputs.parameters.snapshot-name}}"
                    - name: SESSION_NAME
                      value: "{{inputs.parameters.session-name}}"
                    - name: S3_REPO_URI
                      value: "{{inputs.parameters.s3-repo-uri}}"
                    - name: S3_REGION
                      value: "{{inputs.parameters.s3-region}}"
                    - name: DOCUMENTS_PER_BULK_REQUEST
                      value: "{{inputs.parameters.documents-per-bulk-request}}"
                    - name: LEASE_DURATION
                      value: "{{inputs.parameters.lease-duration}}"
                    - name: LUCENE_DIR
                      value: "/tmp"
                    - name: SNAPSHOT_LOCAL_DIR
                      value: ""
                    - name: TARGET_INSECURE
                      value: "{{inputs.parameters.target-insecure}}"
                    - name: TARGET_USERNAME
                      value: "{{inputs.parameters.target-username}}"
                    - name: TARGET_PASSWORD
                      value: "{{inputs.parameters.target-password}}"
                    - name: DOC_TRANSFORMER_BASE64
                      value: "{{inputs.parameters.doc-transformer-base64}}"
                    - name: INDEX_ALLOW_LIST
                      value: "{{inputs.parameters.index-allowlist}}"
                    - name: AWS_ACCESS_KEY_ID
                      value: "test"
                    - name: AWS_SECRET_ACCESS_KEY
                      value: "test"
                    - name: AWS_SESSION_TOKEN
                      value: "test"
                    - name: AWS_REGION
                      value: "us-east-1"
                    - name: AWS_DEFAULT_REGION
                      value: "us-east-1"
                    - name: OTEL_COLLECTOR_ENDPOINT
                      value: "{{inputs.parameters.otel-collector-endpoint}}"
                  command:
                    - "/bin/sh"
                    - "-c"
                    - |
                      set -e

                      # If s3-endpoint is provided and the file with resolved IP exists, use it
                      if [ -n "{{inputs.parameters.s3-endpoint}}" ] && [ -f /shared-data/s3-endpoint-ip ]; then
                        export S3_ENDPOINT=$(cat /shared-data/s3-endpoint-ip)
                        echo "Using resolved S3 endpoint: $S3_ENDPOINT"
                      fi

                      ARGS=""
                      ARGS="${ARGS}${S3_REPO_URI:+ --s3-repo-uri $S3_REPO_URI --s3-local-dir /tmp}"
                      ARGS="${ARGS}${S3_REGION:+ --s3-region $S3_REGION}"
                      ARGS="${ARGS}${S3_ENDPOINT:+ --s3-endpoint $S3_ENDPOINT}"
                      ARGS="${ARGS}${DOCUMENTS_PER_BULK_REQUEST:+ --documentsPerBulkRequest $DOCUMENTS_PER_BULK_REQUEST}"
                      ARGS="${ARGS}${INITIAL_LEASE_DURATION:+ --initialLeaseDuration $INITIAL_LEASE_DURATION}"
                      ARGS="${ARGS}${LUCENE_DIR:+ --luceneDir $LUCENE_DIR}"
                      ARGS="${ARGS}${SESSION_NAME:+ --sessionName $SESSION_NAME}"
                      ARGS="${ARGS}${SNAPSHOT_LOCAL_DIR:+ --snapshotLocalDir $SNAPSHOT_LOCAL_DIR}"
                      ARGS="${ARGS}${SNAPSHOT_NAME:+ --snapshotName $SNAPSHOT_NAME}"
                      ARGS="${ARGS}${TARGET_HOST:+ --targetHost $TARGET_HOST}"
                      ARGS="${ARGS}${TARGET_PASSWORD:+ --targetPassword $TARGET_PASSWORD}"
                      ARGS="${ARGS}${TARGET_USERNAME:+ --targetUsername $TARGET_USERNAME}"
                      ARGS="${ARGS}${DOC_TRANSFORMER_BASE64:+ --docTransformerConfigBase64 $DOC_TRANSFORMER_BASE64}"
                      ARGS="${ARGS}${INDEX_ALLOW_LIST:+ --indexAllowList $INDEX_ALLOW_LIST}"
                      ARGS="${ARGS}${OTEL_COLLECTOR_ENDPOINT:+ --otelCollectorEndpoint $OTEL_COLLECTOR_ENDPOINT}"

                      # Special handling for boolean flag
                      if [ "$TARGET_INSECURE" = "true" ] || [ "$TARGET_INSECURE" = "1" ]; then
                          ARGS="${ARGS} --targetInsecure"
                      fi

                      mkdir /config
                      export LOG4J_CONFIGURATION_FILE=/config/log4j2.overrides.json
                      cat << '___EOF___' > $LOG4J_CONFIGURATION_FILE 
                      {{inputs.parameters.logging-configuration-contents}}
                      ___EOF___

                      echo properties file contents...
                      cat $LOG4J_CONFIGURATION_FILE

                      export RFS_COMMAND="/rfs-app/runJavaWithClasspath.sh org.opensearch.migrations.RfsMigrateDocuments $ARGS"
                      exec /rfs-app/entrypoint.sh
                  volumeMounts:
                  - name: shared-data
                    mountPath: /shared-data


    - name: wait-for-completion
      inputs:
        parameters:
          - name: config-contents
          - name: session-name
      retryStrategy:
        limit: "200"
        retryPolicy: "Always"
        backoff:
          duration: "5"
          factor: 2
          maxDuration: "300"
      steps:
        - - name: check-rfs-completion
            templateRef:
              name: migration-console-template
              template: run-console-with-config
            arguments:
              parameters:
                - name: config-contents
                  value: "{{inputs.parameters.config-contents}}"
                - name: command
                  value: |
                    set -x && 
                    python -c '
                    import sys
                    from lib.console_link.console_link.environment import Environment
                    from lib.console_link.console_link.models.backfill_rfs import get_detailed_status_dict
                    from lib.console_link.console_link.models.backfill_rfs import all_shards_finished_processing
                    
                    status = get_detailed_status_dict(Environment("/config/migration_services.yaml").target_cluster, 
                                                      "{{=inputs.parameters['session-name']}}")
                    print(status)
                    all_finished = all_shards_finished_processing(Environment("/config/migration_services.yaml").target_cluster,
                                                                  "{{=inputs.parameters['session-name']}}")
                    sys.exit(0 if all_finished else 1)
                    '

    - name: delete-rs
      inputs:
        parameters:
          - name: name
      resource:
        action: delete
        flags: ["--ignore-not-found"]
        manifest: |
          apiVersion: apps/v1
          kind: ReplicaSet
          metadata:
            name: "bulk-loader-{{inputs.parameters.name}}"