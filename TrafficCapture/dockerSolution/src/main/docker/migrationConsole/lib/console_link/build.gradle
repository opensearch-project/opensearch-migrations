plugins {
    id 'base'
    id 'de.undercouch.download' version '5.5.0'
}

def apiPort = 8099 // Not a commonly used
def openapiUrl = "http://127.0.0.1:${apiPort}/openapi.json"
def serverPidFile = layout.buildDirectory.file("fastapi.pid")
def openapiOutFile = layout.buildDirectory.file("openapi.json")

def pythonSources = fileTree(dir: projectDir, include: '**/*.py')
def dependencyFiles = files(
    "Pipfile",
    "Pipfile.lock"
).filter { it.exists() }
def venv = layout.projectDir.dir(".venv")

// Needed dereferenced pointer for configuration cache
def projectDirRef = projectDir

tasks.register('preparePipenv') {
    mustRunAfter tasks.named('spotlessCheck')
    mustRunAfter tasks.named('spotlessApply')
    inputs.files(dependencyFiles)
    outputs.dir(venv)

    doLast {
        ['pipenv', 'install', '--dev'].execute(null, projectDirRef).waitFor()
        logger.info("Ran pipenv install")
    }
}

tasks.register('startApiServer') {
    dependsOn 'alsoStopApiServer'
    dependsOn 'preparePipenv'

    doLast {
        def command = "pipenv run gunicorn console_link.api.main:app -k uvicorn.workers.UvicornWorker -w 1 -b 127.0.0.1:${apiPort}"
        def proc = command.execute(null, projectDirRef)
        sleep 2000

        logger.info("Server started with ${command}, pid: ${proc.pid()}")
        def pidFile = serverPidFile.get().asFile
        pidFile.parentFile.mkdirs()
        pidFile.text = "${proc.pid()}"
    }
}

def createStopApiServerTask = { Task task ->
    task.dependsOn 'preparePipenv'

    task.doLast {
        def pidFile = serverPidFile.get().asFile
        if (pidFile.exists()) {
            def pid = pidFile.text.trim()
            logger.info("Killing FastAPI server with PID $pid")
            ["kill", pid].execute().waitFor()
            pidFile.delete()
        }
    }
}

tasks.register('stopApiServer') {
    createStopApiServerTask(it)
}

tasks.register('alsoStopApiServer') {
    createStopApiServerTask(it)
}

tasks.register('fetchOpenApiSpec', de.undercouch.gradle.tasks.download.Download) {
    src openapiUrl
    dest openapiOutFile
    dependsOn 'startApiServer'
    finalizedBy 'stopApiServer'

    doLast {
        logger.lifecycle("OpenAPI spec downloaded to ${openapiOutFile}")
    }
    inputs.files(pythonSources)
    inputs.files(dependencyFiles)
    outputs.file(openapiOutFile)
}

clean.doFirst {
    delete venv
}
