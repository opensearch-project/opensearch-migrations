receivers:
  otlp:
    protocols:
      grpc:
processors:
  batch:
    timeout: 10s
    send_batch_size: 8192
    send_batch_max_size: 10000
  attributes:
    # This processor is currently renaming two attributes
    # that are prefixed with `log4j.context_data.` to the base attribute name
    # to make queries within OpenSearch clearer. Both the `insert from_attribute`
    # and the `delete` actions will fail silently if the attribute is not present,
    # which means that these are safe for events that both do and don't have these
    # attributes. This pattern should be extended to all of our standard attributes.
    actions:
      - key: event
        from_attribute: log4j.context_data.event
        action: insert
      - key: log4j.context_data.event
        action: delete
      - key: channel_id
        from_attribute: log4j.context_data.channel_id
        action: insert
      - key: log4j.context_data.channel_id
        action: delete
      # The following actions convert various should-be-int strings to ints
      - key: log4j.context_data.source_http_status
        action: convert
        converted_type: int
      - key: log4j.context_data.target_http_status
        action: convert
        converted_type: int
      - key: log4j.context_data.http_status_match
        action: convert
        converted_type: int
extensions:
  health_check:
exporters:
  logging:
    verbosity: detailed
    sampling_initial: 5
    sampling_thereafter: 200
  opensearch:
    namespace: migrations
    http:
      endpoint: "${ANALYTICS_DOMAIN_ENDPOINT}"
  awsemf:
    namespace: 'TrafficCaptureReplay'
  awsxray:
    index_all_attributes: true
service:
  extensions: [health_check]
  pipelines:
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, awsemf]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, awsxray]
    logs:
      receivers: [otlp]
      processors: [attributes]
      exporters: [opensearch, logging]
