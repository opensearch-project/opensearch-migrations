version: '3.7'
services:

  # Run combined instance of Capture Proxy and Elasticsearch
  capture-proxy-es:
    image: 'migrations/capture_proxy:latest'
    networks:
      - migrations
    ports:
      - "9200:9200"
      - "19200:19200"
    environment:
      - http.port=19200
    # Run processes for elasticsearch and capture proxy, and exit if either one ends
    command: /bin/sh -c '/usr/local/bin/docker-entrypoint.sh eswrapper & /runJavaWithClasspath.sh org.opensearch.migrations.trafficcapture.proxyserver.CaptureProxy  --kafkaConnection kafka:9092 --destinationUri  https://localhost:19200  --insecureDestination --listenPort 9200 --sslConfigFile /usr/share/elasticsearch/config/proxy_tls.yml --otelCollectorEndpoint http://otel-collector:4317 & wait -n 1'
    depends_on:
      - kafka

# Run separate instances of Capture Proxy and Elasticsearch
#  capture-proxy:
#    image: 'migrations/capture_proxy:latest'
#    networks:
#      - migrations
#    ports:
#      - "9200:9200"
#    command: /runJavaWithClasspath.sh org.opensearch.migrations.trafficcapture.proxyserver.CaptureProxy  --kafkaConnection kafka:9092 --destinationUri  https://elasticsearch:9200  --insecureDestination --listenPort 9200 --sslConfigFile /usr/share/elasticsearch/config/proxy_tls.yml
#    depends_on:
#      - kafka
#      - elasticsearch
#
#  elasticsearch:
#    image: 'migrations/elasticsearch_searchguard:latest'
#    networks:
#      - migrations
#    ports:
#      - '19200:9200'

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    networks:
      - migrations
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.6
    networks:
      - migrations
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper

  replayer:
    image: 'migrations/traffic_replayer:latest'
    networks:
      - migrations
    volumes:
      - sharedReplayerOutput:/shared-replayer-output
    environment:
      - TUPLE_DIR_PATH=/shared-replayer-output/traffic-replayer-default
    depends_on:
      kafka:
        condition: service_started
      opensearchtarget:
        condition: service_started
    command: /bin/sh -c "/runJavaWithClasspath.sh org.opensearch.migrations.replay.TrafficReplayer https://opensearchtarget:9200 --auth-header-value Basic\\ YWRtaW46YWRtaW4= --insecure --kafka-traffic-brokers kafka:9092 --kafka-traffic-topic logging-traffic-topic --kafka-traffic-group-id default-logging-group --otelCollectorEndpoint http://otel-collector:4317"

  opensearchtarget:
    image: 'opensearchproject/opensearch:latest'
    environment:
      - discovery.type=single-node
    networks:
      - migrations
    ports:
      - "29200:9200"

  opensearchanalytics:
    image: 'opensearchproject/opensearch:latest'
    environment:
      - discovery.type=single-node
    networks:
      - migrations
    ports:
      - "39200:9200"

  opensearch-dashboards:
    image: migrations/opensearch_dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - "5601:5601" # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    networks:
      - migrations
    volumes:
      - ./opensearchDashboards/opensearch_dashboards.yml:/usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
    depends_on:
      - opensearchanalytics

  otel-collector:
    image: public.ecr.aws/a0w2c5q7/otelcol-with-opensearch:latest
    container_name: otel-collector
    ports:
      - "4317:4317"
      - "13133:13133"
    volumes:
      - ./otelcol/otel-config.yml:/etc/otel-config.yml
    networks:
      - migrations
    depends_on:
      - opensearchanalytics

  migration-console:
    image: 'migrations/migration_console:latest'
    networks:
      - migrations
    volumes:
      - sharedReplayerOutput:/shared-replayer-output
    environment:
      - MIGRATION_KAFKA_BROKER_ENDPOINTS=kafka:9092

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  sharedComparatorSqlResults:
    driver: local
  sharedReplayerOutput:
    driver: local

networks:
  migrations:
    driver: bridge
