status = warn

property.rootLogsDir = ${env:SHARED_LOGS_DIR_PATH:-./logs}
property.logFileNamePrefix = ${rootLogsDir}/${hostName}
property.tempDir = ./logs/temp

appenders = console, ReplayerLogFile, OUTPUT_TUPLES, TRANSACTION_SUMMARIES, TRANSACTION_SUMMARIES_LOGFILE, ALL_ACTIVE_WORK_MONITOR_LOGFILE

appender.console.type = Console
appender.console.name = STDERR
appender.console.target = SYSTEM_ERR
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%-5level] %d{DEFAULT_MICROS}{UTC} [%t] %c{1} - %msg%equals{ ctx=%mdc}{ ctx={}}{}%n
appender.console.direct = true

appender.ReplayerLogFile.type = RollingRandomAccessFile
appender.ReplayerLogFile.name = ReplayerLogFile
appender.ReplayerLogFile.fileName = ${tempDir}/logs/replayer.log
appender.ReplayerLogFile.filePattern = ${logFileNamePrefix}/logs/replayer-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz
appender.ReplayerLogFile.tempCompressedFilePattern = ${logFileNamePrefix}/logs/replayer-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz.tmp
appender.ReplayerLogFile.layout.type = PatternLayout
appender.ReplayerLogFile.layout.pattern = [%-5level] %d{DEFAULT_MICROS}{UTC} [%t] %c{1} - %msg%equals{ ctx=%mdc}{ ctx={}}{}%n
appender.ReplayerLogFile.policies.type=Policies
# Make a new file once per minute
appender.ReplayerLogFile.policies.time.type=TimeBasedTriggeringPolicy
appender.ReplayerLogFile.policies.time.interval=1
appender.ReplayerLogFile.policies.time.modulate=true
# Make a new file if size is over 1GB
appender.ReplayerLogFile.policies.size.type=SizeBasedTriggeringPolicy
appender.ReplayerLogFile.policies.size.size=1GB
# Make a new file on startup
appender.ReplayerLogFile.policies.startup.type=OnStartupTriggeringPolicy
appender.ReplayerLogFile.strategy.type=DefaultRolloverStrategy
appender.ReplayerLogFile.strategy.fileIndex=nomax
appender.ReplayerLogFile.strategy.compressionLevel = 7
appender.ReplayerLogFile.immediateFlush = false


appender.OUTPUT_TUPLES.type = RollingRandomAccessFile
appender.OUTPUT_TUPLES.name = OUTPUT_TUPLES
appender.OUTPUT_TUPLES.fileName = ${tempDir}/progress/tuples.log
appender.OUTPUT_TUPLES.filePattern = ${logFileNamePrefix}/tuples/tuples-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz
appender.OUTPUT_TUPLES.tempCompressedFilePattern = ${logFileNamePrefix}/tuples/tuples-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz.tmp
appender.OUTPUT_TUPLES.layout.type = PatternLayout
appender.OUTPUT_TUPLES.layout.pattern = %m%n
appender.OUTPUT_TUPLES.policies.type=Policies
# Make a new file once per minute
appender.OUTPUT_TUPLES.policies.time.type=TimeBasedTriggeringPolicy
appender.OUTPUT_TUPLES.policies.time.interval=1
appender.OUTPUT_TUPLES.policies.time.modulate=true
# Make a new file if size is over 1GB
appender.OUTPUT_TUPLES.policies.size.type=SizeBasedTriggeringPolicy
appender.OUTPUT_TUPLES.policies.size.size=1GB
# Make a new file on startup
appender.OUTPUT_TUPLES.policies.startup.type=OnStartupTriggeringPolicy
appender.OUTPUT_TUPLES.strategy.type=DefaultRolloverStrategy
appender.OUTPUT_TUPLES.strategy.fileIndex=nomax
appender.OUTPUT_TUPLES.strategy.compressionLevel = 7
appender.OUTPUT_TUPLES.immediateFlush = false

appender.TRANSACTION_SUMMARIES.type = Console
appender.TRANSACTION_SUMMARIES.name = TransactionSummariesConsole
appender.TRANSACTION_SUMMARIES.target = SYSTEM_OUT
appender.TRANSACTION_SUMMARIES.layout.type = PatternLayout
appender.TRANSACTION_SUMMARIES.layout.pattern = %d{DEFAULT_MICROS}{UTC}: %msg%n
appender.TRANSACTION_SUMMARIES.direct = true

appender.TRANSACTION_SUMMARIES_LOGFILE.type = RollingRandomAccessFile
appender.TRANSACTION_SUMMARIES_LOGFILE.name = TransactionSummariesFile
appender.TRANSACTION_SUMMARIES_LOGFILE.fileName = ${tempDir}/progress/progress.log
appender.TRANSACTION_SUMMARIES_LOGFILE.filePattern = ${logFileNamePrefix}/progress/progress-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz
appender.TRANSACTION_SUMMARIES_LOGFILE.tempCompressedFilePattern = ${logFileNamePrefix}/progress/progress-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.tmp
appender.TRANSACTION_SUMMARIES_LOGFILE.layout.type = PatternLayout
appender.TRANSACTION_SUMMARIES_LOGFILE.layout.pattern = %d{yyyy-MM-dd HH:mm:ss,SSS}{UTC}: %msg%n
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.type=Policies
# Make a new file once per minute
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.time.type=TimeBasedTriggeringPolicy
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.time.interval=1
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.time.modulate=true
# Make a new file if size is over 100MB
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.size.type=SizeBasedTriggeringPolicy
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.size.size=100MB
# Make a new file on startup
appender.TRANSACTION_SUMMARIES_LOGFILE.policies.startup.type=OnStartupTriggeringPolicy
appender.TRANSACTION_SUMMARIES_LOGFILE.strategy.type=DefaultRolloverStrategy
appender.TRANSACTION_SUMMARIES_LOGFILE.strategy.fileIndex=nomax
appender.TRANSACTION_SUMMARIES_LOGFILE.strategy.compressionLevel = 7
appender.TRANSACTION_SUMMARIES_LOGFILE.immediateFlush = false

appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.type = RollingRandomAccessFile
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.name = AllActiveWorkMonitorFile
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.fileName = ${tempDir}/longRunningActivity/longRunningActivity.log
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.filePattern = ${logFileNamePrefix}/longRunningActivity/longRunningActivity-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.gz
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.tempCompressedFilePattern = ${logFileNamePrefix}/longRunningActivity/longRunningActivity-%d{yyyy-MM-dd-HH-mm}{UTC}-%03i.log.tmp
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.layout.type = PatternLayout
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.layout.pattern = %msg%n
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.type=Policies
# Make a new file once per minute
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.time.type=TimeBasedTriggeringPolicy
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.time.interval=1
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.time.modulate=true
# Make a new file if size is over 100MB
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.size.type=SizeBasedTriggeringPolicy
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.size.size=100MB
# Make a new file on startup
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.policies.startup.type=OnStartupTriggeringPolicy
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.strategy.type=DefaultRolloverStrategy
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.strategy.fileIndex=nomax
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.strategy.compressionLevel = 7
appender.ALL_ACTIVE_WORK_MONITOR_LOGFILE.immediateFlush = false

rootLogger.level = info
rootLogger.appenderRef.STDERR.ref = STDERR
rootLogger.appenderRef.ReplayerLogFile.ref = ReplayerLogFile

logger.OutputTupleJsonLogger.name = OutputTupleJsonLogger
logger.OutputTupleJsonLogger.level = info
logger.OutputTupleJsonLogger.additivity = false
logger.OutputTupleJsonLogger.appenderRef.OUTPUT_TUPLES.ref = OUTPUT_TUPLES

logger.TransactionSummaryLogger.name = TransactionSummaryLogger
logger.TransactionSummaryLogger.level = info
logger.TransactionSummaryLogger.additivity = false
logger.TransactionSummaryLogger.appenderRef.TRANSACTION_SUMMARIES_LOGFILE.ref = TransactionSummariesFile
# Uncomment to enable progress logs by console output
#logger.TransactionSummaryLogger.appenderRef.TRANSACTION_SUMMARIES.ref = TransactionSummariesConsole

logger.AllActiveWorkMonitor.name = AllActiveWorkMonitor
logger.AllActiveWorkMonitor.level = info
logger.AllActiveWorkMonitor.additivity = false
logger.AllActiveWorkMonitor.appenderRef.ALL_ACTIVE_WORK_MONITOR.ref = AllActiveWorkMonitorFile
