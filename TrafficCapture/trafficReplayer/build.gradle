/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 *
 * Modifications Copyright OpenSearch Contributors. See
 * GitHub history for details.
 */

plugins {
    id 'org.opensearch.migrations.java-application-conventions'
    id 'io.freefair.lombok'
    id 'java-test-fixtures'
}

dependencies {
    implementation project(':TrafficCapture:captureProtobufs')
    implementation project(':coreUtilities')
    implementation project(':awsUtilities')
    implementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerLoaders')
    implementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerInterface')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJMESPathMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJinjavaTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJoltMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    implementation libs.jcommander
    implementation libs.jackson.databind
    implementation libs.guava
    implementation libs.protobuf.java
    implementation libs.netty.all
    implementation libs.kafka.clients
    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.slf4j2.impl
    implementation libs.slf4j.api
    implementation libs.disruptor
    implementation libs.aws.arns
    implementation libs.aws.secretsmanager
    implementation libs.aws.sdk.core
    implementation libs.aws.msk.iam.auth
    implementation libs.commons.compress

    testFixturesImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerInterface')
    testFixturesImplementation project(':TrafficCapture:captureOffloader')
    testFixturesImplementation testFixtures(project(':TrafficCapture:captureOffloader'))
    testFixturesImplementation project(':TrafficCapture:captureProtobufs')
    testFixturesImplementation project(':coreUtilities')
    testFixturesImplementation testFixtures(project(path: ':coreUtilities'))
    testFixturesImplementation testFixtures(project(path: ':testHelperFixtures'))

    testFixturesImplementation libs.slf4j.api
    testFixturesImplementation libs.jackson.databind
    testFixturesImplementation libs.netty.all
    testFixturesImplementation libs.junit.jupiter.api

    testImplementation testFixtures(project(path: ':testHelperFixtures'))
    testImplementation testFixtures(project(path: ':coreUtilities'))
    testImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJMESPathMessageTransformerProvider')
    testImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJoltMessageTransformerProvider')
    testImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    testImplementation libs.httpclient5
    testImplementation libs.junit.jupiter.api
    testImplementation libs.testcontainers.junit.jupiter
    testImplementation libs.testcontainers.kafka
    testImplementation libs.testcontainers

    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter
    testRuntimeOnly libs.junit.jupiter.engine
}

application {
    mainClass = 'org.opensearch.migrations.replay.TrafficReplayer'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}
