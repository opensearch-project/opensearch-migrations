plugins {
    id 'application'
    id 'java'
    id 'io.freefair.lombok' version '8.6'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import groovy.transform.Canonical
import org.opensearch.migrations.common.CommonUtils

@Canonical
class DockerServiceProps {
    String projectName = ""
    String dockerImageName = ""
    String inputDir = ""
    Map<String, String> buildArgs = [:]
    List<String> taskDependencies = []
}

dependencies {
    implementation platform('io.projectreactor:reactor-bom:2023.0.5')
    testImplementation platform('io.projectreactor:reactor-bom:2023.0.5')

    implementation project(":coreUtilities")
    implementation project(":RFS")
    implementation project(":transformation")
    implementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerLoaders')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core'
    implementation group: 'org.jcommander', name: 'jcommander'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile'
    implementation group: 'io.projectreactor.netty', name: 'reactor-netty-core'
    implementation group: 'io.projectreactor.netty', name:'reactor-netty-http'
    implementation group: 'org.slf4j', name: 'slf4j-api'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl'


    testImplementation testFixtures(project(":RFS"))
    testImplementation testFixtures(project(":coreUtilities"))
    testImplementation testFixtures(project(":testHelperFixtures"))
    testImplementation project(":DataGenerator")
    testImplementation project(":CreateSnapshot")
    testImplementation project(":MetadataMigration")
    testImplementation group: 'org.apache.lucene', name: 'lucene-core'
    testImplementation group: 'org.hamcrest', name: 'hamcrest'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
    testImplementation group: 'org.opensearch', name: 'opensearch-testcontainers'
    testImplementation group: 'org.testcontainers', name: 'testcontainers'
    testImplementation group: 'org.testcontainers', name: 'toxiproxy'
    testImplementation group: 'org.mockito', name: 'mockito-core'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'
    testImplementation group: 'org.json', name: 'json'

    testImplementation platform('io.projectreactor:reactor-bom:2023.0.5')
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'

}

application {
    mainClassName = 'org.opensearch.migrations.RfsMigrateDocuments'
}

// Cleanup additional docker build directory
clean.doFirst {
    delete project.file("./docker/build")
}

task copyDockerRuntimeJars (type: Sync) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    description = 'Copy runtime JARs and app jar to docker build directory'

    // Define the destination directory
    def buildDir = project.file("./docker/build/runtimeJars")
    into buildDir

    // Add all the required runtime JARs to be copied
    from configurations.runtimeClasspath
    from tasks.named('jar')
    include '*.jar'
}

DockerServiceProps[] dockerServices = [
        new DockerServiceProps([projectName:"reindexFromSnapshot",
                                dockerImageName:"reindex_from_snapshot",
                                inputDir:"./docker",
                                taskDependencies:["copyDockerRuntimeJars"]]),
        new DockerServiceProps([projectName:"emptyElasticsearchSource_5_6",
                                dockerImageName:"empty_elasticsearch_source_5_6",
                                inputDir:"./docker/TestSource_ES_5_6"]),
        new DockerServiceProps([projectName:"emptyElasticsearchSource_6_8",
                                dockerImageName:"empty_elasticsearch_source_6_8",
                                inputDir:"./docker/TestSource_ES_6_8"]),
        new DockerServiceProps([projectName:"emptyElasticsearchSource_7_10",
                                dockerImageName:"empty_elasticsearch_source_7_10",
                                inputDir:"./docker/TestSource_ES_7_10"]),
        new DockerServiceProps([projectName:"emptyElasticsearchSource_7_17",
                                dockerImageName:"empty_elasticsearch_source_7_17",
                                inputDir:"./docker/TestSource_ES_7_17"])
] as DockerServiceProps[]

for (dockerService in dockerServices) {
    task "buildDockerImage_${dockerService.projectName}" (type: DockerBuildImage) {
        def hash = CommonUtils.calculateDockerHash(project.fileTree("docker/${dockerService.projectName}"))
        for (dep in dockerService.taskDependencies) {
            dependsOn dep
        }
        inputDir = project.file(dockerService.inputDir)
        // platform.set("linux/amd64")
        buildArgs = dockerService.buildArgs
        images.add("migrations/${dockerService.dockerImageName}:${hash}")
        images.add("migrations/${dockerService.dockerImageName}:${version}")
        images.add("migrations/${dockerService.dockerImageName}:latest")
    }
}

dockerCompose {
    useComposeFiles = ['docker/docker-compose-es710.yml']
    projectName = 'rfs-compose'

    es56 {
        useComposeFiles = ['docker/docker-compose-es56.yml']
    }

    es68 {
        useComposeFiles = ['docker/docker-compose-es68.yml']
    }
}

task buildDockerImages {
    for (dockerService in dockerServices) {
        dependsOn "buildDockerImage_${dockerService.projectName}"
    }
}

tasks.named('composeUp') {
    dependsOn(tasks.named('buildDockerImages'))
}

tasks.named('slowTest') {
    dependsOn(':TrafficCapture:dockerSolution:buildDockerImage_elasticsearch_client_test_console')
    testLogging.showStandardStreams = false
}
