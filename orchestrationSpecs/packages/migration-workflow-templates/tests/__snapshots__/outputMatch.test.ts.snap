// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`test workflow template renderings capture-proxy 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "capture-proxy",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "serviceName",
            },
            {
              "name": "port",
            },
          ],
        },
        "name": "deployproxyservice",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "listenerPort",
            },
            {
              "name": "kafkaConnection",
            },
            {
              "name": "kafkaTopic",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
          ],
        },
        "name": "deploycaptureproxy",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings capture-replay 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "capture-replay",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "proxyEndpoint",
            },
          ],
        },
        "name": "idgenerator",
        "outputs": {
          "parameters": [
            {
              "name": "proxyEndpoint",
              "valueFrom": {
                "expression": "inputs.parameters.proxyEndpoint",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "name": "getuserapproval",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "createdBootstrapServers",
            },
            {
              "name": "createdKafkaName",
            },
            {
              "name": "providedKafkaBootstrapServers",
            },
            {
              "name": "providedKafkaK8sName",
            },
          ],
        },
        "name": "getbrokerslist",
        "outputs": {
          "parameters": [
            {
              "name": "kafkaName",
              "valueFrom": {
                "expression": "(('' == inputs.parameters.providedKafkaK8sName) ? (inputs.parameters.createdKafkaName) : (inputs.parameters.providedKafkaK8sName))",
              },
            },
            {
              "name": "bootstrapServers",
              "valueFrom": {
                "expression": "(('' == inputs.parameters.providedKafkaBootstrapServers) ? (inputs.parameters.createdKafkaName) : (inputs.parameters.providedKafkaK8sName))",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "dag": {
          "tasks": [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "proxyEndpoint",
                    "value": "{{='http://'+inputs.parameters.sessionName+':'+inputs.parameters.proxyListenPort}}",
                  },
                ],
              },
              "name": "idGenerator",
              "template": "idgenerator",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{=inputs.parameters.providedKafkaK8sName+'-'+last(split(tasks.idGenerator.id, '-'))}}",
                  },
                ],
              },
              "dependencies": [
                "idGenerator",
              ],
              "name": "kafkaClusterSetup",
              "templateRef": {
                "name": "setup-kafka",
                "template": "clusterdeploy",
              },
              "when": "'' == '{{inputs.parameters.providedKafkaBootstrapServers}}'",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "createdBootstrapServers",
                    "value": "{{tasks.kafkaClusterSetup.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "createdKafkaName",
                    "value": "{{tasks.kafkaClusterSetup.outputs.parameters.kafkaName}}",
                  },
                  {
                    "name": "providedKafkaBootstrapServers",
                    "value": "{{inputs.parameters.providedKafkaBootstrapServers}}",
                  },
                  {
                    "name": "providedKafkaK8sName",
                    "value": "{{inputs.parameters.providedKafkaK8sName}}",
                  },
                ],
              },
              "dependencies": [
                "kafkaClusterSetup",
              ],
              "name": "getBrokersList",
              "template": "getbrokerslist",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{tasks.getBrokersList.outputs.parameters.kafkaName}}",
                  },
                  {
                    "name": "topicName",
                    "value": "{{=((inputs.parameters.topicName == '') ? (inputs.parameters.sessionName) : (inputs.parameters.topicName))}}",
                  },
                  {
                    "name": "topicPartitions",
                    "value": "{{inputs.parameters.topicPartitions}}",
                  },
                  {
                    "name": "topicReplicas",
                    "value": "{{inputs.parameters.topicReplicas}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
              ],
              "name": "kafkaTopicSetup",
              "templateRef": {
                "name": "setup-kafka",
                "template": "createkafkatopic",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{inputs.parameters.imageCaptureProxyLocation}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{inputs.parameters.imageCaptureProxyPullPolicy}}",
                  },
                  {
                    "name": "listenerPort",
                    "value": "{{inputs.parameters.proxyListenPort}}",
                  },
                  {
                    "name": "kafkaConnection",
                    "value": "{{tasks.getBrokersList.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "kafkaTopic",
                    "value": "{{tasks.kafkaTopicSetup.outputs.parameters.topicName}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
                "kafkaTopicSetup",
              ],
              "name": "deployCaptureProxy",
              "templateRef": {
                "name": "capture-proxy",
                "template": "deploycaptureproxy",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "serviceName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "port",
                    "value": "{{inputs.parameters.proxyListenPort}}",
                  },
                ],
              },
              "dependencies": [
                "deployCaptureProxy",
              ],
              "name": "proxyService",
              "templateRef": {
                "name": "capture-proxy",
                "template": "deployproxyservice",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "replayerConfig",
                    "value": "{{inputs.parameters.replayerConfig}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "kafkaTrafficBrokers",
                    "value": "{{tasks.getBrokersList.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "kafkaTrafficTopic",
                    "value": "{{tasks.kafkaTopicSetup.outputs.parameters.topicName}}",
                  },
                  {
                    "name": "kafkaGroupId",
                    "value": "{{tasks.idGenerator.id}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
                "kafkaTopicSetup",
              ],
              "name": "Replayer",
              "templateRef": {
                "name": "replayer",
                "template": "deployreplayerfromconfig",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "name",
                    "value": "{{='diagnostic-console-'+inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "command",
                    "value": "tail -f /dev/null",
                  },
                  {
                    "name": "kafkaInfo",
                    "value": "{{=toJSON(sprig.dict("broker_endpoints", tasks.getBrokersList.outputs.parameters.bootstrapServers, "standard", ''))}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
              ],
              "name": "runMigrationConsole",
              "templateRef": {
                "name": "migration-console",
                "template": "deployconsole",
              },
            },
          ],
        },
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "proxyDestination",
            },
            {
              "name": "proxyListenPort",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "replayerConfig",
            },
            {
              "name": "providedKafkaBootstrapServers",
              "value": "",
            },
            {
              "name": "providedKafkaK8sName",
              "value": "",
            },
            {
              "name": "kafkaPrefix",
              "value": "capturetraffic",
            },
            {
              "name": "topicName",
              "value": "",
            },
            {
              "name": "topicPartitions",
              "value": "0",
            },
            {
              "name": "topicReplicas",
              "value": "0",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
          ],
        },
        "name": "runall",
        "outputs": {
          "parameters": [],
        },
      },
    ],
  },
}
`;

exports[`test workflow template renderings create-or-get-snapshot 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "create-or-get-snapshot",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "autocreateSnapshotName",
            },
            {
              "name": "indices",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "alreadyDefinedName",
              "value": "{{=sprig.dig('snapshotName', '', fromJSON(inputs.parameters.snapshotConfig))}}",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "createorgetsnapshot",
        "outputs": {
          "parameters": [
            {
              "name": "snapshotConfig",
              "valueFrom": {
                "expression": "((steps.createSnapshot.status == 'Skipped') ? (inputs.parameters.snapshotConfig) : (steps.createSnapshot.outputs.parameters.snapshotConfig))",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{=toJSON(sprig.dict("repoConfig", jsonpath(inputs.parameters.snapshotConfig, '$.repoConfig'), "snapshotName", lower(inputs.parameters.autocreateSnapshotName)))}}",
                  },
                  {
                    "name": "indices",
                    "value": "{{inputs.parameters.indices}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                ],
              },
              "name": "createSnapshot",
              "templateRef": {
                "name": "create-snapshot",
                "template": "snapshotworkflow",
              },
              "when": "'{{inputs.parameters.alreadyDefinedName}}' == ''",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings create-snapshot 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "create-snapshot",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "configContents",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "checksnapshotstatus",
        "outputs": {
          "parameters": [],
        },
        "retryStrategy": {
          "backoff": {
            "duration": "5",
            "factor": "2",
            "maxDuration": "300",
          },
          "limit": "200",
          "retryPolicy": "Always",
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "configContents",
                    "value": "{{inputs.parameters.configContents}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "command",
                    "value": "set -e && [ "$(console --config-file=/config/migration_services.yaml snapshot status)" = "SUCCESS" ] && exit 0 || exit 1",
                  },
                ],
              },
              "name": "checkSnapshotCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "indices",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "snapshotworkflow",
        "outputs": {
          "parameters": [
            {
              "name": "snapshotConfig",
              "valueFrom": {
                "expression": "inputs.parameters.snapshotConfig",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "kafkaInfo",
                    "value": "",
                  },
                  {
                    "name": "targetConfig",
                    "value": "",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "templateRef": {
                "name": "migration-console",
                "template": "getconsoleconfig",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                  {
                    "name": "command",
                    "value": "set -e && 
console --config-file=/config/migration_services.yaml -v snapshot delete --acknowledge-risk ;
console --config-file=/config/migration_services.yaml -v snapshot create
",
                  },
                ],
              },
              "name": "createSnapshot",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "checkSnapshotStatus",
              "template": "checksnapshotstatus",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings document-bulk-load 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "document-bulk-load",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "name",
            },
          ],
        },
        "name": "deletereplicaset",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "delete",
          "flags": [
            "--ignore-not-found",
          ],
          "manifest": "{"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"name":"{{='bulk-loader-'+inputs.parameters.name}}"}}",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "configContents",
            },
            {
              "name": "sessionName",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "waitforcompletion",
        "outputs": {
          "parameters": [],
        },
        "retryStrategy": {
          "backoff": {
            "duration": "5",
            "factor": "2",
            "maxDuration": "300",
          },
          "limit": "200",
          "retryPolicy": "Always",
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "configContents",
                    "value": "{{inputs.parameters.configContents}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "command",
                    "value": "
set -x && 
python -c '
import sys
from lib.console_link.console_link.environment import Environment
from lib.console_link.console_link.models.backfill_rfs import get_detailed_status_dict
from lib.console_link.console_link.models.backfill_rfs import all_shards_finished_processing

status = get_detailed_status_dict(Environment("/config/migration_services.yaml").target_cluster, 
                                  "{{inputs.parameters.sessionName}}")
print(status)
all_finished = all_shards_finished_processing(Environment("/config/migration_services.yaml").target_cluster,
                                              "{{inputs.parameters.sessionName}}")
sys.exit(0 if all_finished else 1)",
                  },
                ],
              },
              "name": "checkRfsCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "numPods",
              "value": "1",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "snapshotName",
            },
            {
              "name": "snapshotRepoPath",
            },
            {
              "name": "s3Endpoint",
            },
            {
              "name": "s3Region",
            },
            {
              "name": "targetAwsRegion",
            },
            {
              "name": "targetAwsSigningName",
            },
            {
              "name": "targetCACert",
            },
            {
              "name": "targetClientSecretName",
            },
            {
              "name": "targetInsecure",
            },
            {
              "name": "targetUsername",
            },
            {
              "name": "targetPassword",
            },
            {
              "name": "enabled",
            },
            {
              "name": "indexAllowlist",
            },
            {
              "name": "loggingConfigurationOverrideConfigMap",
              "value": "",
            },
            {
              "name": "allowLooseVersionMatching",
              "value": "true",
            },
            {
              "name": "docTransformerBase64",
              "value": "",
            },
            {
              "name": "documentsPerBulkRequest",
              "value": "0",
            },
            {
              "name": "initialLeaseDuration",
              "value": "",
            },
            {
              "name": "maxConnections",
              "value": "0",
            },
            {
              "name": "maxShardSizeBytes",
              "value": "0",
            },
            {
              "name": "otelCollectorEndpoint",
              "value": "http://otel-collector:4317",
            },
            {
              "name": "targetCompression",
              "value": "true",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
          ],
        },
        "name": "createreplicaset",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "create",
          "manifest": "{"apiVersion":"apps/v1","kind":"ReplicaSet","metadata":{"name":"{{=inputs.parameters.sessionName+'-reindex-from-snapshot'}}","labels":{"workflows.argoproj.io/workflow":"{{workflow.name}}"}},"spec":{"replicas":"{{inputs.parameters.numPods}}","selector":{"matchLabels":{"app":"bulk-loader"}},"template":{"metadata":{"labels":{"app":"bulk-loader","workflows.argoproj.io/workflow":"{{workflow.name}}"}},"spec":{"containers":[{"name":"bulk-loader","image":"{{inputs.parameters.imageReindexFromSnapshotLocation}}","imagePullPolicy":"{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}","env":[{"name":"RFS_SESSION_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.sessionName}}"},{"name":"RFS_NUM_PODS_CMD_LINE_ARG","value":"{{inputs.parameters.numPods}}"},{"name":"RFS_USE_LOCAL_STACK_CMD_LINE_ARG","value":"{{inputs.parameters.useLocalStack}}"},{"name":"RFS_SNAPSHOT_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.snapshotName}}"},{"name":"RFS_SNAPSHOT_REPO_PATH_CMD_LINE_ARG","value":"{{inputs.parameters.snapshotRepoPath}}"},{"name":"RFS_S3ENDPOINT_CMD_LINE_ARG","value":"{{inputs.parameters.s3Endpoint}}"},{"name":"RFS_S3REGION_CMD_LINE_ARG","value":"{{inputs.parameters.s3Region}}"},{"name":"RFS_TARGET_AWS_REGION_CMD_LINE_ARG","value":"{{inputs.parameters.targetAwsRegion}}"},{"name":"RFS_TARGET_AWS_SIGNING_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetAwsSigningName}}"},{"name":"RFS_TARGET_CA_CERT_CMD_LINE_ARG","value":"{{inputs.parameters.targetCACert}}"},{"name":"RFS_TARGET_CLIENT_SECRET_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetClientSecretName}}"},{"name":"RFS_TARGET_INSECURE_CMD_LINE_ARG","value":"{{inputs.parameters.targetInsecure}}"},{"name":"RFS_TARGET_USERNAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetUsername}}"},{"name":"RFS_TARGET_PASSWORD_CMD_LINE_ARG","value":"{{inputs.parameters.targetPassword}}"},{"name":"RFS_ENABLED_CMD_LINE_ARG","value":"{{inputs.parameters.enabled}}"},{"name":"RFS_INDEX_ALLOWLIST_CMD_LINE_ARG","value":"{{inputs.parameters.indexAllowlist}}"},{"name":"RFS_LOGGING_CONFIGURATION_OVERRIDE_CONFIG_MAP_CMD_LINE_ARG","value":"{{inputs.parameters.loggingConfigurationOverrideConfigMap}}"},{"name":"RFS_ALLOW_LOOSE_VERSION_MATCHING_CMD_LINE_ARG","value":"{{inputs.parameters.allowLooseVersionMatching}}"},{"name":"RFS_DOC_TRANSFORMER_BASE64_CMD_LINE_ARG","value":"{{inputs.parameters.docTransformerBase64}}"},{"name":"RFS_DOCUMENTS_PER_BULK_REQUEST_CMD_LINE_ARG","value":"{{inputs.parameters.documentsPerBulkRequest}}"},{"name":"RFS_INITIAL_LEASE_DURATION_CMD_LINE_ARG","value":"{{inputs.parameters.initialLeaseDuration}}"},{"name":"RFS_MAX_CONNECTIONS_CMD_LINE_ARG","value":"{{inputs.parameters.maxConnections}}"},{"name":"RFS_MAX_SHARD_SIZE_BYTES_CMD_LINE_ARG","value":"{{inputs.parameters.maxShardSizeBytes}}"},{"name":"RFS_OTEL_COLLECTOR_ENDPOINT_CMD_LINE_ARG","value":"{{inputs.parameters.otelCollectorEndpoint}}"},{"name":"RFS_TARGET_COMPRESSION_CMD_LINE_ARG","value":"{{inputs.parameters.targetCompression}}"},{"name":"RFS_IMAGE_REINDEX_FROM_SNAPSHOT_LOCATION_CMD_LINE_ARG","value":"{{inputs.parameters.imageReindexFromSnapshotLocation}}"},{"name":"RFS_IMAGE_REINDEX_FROM_SNAPSHOT_PULL_POLICY_CMD_LINE_ARG","value":"{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}"},{"name":"LUCENE_DIR","value":"/tmp"},{"name":"JAVA_OPTS","value":"{{=' ' + \\" \\" + (('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, '')) ? ('-Dlog4j2.configurationFile=/config/logConfiguration') : (''))}}"},{"name":"AWS_SHARED_CREDENTIALS_FILE","value":"{{=((inputs.parameters.useLocalStack) ? ('/config/credentials') : (''))}}"}],"volumeMounts":[{"name":"log4j-configuration","mountPath":"/config/logConfiguration","readOnly":true},{"name":"localstack-test-creds","mountPath":"/config/credentials","readOnly":true}]}],"volumes":[{"name":"log4j-configuration","configMap":{"name":"{{=(('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, '')) ? ('default-logging-configuration') : (inputs.parameters.loggingConfigurationOverrideConfigMap))}}","optional":"{{=!('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, ''))}}"}},{"name":"localstack-test-creds","configMap":{"name":"localstack-test-creds","optional":"{{=!(inputs.parameters.useLocalStack)}}"}}]}}}}",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "numPods",
              "value": "1",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "documentBackfillConfig",
              "value": "{}",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
          ],
        },
        "name": "createreplicasetfromconfig",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.sessionName')}}",
                  },
                  {
                    "name": "numPods",
                    "value": "{{=sprig.dig('numPods', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.imageReindexFromSnapshotLocation')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.imageReindexFromSnapshotPullPolicy')}}",
                  },
                  {
                    "name": "snapshotName",
                    "value": "{{=sprig.dig('snapshotName', '', fromJSON(inputs.parameters.snapshotConfig))}}",
                  },
                  {
                    "name": "snapshotRepoPath",
                    "value": "{{=jsonpath(inputs.parameters.snapshotConfig, '$.repoConfig.repoPath')}}",
                  },
                  {
                    "name": "s3Endpoint",
                    "value": "{{=sprig.dig('repoConfig', 'endpoint', '', fromJSON(inputs.parameters.snapshotConfig))}}",
                  },
                  {
                    "name": "s3Region",
                    "value": "{{=sprig.dig('repoConfig', 'aws_region', '', fromJSON(inputs.parameters.snapshotConfig))}}",
                  },
                  {
                    "name": "targetAwsRegion",
                    "value": "{{=sprig.dig('authConfig', 'region', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetAwsSigningName",
                    "value": "{{=sprig.dig('authConfig', 'service', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetCACert",
                    "value": "{{=sprig.dig('authConfig', 'caCert', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetClientSecretName",
                    "value": "{{=sprig.dig('authConfig', 'clientSecretName', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetInsecure",
                    "value": "{{=sprig.dig('allow_insecure', false, fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetUsername",
                    "value": "{{=sprig.dig('authConfig', 'username', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetPassword",
                    "value": "{{=sprig.dig('authConfig', 'password', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "enabled",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.enabled')}}",
                  },
                  {
                    "name": "indexAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.documentBackfillConfig, '$.indexAllowlist')}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "allowLooseVersionMatching",
                    "value": "{{=sprig.dig('allowLooseVersionMatching', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "docTransformerBase64",
                    "value": "{{=sprig.dig('docTransformerBase64', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "documentsPerBulkRequest",
                    "value": "{{=sprig.dig('documentsPerBulkRequest', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "initialLeaseDuration",
                    "value": "{{=sprig.dig('initialLeaseDuration', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "maxConnections",
                    "value": "{{=sprig.dig('maxConnections', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "maxShardSizeBytes",
                    "value": "{{=sprig.dig('maxShardSizeBytes', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "otelCollectorEndpoint",
                    "value": "{{=sprig.dig('otelCollectorEndpoint', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "targetCompression",
                    "value": "{{=sprig.dig('targetCompression', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                ],
              },
              "name": "createReplicaset",
              "template": "createreplicaset",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "sessionName",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "indices",
              "value": "[]",
            },
            {
              "name": "backfillConfig",
              "value": "{}",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runbulkload",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{inputs.parameters.useLocalStack}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                ],
              },
              "name": "createReplicasetFromConfig",
              "template": "createreplicasetfromconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "kafkaInfo",
                    "value": "",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "",
                  },
                ],
              },
              "name": "setupWaitForCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "getconsoleconfig",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.setupWaitForCompletion.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "waitForCompletion",
              "template": "waitforcompletion",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "name",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                ],
              },
              "name": "deleteReplicaSet",
              "template": "deletereplicaset",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings full-migration 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "full-migration",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": "main",
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [],
        },
        "name": "donothing",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
      {
        "container": {
          "args": [
            "echo runReplayerForTarget",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "image": "{{inputs.parameters.imageEtcdUtilsLocation}}",
          "pullPolicy": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "targetConfig",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
          ],
        },
        "name": "runreplayerfortarget",
        "outputs": {
          "parameters": [],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "metadataMigrationConfig",
            },
            {
              "name": "documentBackfillConfig",
            },
            {
              "description": "Workflow session nonce",
              "name": "latchCoordinationPrefix",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
          ],
        },
        "name": "foreachsnapshotmigration",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "idGenerator",
              "template": "donothing",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{inputs.parameters.metadataMigrationConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{inputs.parameters.useLocalStack}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                ],
              },
              "name": "metadataMigrate",
              "templateRef": {
                "name": "metadata-migration",
                "template": "migratemetadata",
              },
              "when": "{{=sprig.dig('enabled', false, fromJSON(inputs.parameters.metadataMigrationConfig))}}",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{inputs.parameters.useLocalStack}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "sessionName",
                    "value": "{{steps.idGenerator.id}}",
                  },
                ],
              },
              "name": "bulkLoadDocuments",
              "templateRef": {
                "name": "document-bulk-load",
                "template": "runbulkload",
              },
              "when": "{{=sprig.dig('enabled', false, fromJSON(inputs.parameters.documentBackfillConfig))}}",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
                  },
                  {
                    "name": "prefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                  {
                    "name": "targetName",
                    "value": "{{=jsonpath(inputs.parameters.targetConfig, '$.name')}}",
                  },
                  {
                    "name": "processorId",
                    "value": "{{steps.idGenerator.id}}",
                  },
                ],
              },
              "name": "targetBackfillCompleteCheck",
              "templateRef": {
                "name": "target-latch-helpers",
                "template": "decrementlatch",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
                  },
                ],
              },
              "name": "runReplayerForTarget",
              "template": "runreplayerfortarget",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "migrations",
            },
            {
              "name": "sourcePipelineName",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
          ],
        },
        "name": "foreachsnapshotextraction",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(item, '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(item, '$.targetConfig')}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{=jsonpath(item, '$.snapshotConfig')}}",
                  },
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{=jsonpath(item, '$.latchCoordinationPrefix')}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(item, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyLocation')}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyPullPolicy')}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerLocation')}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerPullPolicy')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotLocation')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotPullPolicy')}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsoleLocation')}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsolePullPolicy')}}",
                  },
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsLocation')}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsPullPolicy')}}",
                  },
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{=jsonpath(item, '$.metadataMigrationConfig')}}",
                  },
                  {
                    "name": "documentBackfillConfig",
                    "value": "{{=jsonpath(item, '$.documentBackfillConfig')}}",
                  },
                ],
              },
              "name": "foreachSnapshotMigration",
              "template": "foreachsnapshotmigration",
              "withParam": "{{inputs.parameters.migrations}}",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotExtractAndLoadConfigArray",
            },
            {
              "name": "replayerConfig",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
          ],
        },
        "name": "foreachmigrationpair",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(item, '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(item, '$.targetConfig')}}",
                  },
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{=jsonpath(item, '$.latchCoordinationPrefix')}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(item, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyLocation')}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyPullPolicy')}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerLocation')}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerPullPolicy')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotLocation')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotPullPolicy')}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsoleLocation')}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsolePullPolicy')}}",
                  },
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsLocation')}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsPullPolicy')}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{=jsonpath(item, '$.snapshotConfig')}}",
                  },
                  {
                    "name": "migrations",
                    "value": "{{=jsonpath(item, '$.migrations')}}",
                  },
                  {
                    "name": "sourcePipelineName",
                    "value": "",
                  },
                ],
              },
              "name": "foreachSnapshotExtraction",
              "template": "foreachsnapshotextraction",
              "withParam": "{{inputs.parameters.snapshotExtractAndLoadConfigArray}}",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "description": "List of server configurations to direct migrated traffic toward",
              "name": "migrationConfigs",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "name": "useLocalStack",
              "value": "false",
            },
            {
              "name": "imageCaptureProxyLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageCaptureProxyPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsoleLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsoleImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsolePullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsolePullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageEtcdUtilsLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "etcdUtilsImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "etcdUtilsPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
          ],
        },
        "name": "fulldenormalized",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{=jsonpath(item, '$.latchCoordinationPrefix')}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(item, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyLocation')}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageCaptureProxyPullPolicy')}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerLocation')}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageTrafficReplayerPullPolicy')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotLocation')}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageReindexFromSnapshotPullPolicy')}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsoleLocation')}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{=jsonpath(item, '$.imageMigrationConsolePullPolicy')}}",
                  },
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsLocation')}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{=jsonpath(item, '$.imageEtcdUtilsPullPolicy')}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(item, '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(item, '$.targetConfig')}}",
                  },
                  {
                    "name": "snapshotExtractAndLoadConfigArray",
                    "value": "{{=jsonpath(item, '$.snapshotExtractAndLoadConfigArray')}}",
                  },
                  {
                    "name": "replayerConfig",
                    "value": "{{=jsonpath(item, '$.replayerConfig')}}",
                  },
                ],
              },
              "name": "foreachMigrationPair",
              "template": "foreachmigrationpair",
              "withParam": "{{inputs.parameters.migrationConfigs}}",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
                  },
                  {
                    "name": "prefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                ],
              },
              "name": "cleanup",
              "templateRef": {
                "name": "target-latch-helpers",
                "template": "cleanup",
              },
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "description": "List of server configurations to migrate data from",
              "name": "sourceClusters",
            },
            {
              "description": "List of server configurations to direct migrated data to",
              "name": "targetClusters",
            },
            {
              "description": "List of server configurations to direct migrated traffic toward",
              "name": "sourceMigrationConfigs",
            },
            {
              "name": "useLocalStack",
              "value": "false",
            },
            {
              "name": "imageCaptureProxyLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageCaptureProxyPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsoleLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsoleImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsolePullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsolePullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageEtcdUtilsLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "etcdUtilsImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "etcdUtilsPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
          ],
        },
        "name": "main",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageEtcdUtilsLocation",
                    "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
                  },
                  {
                    "name": "imageEtcdUtilsPullPolicy",
                    "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
                  },
                  {
                    "name": "targetClusters",
                    "value": "{{inputs.parameters.targetClusters}}",
                  },
                  {
                    "name": "sourceClusters",
                    "value": "{{inputs.parameters.sourceClusters}}",
                  },
                  {
                    "name": "sourceMigrationConfigs",
                    "value": "{{inputs.parameters.sourceMigrationConfigs}}",
                  },
                  {
                    "name": "prefix",
                    "value": "{{='workflow-'+workflow.uid}}",
                  },
                ],
              },
              "name": "init",
              "templateRef": {
                "name": "target-latch-helpers",
                "template": "prepareconfigs",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{steps.init.outputs.parameters.prefix}}",
                  },
                  {
                    "name": "migrationConfigs",
                    "value": "{{steps.init.outputs.parameters.denormalizedConfigArray}}",
                  },
                ],
              },
              "name": "fullMigration",
              "template": "fulldenormalized",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings localstack-helper 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "localstack-helper",
  },
  "spec": {
    "arguments": {
      "parameters": [],
    },
    "entrypoint": "resolveS3Endpoint",
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "container": {
          "args": [
            "
set -euo pipefail

if [ -z "{{inputs.parameters.s3Endpoint}}" ] || ! echo "{{inputs.parameters.s3Endpoint}}" | grep -q "^http://localstack"; then
  echo "No S3 endpoint provided or not using localstack, skipping resolution"
  echo "{{inputs.parameters.s3Endpoint}}" > /tmp/resolved
  echo "false" > /tmp/isLocalstack
  exit 0
fi

echo "Resolving S3 endpoint IP address for {{inputs.parameters.s3Endpoint}}"
RAW="{{inputs.parameters.s3Endpoint}}"
S3_HOST=$(echo "$RAW" | sed -E 's|^https?://||' | sed -E 's|/.*$||' | sed -E 's|:[0-9]+$||')
echo "Extracted hostname: $S3_HOST"

S3_IP=$(getent hosts "$S3_HOST" | awk '{ print $1 }')
if [ -z "$S3_IP" ]; then
  echo "Failed to resolve $S3_HOST, using original endpoint"
  FINAL_ENDPOINT="{{inputs.parameters.s3Endpoint}}"
else
  echo "Resolved $S3_HOST to IP: $S3_IP"
  if echo "{{inputs.parameters.s3Endpoint}}" | grep -q "^https"; then
    PROTOCOL="https://"
  else
    PROTOCOL="http://"
  fi

  PORT=$(echo "{{inputs.parameters.s3Endpoint}}" | grep -Eo ':[0-9]+' || true)
  FINAL_ENDPOINT="\${PROTOCOL}\${S3_IP}\${PORT}"
fi

echo "Final resolved S3 endpoint: $FINAL_ENDPOINT"
echo "$FINAL_ENDPOINT" > /tmp/resolved
echo "true" > /tmp/isLocalstack
",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "s3Endpoint",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "resolves3endpoint",
        "outputs": {
          "parameters": [
            {
              "name": "resolvedS3Endpoint",
              "valueFrom": {
                "path": "/tmp/resolved",
              },
            },
            {
              "name": "isLocalstackEndpoint",
              "valueFrom": {
                "path": "/tmp/isLocalstack",
              },
            },
          ],
        },
      },
    ],
  },
}
`;

exports[`test workflow template renderings metadata-migration 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "metadata-migration",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "container": {
          "command": [
            "/root/metadataMigration/bin/MetadataMigration",
            "{{inputs.parameters.commandMode}}",
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "commandMode",
            },
            {
              "description": "Snapshot storage details (region, endpoint, etc)",
              "name": "snapshotConfig",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "enabled",
            },
            {
              "name": "componentTemplateAllowlist",
            },
            {
              "name": "indexAllowlist",
            },
            {
              "name": "indexTemplateAllowlist",
            },
            {
              "name": "allowLooseVersionMatching",
            },
            {
              "name": "clusterAwarenessAttributes",
            },
            {
              "name": "disableCompression",
            },
            {
              "name": "loggingConfigurationOverrideConfigMap",
              "value": "",
            },
            {
              "name": "multiTypeBehavior",
            },
            {
              "name": "otelCollectorEndpoint",
              "value": "http://otel-collector:4317",
            },
            {
              "name": "output",
            },
            {
              "name": "transformerBase64",
              "value": "",
            },
          ],
        },
        "name": "runmetadata",
        "outputs": {
          "parameters": [],
        },
      },
      {
        "name": "approveevaluate",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "name": "approvemigrate",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "metadataMigrationConfig",
            },
            {
              "description": "Snapshot storage details (region, endpoint, etc)",
              "name": "snapshotConfig",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "migratemetadata",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "snapshotConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.snapshotConfig')}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.targetConfig')}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.imageMigrationConsoleLocation')}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.imageMigrationConsolePullPolicy')}}",
                  },
                  {
                    "name": "commandMode",
                    "value": "evaluate",
                  },
                  {
                    "name": "enabled",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.enabled')}}",
                  },
                  {
                    "name": "componentTemplateAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.componentTemplateAllowlist')}}",
                  },
                  {
                    "name": "indexAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.indexAllowlist')}}",
                  },
                  {
                    "name": "indexTemplateAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.indexTemplateAllowlist')}}",
                  },
                  {
                    "name": "allowLooseVersionMatching",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.allowLooseVersionMatching')}}",
                  },
                  {
                    "name": "clusterAwarenessAttributes",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.clusterAwarenessAttributes')}}",
                  },
                  {
                    "name": "disableCompression",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.disableCompression')}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                  {
                    "name": "multiTypeBehavior",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.multiTypeBehavior')}}",
                  },
                  {
                    "name": "otelCollectorEndpoint",
                    "value": "{{=sprig.dig('otelCollectorEndpoint', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                  {
                    "name": "output",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.output')}}",
                  },
                  {
                    "name": "transformerBase64",
                    "value": "{{=sprig.dig('transformerBase64', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                ],
              },
              "name": "metadataEvaluate",
              "template": "runmetadata",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "approveEvaluate",
              "template": "approveevaluate",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "snapshotConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.snapshotConfig')}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.targetConfig')}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.useLocalStack')}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.imageMigrationConsoleLocation')}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.imageMigrationConsolePullPolicy')}}",
                  },
                  {
                    "name": "commandMode",
                    "value": "migrate",
                  },
                  {
                    "name": "enabled",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.enabled')}}",
                  },
                  {
                    "name": "componentTemplateAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.componentTemplateAllowlist')}}",
                  },
                  {
                    "name": "indexAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.indexAllowlist')}}",
                  },
                  {
                    "name": "indexTemplateAllowlist",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.indexTemplateAllowlist')}}",
                  },
                  {
                    "name": "allowLooseVersionMatching",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.allowLooseVersionMatching')}}",
                  },
                  {
                    "name": "clusterAwarenessAttributes",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.clusterAwarenessAttributes')}}",
                  },
                  {
                    "name": "disableCompression",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.disableCompression')}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                  {
                    "name": "multiTypeBehavior",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.multiTypeBehavior')}}",
                  },
                  {
                    "name": "otelCollectorEndpoint",
                    "value": "{{=sprig.dig('otelCollectorEndpoint', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                  {
                    "name": "output",
                    "value": "{{=jsonpath(inputs.parameters.metadataMigrationConfig, '$.output')}}",
                  },
                  {
                    "name": "transformerBase64",
                    "value": "{{=sprig.dig('transformerBase64', '', fromJSON(inputs.parameters.metadataMigrationConfig))}}",
                  },
                ],
              },
              "name": "metadataMigrate",
              "template": "runmetadata",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "approveMigrate",
              "template": "approvemigrate",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings migration-console 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "migration-console",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
            },
          ],
        },
        "name": "getconsoleconfig",
        "outputs": {
          "parameters": [
            {
              "name": "configContents",
              "valueFrom": {
                "expression": "toJSON(sprig.merge(sprig.merge((('' == inputs.parameters.kafkaInfo) ? ({}) : (sprig.dict("kafka", fromJSON(inputs.parameters.kafkaInfo)))), (('' == inputs.parameters.sourceConfig) ? ({}) : (sprig.dict("source_cluster", fromJSON(inputs.parameters.sourceConfig))))), sprig.merge((('' == inputs.parameters.targetConfig) ? ({}) : (sprig.dict("target_cluster", fromJSON(inputs.parameters.targetConfig)))), (('' == inputs.parameters.snapshotConfig) ? ({}) : (sprig.dict("snapshot", fromJSON(inputs.parameters.snapshotConfig)))))))",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "container": {
          "args": [
            "
set -e -x

# Save pod name to output path
echo $HOSTNAME > /tmp/podname

echo File contents...
 
base64 -d > /config/migration_services.yaml_ << EOF
{{=toBase64(inputs.parameters.configContents)}}
EOF

cat /config/migration_services.yaml_ | jq 'def normalizeAuthConfig:
  if has("authConfig") then
    if (.authConfig | has("username") and has("password")) then
      .basic_auth = .authConfig
    elif (.authConfig | has("region")) then
      .sigv4_auth = .authConfig
    elif (.authConfig | has("caCert") and has("clientSecretName")) then
      .mtls_auth = .authConfig
    else
      .
    end
    | del(.authConfig)
  else
    .
  end;

def normalizeAllowInsecure:
  if has("allowInsecure") then
    .allow_insecure = .allowInsecure | del(.allowInsecure)
  else
    .
  end;

def normalizeRepoPath:
  if has("repoPath") then
    .repo_uri = .repoPath | del(.repoPath)
  else
    .
  end;

def normalizeSnapshotName:
  if has("snapshotName") then
    .snapshot_name = .snapshotName | del(.snapshotName)
  else
    .
  end;

def normalizeRepoConfig:
  if has("repoConfig") then
    .s3 = .repoConfig | del(.repoConfig)
  else
    .
  end;

# Apply recursively to catch nested objects
def recurseNormalize:
  (normalizeAuthConfig
   | normalizeAllowInsecure
   | normalizeRepoPath
   | normalizeSnapshotName
   | normalizeRepoConfig)
  | with_entries(.value |= (if type=="object" then (.|recurseNormalize) else . end));

. | recurseNormalize
' > /config/migration_services.yaml

. /etc/profile.d/venv.sh
source /.venv/bin/activate

echo file dump
echo ---
cat /config/migration_services.yaml
echo ---

{{inputs.parameters.command}}
",
          ],
          "command": [
            "/bin/sh",
            "-c",
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "configContents",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runmigrationcommand",
        "outputs": {
          "parameters": [],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "configContents",
            },
            {
              "name": "name",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "deployconsolewithconfig",
        "outputs": {
          "parameters": [
            {
              "name": "deploymentName",
              "valueFrom": {
                "path": "{.metadata.name}",
              },
            },
          ],
        },
        "resource": {
          "action": "create",
          "manifest": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"{{inputs.parameters.name}}"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"user-environment"}},"template":{"metadata":{"labels":{"app":"user-environment"}},"spec":{"containers":[{"name":"main","image":"{{inputs.parameters.imageMigrationConsoleLocation}}","imagePullPolicy":"{{inputs.parameters.imageMigrationConsolePullPolicy}}","command":["/bin/sh","-c","set -e -x\\n\\nbase64 -d > /config/migration_services.yaml << EOF\\n[object Object]EOF\\n. /etc/profile.d/venv.sh\\nsource /.venv/bin/activate\\necho file dump\\necho ---\\ncat /config/migration_services.yaml\\necho ---\\n[object Object]"]}]}}}}",
          "setOwnerReference": true,
          "successCondition": "status.availableReplicas > 0",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runconsole",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaInfo",
                    "value": "{{inputs.parameters.kafkaInfo}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "template": "getconsoleconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "command",
                    "value": "{{inputs.parameters.command}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "runConsoleWithConfig",
              "template": "runmigrationcommand",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
            },
            {
              "name": "name",
            },
          ],
        },
        "name": "deployconsole",
        "outputs": {
          "parameters": [
            {
              "name": "deploymentName",
              "valueFrom": {
                "expression": "steps.getConsoleConfig.outputs.parameters.configContents",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaInfo",
                    "value": "{{inputs.parameters.kafkaInfo}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "template": "getconsoleconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "command",
                    "value": "{{inputs.parameters.command}}",
                  },
                  {
                    "name": "name",
                    "value": "{{inputs.parameters.name}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "deployConsoleWithConfig",
              "template": "deployconsolewithconfig",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings replayer 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "replayer",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "numPods",
              "value": "1",
            },
            {
              "name": "targetAwsRegion",
            },
            {
              "name": "targetAwsSigningName",
            },
            {
              "name": "targetCACert",
            },
            {
              "name": "targetClientSecretName",
            },
            {
              "name": "targetInsecure",
            },
            {
              "name": "targetUsername",
            },
            {
              "name": "targetPassword",
            },
            {
              "name": "enabled",
            },
            {
              "name": "speedupFactor",
            },
            {
              "name": "podReplicas",
            },
            {
              "name": "authHeaderOverride",
            },
            {
              "name": "loggingConfigurationOverrideConfigMap",
              "value": "",
            },
            {
              "name": "docTransformerBase64",
              "value": "",
            },
            {
              "name": "otelCollectorEndpoint",
              "value": "http://otel-collector:4317",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
          ],
        },
        "name": "deployreplayer",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "create",
          "manifest": "{"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"{{=''+'-replayer'}}","labels":{"app":"replayer","workflows.argoproj.io/workflow":"{{workflow.name}}"}},"spec":{"replicas":"{{inputs.parameters.podReplicas}}","selector":{"matchLabels":{"app":"replayer"}},"template":{"metadata":{"labels":{"app":"replayer","workflows.argoproj.io/workflow":"{{workflow.name}}"}},"spec":{"containers":[{"name":"replayer","image":"{{inputs.parameters.imageTrafficReplayerLocation}}","imagePullPolicy":"{{inputs.parameters.imageTrafficReplayerPullPolicy}}","env":[{"name":"REPLAYER_NUM_PODS_CMD_LINE_ARG","value":"{{inputs.parameters.numPods}}"},{"name":"REPLAYER_TARGET_AWS_REGION_CMD_LINE_ARG","value":"{{inputs.parameters.targetAwsRegion}}"},{"name":"REPLAYER_TARGET_AWS_SIGNING_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetAwsSigningName}}"},{"name":"REPLAYER_TARGET_CA_CERT_CMD_LINE_ARG","value":"{{inputs.parameters.targetCACert}}"},{"name":"REPLAYER_TARGET_CLIENT_SECRET_NAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetClientSecretName}}"},{"name":"REPLAYER_INSECURE_CMD_LINE_ARG","value":"{{inputs.parameters.targetInsecure}}"},{"name":"REPLAYER_TARGET_USERNAME_CMD_LINE_ARG","value":"{{inputs.parameters.targetUsername}}"},{"name":"REPLAYER_TARGET_PASSWORD_CMD_LINE_ARG","value":"{{inputs.parameters.targetPassword}}"},{"name":"REPLAYER_ENABLED_CMD_LINE_ARG","value":"{{inputs.parameters.enabled}}"},{"name":"REPLAYER_SPEEDUP_FACTOR_CMD_LINE_ARG","value":"{{inputs.parameters.speedupFactor}}"},{"name":"REPLAYER_POD_REPLICAS_CMD_LINE_ARG","value":"{{inputs.parameters.podReplicas}}"},{"name":"REPLAYER_AUTH_HEADER_OVERRIDE_CMD_LINE_ARG","value":"{{inputs.parameters.authHeaderOverride}}"},{"name":"REPLAYER_LOGGING_CONFIGURATION_OVERRIDE_CONFIG_MAP_CMD_LINE_ARG","value":"{{inputs.parameters.loggingConfigurationOverrideConfigMap}}"},{"name":"REPLAYER_DOC_TRANSFORMER_BASE64_CMD_LINE_ARG","value":"{{inputs.parameters.docTransformerBase64}}"},{"name":"REPLAYER_OTEL_COLLECTOR_ENDPOINT_CMD_LINE_ARG","value":"{{inputs.parameters.otelCollectorEndpoint}}"},{"name":"REPLAYER_IMAGE_TRAFFIC_REPLAYER_LOCATION_CMD_LINE_ARG","value":"{{inputs.parameters.imageTrafficReplayerLocation}}"},{"name":"REPLAYER_IMAGE_TRAFFIC_REPLAYER_PULL_POLICY_CMD_LINE_ARG","value":"{{inputs.parameters.imageTrafficReplayerPullPolicy}}"},{"name":"LUCENE_DIR","value":"/tmp"},{"name":"JAVA_OPTS","value":"{{=' ' + \\" \\" + (('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, '')) ? ('-Dlog4j2.configurationFile=/config/logConfiguration') : (''))}}"}],"volumeMounts":[{"name":"log4j-configuration","mountPath":"/config/logConfiguration","readOnly":true}]}],"volumes":[{"name":"log4j-configuration","configMap":{"name":"{{=(('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, '')) ? ('default-logging-configuration') : (inputs.parameters.loggingConfigurationOverrideConfigMap))}}","optional":"{{=!('' == nullCoalesce(inputs.parameters.loggingConfigurationOverrideConfigMap, ''))}}"}}]}}}}",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaTrafficBrokers",
            },
            {
              "name": "kafkaTrafficTopic",
            },
            {
              "name": "kafkaGroupId",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "replayerConfig",
            },
            {
              "name": "numPods",
              "value": "1",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
          ],
        },
        "name": "deployreplayerfromconfig",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "numPods",
                    "value": "{{=sprig.dig('numPods', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.imageTrafficReplayerLocation')}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.imageTrafficReplayerPullPolicy')}}",
                  },
                  {
                    "name": "targetAwsRegion",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetAwsRegion')}}",
                  },
                  {
                    "name": "targetAwsSigningName",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetAwsSigningName')}}",
                  },
                  {
                    "name": "targetCACert",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetCACert')}}",
                  },
                  {
                    "name": "targetClientSecretName",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetClientSecretName')}}",
                  },
                  {
                    "name": "targetInsecure",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetInsecure')}}",
                  },
                  {
                    "name": "targetUsername",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetUsername')}}",
                  },
                  {
                    "name": "targetPassword",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.targetPassword')}}",
                  },
                  {
                    "name": "enabled",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.enabled')}}",
                  },
                  {
                    "name": "speedupFactor",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.speedupFactor')}}",
                  },
                  {
                    "name": "podReplicas",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.podReplicas')}}",
                  },
                  {
                    "name": "authHeaderOverride",
                    "value": "{{=jsonpath(inputs.parameters.replayerConfig, '$.authHeaderOverride')}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "docTransformerBase64",
                    "value": "{{=sprig.dig('docTransformerBase64', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "otelCollectorEndpoint",
                    "value": "{{=sprig.dig('otelCollectorEndpoint', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                ],
              },
              "name": "deployReplayer",
              "template": "deployreplayer",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings setup-kafka 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "setup-kafka",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkaclusterzookeeper",
        "outputs": {
          "parameters": [
            {
              "name": "brokers",
              "valueFrom": {
                "path": "{.status.listeners[?(@.name=='plain')].bootstrapServers}",
              },
            },
          ],
        },
        "resource": {
          "action": "create",
          "manifest": "{"apiVersion":"kafka.strimzi.io/v1beta2","kind":"Kafka","metadata":{"name":"{{inputs.parameters.kafkaName}}"},"spec":{"kafka":{"version":"3.9.0","replicas":1,"listeners":[{"name":"tls","port":9093,"type":"internal","tls":true}],"config":{"offsets.topic.replication.factor":1,"transaction.state.log.replication.factor":1,"transaction.state.log.min.isr":1,"default.replication.factor":1,"min.insync.replicas":1,"inter.broker.protocol.version":"3.9"},"storage":{"type":"ephemeral"}},"zookeeper":{"replicas":3,"storage":{"type":"ephemeral"}},"entityOperator":{"topicOperator":{},"userOperator":{}}}}",
          "setOwnerReference": true,
          "successCondition": "status.listeners",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkanodepool",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "apply",
          "manifest": "{"apiVersion":"kafka.strimzi.io/v1beta2","kind":"KafkaNodePool","metadata":{"name":"dual-role","labels":{"strimzi.io/cluster":"{{inputs.parameters.kafkaName}}"}},"spec":{"replicas":1,"roles":["controller","broker"],"storage":{"type":"jbod","volumes":[{"id":0,"type":"persistent-claim","size":"5Gi","deleteClaim":false,"kraftMetadata":"shared"}]}}}",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkaclusterkraft",
        "outputs": {
          "parameters": [
            {
              "name": "brokers",
              "valueFrom": {
                "path": "{.status.listeners[?(@.name=='plain')].bootstrapServers}",
              },
            },
          ],
        },
        "resource": {
          "action": "apply",
          "manifest": "{"apiVersion":"kafka.strimzi.io/v1beta2","kind":"Kafka","metadata":{"name":"{{inputs.parameters.kafkaName}}","annotations":{"strimzi.io/node-pools":"enabled","strimzi.io/kraft":"enabled"}},"spec":{"kafka":{"version":"3.9.0","metadataVersion":"3.9-IV0","readinessProbe":{"initialDelaySeconds":1,"periodSeconds":2,"timeoutSeconds":2,"failureThreshold":1},"livenessProbe":{"initialDelaySeconds":1,"periodSeconds":2,"timeoutSeconds":2,"failureThreshold":2},"listeners":[{"name":"plain","port":9092,"type":"internal","tls":false},{"name":"tls","port":9093,"type":"internal","tls":true}],"config":{"auto.create.topics.enable":false,"offsets.topic.replication.factor":1,"transaction.state.log.replication.factor":1,"transaction.state.log.min.isr":1,"default.replication.factor":1,"min.insync.replicas":1}},"entityOperator":{"topicOperator":{},"userOperator":{}}}}",
          "setOwnerReference": true,
          "successCondition": "status.listeners",
        },
      },
      {
        "dag": {
          "tasks": [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployPool",
              "template": "deploykafkanodepool",
              "when": "'{{inputs.parameters.useKraft}}'",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployKafkaClusterKraft",
              "template": "deploykafkaclusterkraft",
              "when": "'{{inputs.parameters.useKraft}}'",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployKafkaClusterZookeeper",
              "template": "deploykafkaclusterzookeeper",
              "when": "!('{{inputs.parameters.useKraft}}')",
            },
          ],
        },
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
            {
              "name": "useKraft",
              "value": "true",
            },
          ],
        },
        "name": "clusterdeploy",
        "outputs": {
          "parameters": [
            {
              "name": "kafkaName",
              "valueFrom": {
                "expression": "inputs.parameters.kafkaName",
              },
            },
            {
              "name": "bootstrapServers",
              "valueFrom": {
                "expression": "(('Skipped' == tasks.deployKafkaClusterKraft.status) ? (tasks.deployKafkaClusterZookeeper.outputs.parameters.brokers) : (tasks.deployKafkaClusterKraft.outputs.parameters.brokers))",
              },
            },
          ],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
            {
              "name": "topicName",
            },
            {
              "name": "topicPartitions",
            },
            {
              "name": "topicReplicas",
            },
          ],
        },
        "name": "createkafkatopic",
        "outputs": {
          "parameters": [
            {
              "name": "topicName",
              "valueFrom": {
                "path": "{.status.topicName}",
              },
            },
          ],
        },
        "resource": {
          "action": "apply",
          "manifest": "{"apiVersion":"kafka.strimzi.io/v1beta2","kind":"KafkaTopic","metadata":{"name":"{{inputs.parameters.topicName}}","labels":{"strimzi.io/cluster":"{{inputs.parameters.kafkaName}}"}},"spec":{"partitions":"{{inputs.parameters.topicPartitions}}","replicas":"{{inputs.parameters.topicReplicas}}","config":{"retention.ms":604800000,"segment.bytes":1073741824}}}",
          "setOwnerReference": true,
          "successCondition": "status.topicName",
        },
      },
    ],
  },
}
`;

exports[`test workflow template renderings target-latch-helpers 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "target-latch-helpers",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "container": {
          "args": [
            "#echo "source clusters = $WF_SETUP_SOURCE_CLUSTERS"
#echo "target clusters = $WF_SETUP_TARGET_CLUSTERS"
#echo "sourceMigrationConfigs = $WF_SETUP_SOURCE_MIGRATION_CONFIGS"
#echo "snapshot repo configs = $WF_SETUP_SNAPSHOT_REPO_CONFIGS"

# Function to normalize endpoint for use in etcd keys
# Keeps protocol and port, but normalizes slashes
normalize_endpoint() {
  echo "$1" | base64
}

# Calculate the total number of processors
# Count the total number of migrations across all sources and snapshot configs
PROCESSOR_COUNT=$(echo "$WF_SETUP_SOURCE_CLUSTERS" | jq -r '[.[] | .["snapshot-and-migration-configs"][] | .migrations | length] | add')
echo "Total processor count: $PROCESSOR_COUNT"

echo "$PREFIX" > /tmp/prefix
export ETCDCTL_API=3

# Run etcdctl with configured endpoints and authentication
etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINTS --user $ETCD_USER:$ETCD_PASSWORD"

# Store the workflow prefix in etcd for future reference
$etcdctl_cmd put /$PREFIX/workflow/info/prefix "$PREFIX"
$etcdctl_cmd put /$PREFIX/workflow/info/started "$(date +%s)"

# Initialize target latches
echo "$WF_SETUP_TARGET_CLUSTERS" | jq -c '.[]' | while read -r target_json; do
  TARGET_ENDPOINT=$(echo "$target_json" | jq -r '.endpoint')
  NORMALIZED_TARGET=$(normalize_endpoint "$TARGET_ENDPOINT")

  # Initialize the latch with processor count
  $etcdctl_cmd put /$PREFIX/workflow/targets/$NORMALIZED_TARGET/endpoint "$TARGET_ENDPOINT"
  $etcdctl_cmd put /$PREFIX/workflow/targets/$NORMALIZED_TARGET/latch "$PROCESSOR_COUNT"

  echo "Target $TARGET_ENDPOINT ($NORMALIZED_TARGET) latch initialized with count $PROCESSOR_COUNT"
done

# Output the processor count per target for workflow output
echo "{\\"processor_count\\": $PROCESSOR_COUNT}" > /tmp/processors-per-target

echo "Etcd keys initialized with prefix: $PREFIX"",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [
            {
              "name": "WF_SETUP_PREFIX",
              "value": "{{inputs.parameters.prefix}}",
            },
            {
              "name": "WF_SETUP_ETCD_ENDPOINTS",
              "value": "{{inputs.parameters.etcdEndpoints}}",
            },
            {
              "name": "WF_SETUP_ETCD_PASSWORD",
              "value": "{{inputs.parameters.etcdPassword}}",
            },
            {
              "name": "WF_SETUP_ETCD_USER",
              "value": "{{inputs.parameters.etcdUser}}",
            },
            {
              "name": "WF_SETUP_IMAGE_ETCD_UTILS_LOCATION",
              "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
            },
            {
              "name": "WF_SETUP_IMAGE_ETCD_UTILS_PULL_POLICY",
              "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
            },
            {
              "name": "WF_SETUP_TARGET_CLUSTERS",
              "value": "{{inputs.parameters.targetClusters}}",
            },
            {
              "name": "WF_SETUP_SOURCE_CLUSTERS",
              "value": "{{inputs.parameters.sourceClusters}}",
            },
            {
              "name": "WF_SETUP_SOURCE_MIGRATION_CONFIGS",
              "value": "{{inputs.parameters.sourceMigrationConfigs}}",
            },
          ],
          "image": "{{inputs.parameters.imageEtcdUtilsLocation}}",
          "pullPolicy": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "prefix",
            },
            {
              "name": "etcdEndpoints",
              "value": "{{workflow.parameters.etcdEndpoints}}",
            },
            {
              "name": "etcdPassword",
              "value": "{{workflow.parameters.etcdPassword}}",
            },
            {
              "name": "etcdUser",
              "value": "{{workflow.parameters.etcdUser}}",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
            {
              "name": "targetClusters",
            },
            {
              "name": "sourceClusters",
            },
            {
              "name": "sourceMigrationConfigs",
            },
          ],
        },
        "name": "prepareconfigs",
        "outputs": {
          "parameters": [
            {
              "name": "prefix",
              "valueFrom": {
                "path": "/tmp/prefix",
              },
            },
            {
              "name": "denormalizedConfigArray",
              "valueFrom": {
                "path": "/tmp/denormalizedConfigs",
              },
            },
          ],
        },
      },
      {
        "container": {
          "args": [
            "set -x -e
PROCESSOR_ID="$PROCESSOR_ID"
TARGET_NAME="$TARGET_NAME"
ETCD_ENDPOINT=$ETCD_ENDPOINTS
PREFIX="$WORKFLOW_PREFIX"

normalize_endpoint() {
  echo "$1" | base64
}

NORMALIZED_TARGET=$(normalize_endpoint "$TARGET_NAME")

USERNAME=$ETCD_USER
PASSWORD=$ETCD_PASSWORD
LATCH_KEY_NAME=/$PREFIX/workflow/targets/$NORMALIZED_TARGET/latch

FRIENDLY_NAME="\${NORMALIZED_TARGET}-\${PROCESSOR_ID}"

export ETCDCTL_API=3

# Run etcdctl with configured endpoints
etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINT --user $USERNAME:$PASSWORD"

# Record this processor as finished
$etcdctl_cmd put /$PREFIX/workflow/targets/$NORMALIZED_TARGET/finishedSubFlows/$FRIENDLY_NAME "completed"

execute_transaction() {
local current_value="$1"
local next_value="$2"

echo "LATCH_KEY_NAME=$LATCH_KEY_NAME"
echo "current_value=$current_value"
echo "next_value=$next_value"
echo "etcdctl_cmd=$etcdctl_cmd"

# be very mindful of the empty lines in the file being sent to the transaction command!
$etcdctl_cmd txn  --write-out=json << EOF | jq -e '.succeeded == true'
val("$LATCH_KEY_NAME") = "$current_value"

put $LATCH_KEY_NAME "$next_value"


EOF
}

# Transaction retry loop
while true; do
  CURRENT_COUNT=$($etcdctl_cmd get  $LATCH_KEY_NAME --print-value-only)
  NEW_COUNT=$((CURRENT_COUNT - 1))
  if execute_transaction "$CURRENT_COUNT" "$NEW_COUNT"; then
    echo "Transaction succeeded"
    break
  else
    echo "Transaction failed, retrying..."
    sleep 1
  fi
done

# Default: don't finalize yet
SHOULD_FINALIZE="false"

# Check if latch has reached zero
if [ "$NEW_COUNT" -eq 0 ]; then
  echo "All processors for target $TARGET_NAME have completed" >&2
  SHOULD_FINALIZE="true"
else
  echo "Target $TARGET_NAME still has $NEW_COUNT processors pending" >&2
fi

# Output just the boolean value to stdout for the result
echo $SHOULD_FINALIZE > /tmp/should-finalize
echo $SHOULD_FINALIZE",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [
            {
              "name": "PREFIX",
              "value": "{{inputs.parameters.prefix}}",
            },
            {
              "name": "ETCD_ENDPOINTS",
              "value": "{{inputs.parameters.etcdEndpoints}}",
            },
            {
              "name": "ETCD_PASSWORD",
              "value": "{{inputs.parameters.etcdPassword}}",
            },
            {
              "name": "ETCD_USER",
              "value": "{{inputs.parameters.etcdUser}}",
            },
            {
              "name": "IMAGE_ETCD_UTILS_LOCATION",
              "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
            },
            {
              "name": "IMAGE_ETCD_UTILS_PULL_POLICY",
              "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
            },
            {
              "name": "TARGET_NAME",
              "value": "{{inputs.parameters.targetName}}",
            },
            {
              "name": "PROCESSOR_ID",
              "value": "{{inputs.parameters.processorId}}",
            },
          ],
          "image": "{{inputs.parameters.imageEtcdUtilsLocation}}",
          "pullPolicy": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "prefix",
            },
            {
              "name": "etcdEndpoints",
              "value": "{{workflow.parameters.etcdEndpoints}}",
            },
            {
              "name": "etcdPassword",
              "value": "{{workflow.parameters.etcdPassword}}",
            },
            {
              "name": "etcdUser",
              "value": "{{workflow.parameters.etcdUser}}",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
            {
              "name": "targetName",
            },
            {
              "name": "processorId",
            },
          ],
        },
        "name": "decrementlatch",
        "outputs": {
          "parameters": [
            {
              "name": "shouldFinalize",
              "valueFrom": {
                "path": "/tmp/should-finalize",
              },
            },
          ],
        },
      },
      {
        "container": {
          "args": [
            "export ETCDCTL_API=3
etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINTS --user $ETCD_USER:$ETCD_PASSWORD"

PREFIX="$WORKFLOW_PREFIX"
echo "===== CLEANING UP ETCD KEYS FOR PREFIX $PREFIX ====="

# Record workflow completion time
$etcdctl_cmd put /$PREFIX/workflow/info/completed "$(date +%s)"
STARTED=$($etcdctl_cmd get /$PREFIX/workflow/info/started --print-value-only)
COMPLETED=$(date +%s)
DURATION=$((COMPLETED - STARTED))

echo "Workflow completed in $DURATION seconds"

# Get workflow stats for logging purposes
echo "Workflow completion stats:"

# Keep statistics in a separate key that will persist
STATS_KEY="workflow-stats/runs/$PREFIX"

# Save summarized workflow stats to a persistent key
$etcdctl_cmd put /$STATS_KEY/started "$STARTED"
$etcdctl_cmd put /$STATS_KEY/completed "$COMPLETED"
$etcdctl_cmd put /$STATS_KEY/duration "$DURATION"

# For each target, save its finalized status and completed processors
for TARGET_KEY in $($etcdctl_cmd get /$PREFIX/workflow/targets/ --prefix --keys-only | grep "/latch$" | sort); do
  TARGET_PATH=$(echo "$TARGET_KEY" | sed "s|/$PREFIX/workflow/targets/||" | sed "s|/latch$||")
  TARGET_ENDPOINT=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/endpoint --print-value-only)
  LATCH_VALUE=$($etcdctl_cmd get $TARGET_KEY --print-value-only)

  # Save the target stats
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/endpoint "$TARGET_ENDPOINT"
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/final_latch_value "$LATCH_VALUE"

  # Save the list of completed processor chains
  COMPLETED_PROCESSORS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | wc -l)
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/completed_processors "$COMPLETED_PROCESSORS"

  # Save the list of processor chain names
  PROCESSOR_CHAINS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | sort | tr '\\n' ',' | sed 's/,$//')
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/processor_chains "$PROCESSOR_CHAINS"

  echo "- Target $TARGET_ENDPOINT: Latch=$LATCH_VALUE, Completed Processors=$COMPLETED_PROCESSORS"
done

# Delete all workflow keys for this run (but keep the stats)
echo "Deleting all workflow keys with prefix: /$PREFIX/workflow/"
$etcdctl_cmd del /$PREFIX/workflow/ --prefix

echo "Cleanup complete. Workflow stats preserved under /$STATS_KEY/"",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [
            {
              "name": "PREFIX",
              "value": "{{inputs.parameters.prefix}}",
            },
            {
              "name": "ETCD_ENDPOINTS",
              "value": "{{inputs.parameters.etcdEndpoints}}",
            },
            {
              "name": "ETCD_PASSWORD",
              "value": "{{inputs.parameters.etcdPassword}}",
            },
            {
              "name": "ETCD_USER",
              "value": "{{inputs.parameters.etcdUser}}",
            },
            {
              "name": "IMAGE_ETCD_UTILS_LOCATION",
              "value": "{{inputs.parameters.imageEtcdUtilsLocation}}",
            },
            {
              "name": "IMAGE_ETCD_UTILS_PULL_POLICY",
              "value": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
            },
          ],
          "image": "{{inputs.parameters.imageEtcdUtilsLocation}}",
          "pullPolicy": "{{inputs.parameters.imageEtcdUtilsPullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "prefix",
            },
            {
              "name": "etcdEndpoints",
              "value": "{{workflow.parameters.etcdEndpoints}}",
            },
            {
              "name": "etcdPassword",
              "value": "{{workflow.parameters.etcdPassword}}",
            },
            {
              "name": "etcdUser",
              "value": "{{workflow.parameters.etcdUser}}",
            },
            {
              "name": "imageEtcdUtilsLocation",
            },
            {
              "name": "imageEtcdUtilsPullPolicy",
            },
          ],
        },
        "name": "cleanup",
        "outputs": {
          "parameters": [],
        },
      },
    ],
  },
}
`;
