// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`test workflow template renderings capture-proxy 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "capture-proxy",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "serviceName",
            },
            {
              "name": "port",
            },
          ],
        },
        "name": "deployproxyservice",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "listenerPort",
            },
            {
              "name": "kafkaConnection",
            },
            {
              "name": "kafkaTopic",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
          ],
        },
        "name": "deploycaptureproxy",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings capture-replay 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "capture-replay",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "proxyEndpoint",
            },
          ],
        },
        "name": "idgenerator",
        "outputs": {
          "parameters": [
            {
              "name": "proxyEndpoint",
              "valueFrom": {
                "expression": "inputs.parameters.proxyEndpoint",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "name": "getuserapproval",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "createdBootstrapServers",
            },
            {
              "name": "createdKafkaName",
            },
            {
              "name": "providedKafkaBootstrapServers",
            },
            {
              "name": "providedKafkaK8sName",
            },
          ],
        },
        "name": "getbrokerslist",
        "outputs": {
          "parameters": [
            {
              "name": "kafkaName",
              "valueFrom": {
                "expression": "((0 == len(inputs.parameters.providedKafkaK8sName)) ? (inputs.parameters.createdKafkaName) : (inputs.parameters.providedKafkaK8sName))",
              },
            },
            {
              "name": "bootstrapServers",
              "valueFrom": {
                "expression": "((0 == len(inputs.parameters.providedKafkaBootstrapServers)) ? (inputs.parameters.createdKafkaName) : (inputs.parameters.providedKafkaK8sName))",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "dag": {
          "tasks": [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "proxyEndpoint",
                    "value": "{{='http://'+inputs.parameters.sessionName+':'+inputs.parameters.proxyListenPort}}",
                  },
                ],
              },
              "name": "idGenerator",
              "template": "idgenerator",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{=inputs.parameters.providedKafkaK8sName+'-'+last(split(tasks.idGenerator.id, '-'))}}",
                  },
                ],
              },
              "dependencies": [
                "idGenerator",
              ],
              "name": "kafkaClusterSetup",
              "templateRef": {
                "name": "setup-kafka",
                "template": "clusterdeploy",
              },
              "when": "{{=0 == len(inputs.parameters.providedKafkaBootstrapServers)}}",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "createdBootstrapServers",
                    "value": "{{tasks.kafkaClusterSetup.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "createdKafkaName",
                    "value": "{{tasks.kafkaClusterSetup.outputs.parameters.kafkaName}}",
                  },
                  {
                    "name": "providedKafkaBootstrapServers",
                    "value": "{{inputs.parameters.providedKafkaBootstrapServers}}",
                  },
                  {
                    "name": "providedKafkaK8sName",
                    "value": "{{inputs.parameters.providedKafkaK8sName}}",
                  },
                ],
              },
              "dependencies": [
                "kafkaClusterSetup",
              ],
              "name": "getBrokersList",
              "template": "getbrokerslist",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{tasks.getBrokersList.outputs.parameters.kafkaName}}",
                  },
                  {
                    "name": "topicName",
                    "value": "{{=((inputs.parameters.topicName == '') ? (inputs.parameters.sessionName) : (inputs.parameters.topicName))}}",
                  },
                  {
                    "name": "topicPartitions",
                    "value": "{{inputs.parameters.topicPartitions}}",
                  },
                  {
                    "name": "topicReplicas",
                    "value": "{{inputs.parameters.topicReplicas}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
              ],
              "name": "kafkaTopicSetup",
              "templateRef": {
                "name": "setup-kafka",
                "template": "createkafkatopic",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{inputs.parameters.imageCaptureProxyLocation}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{inputs.parameters.imageCaptureProxyPullPolicy}}",
                  },
                  {
                    "name": "listenerPort",
                    "value": "{{inputs.parameters.proxyListenPort}}",
                  },
                  {
                    "name": "kafkaConnection",
                    "value": "{{tasks.getBrokersList.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "kafkaTopic",
                    "value": "{{tasks.kafkaTopicSetup.outputs.parameters.topicName}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
                "kafkaTopicSetup",
              ],
              "name": "deployCaptureProxy",
              "templateRef": {
                "name": "capture-proxy",
                "template": "deploycaptureproxy",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "serviceName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "port",
                    "value": "{{inputs.parameters.proxyListenPort}}",
                  },
                ],
              },
              "dependencies": [
                "deployCaptureProxy",
              ],
              "name": "proxyService",
              "templateRef": {
                "name": "capture-proxy",
                "template": "deployproxyservice",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "replayerConfig",
                    "value": "{{inputs.parameters.replayerConfig}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "kafkaTrafficBrokers",
                    "value": "{{tasks.getBrokersList.outputs.parameters.bootstrapServers}}",
                  },
                  {
                    "name": "kafkaTrafficTopic",
                    "value": "{{tasks.kafkaTopicSetup.outputs.parameters.topicName}}",
                  },
                  {
                    "name": "kafkaGroupId",
                    "value": "{{tasks.idGenerator.id}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
                "kafkaTopicSetup",
              ],
              "name": "Replayer",
              "templateRef": {
                "name": "replayer",
                "template": "deployreplayerfromconfig",
              },
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "name",
                    "value": "{{='diagnostic-console-'+inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "command",
                    "value": "tail -f /dev/null",
                  },
                  {
                    "name": "kafkaInfo",
                    "value": "{{=toJSON(sprig.dict("broker_endpoints", tasks.getBrokersList.outputs.parameters.bootstrapServers, "standard", ''))}}",
                  },
                ],
              },
              "dependencies": [
                "getBrokersList",
              ],
              "name": "runMigrationConsole",
              "templateRef": {
                "name": "migration-console",
                "template": "deployconsole",
              },
            },
          ],
        },
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "proxyDestination",
            },
            {
              "name": "proxyListenPort",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "replayerConfig",
            },
            {
              "name": "providedKafkaBootstrapServers",
              "value": "",
            },
            {
              "name": "providedKafkaK8sName",
              "value": "",
            },
            {
              "name": "kafkaPrefix",
              "value": "capturetraffic",
            },
            {
              "name": "topicName",
              "value": "",
            },
            {
              "name": "topicPartitions",
              "value": "0",
            },
            {
              "name": "topicReplicas",
              "value": "0",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
          ],
        },
        "name": "runall",
        "outputs": {
          "parameters": [],
        },
      },
    ],
  },
}
`;

exports[`test workflow template renderings create-or-get-snapshot 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "create-or-get-snapshot",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "autocreateSnapshotName",
            },
            {
              "name": "indices",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "alreadyDefinedName",
              "value": "{{=sprig.dig('snapshotName', '', fromJSON(inputs.parameters.snapshotConfig))}}",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "createorgetsnapshot",
        "outputs": {
          "parameters": [
            {
              "name": "snapshotConfig",
              "valueFrom": {
                "expression": "((steps.createSnapshot.status == 'Skipped') ? (inputs.parameters.snapshotConfig) : (steps.createSnapshot.outputs.parameters.snapshotConfig))",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{=toJSON(sprig.dict("repoConfig", jsonpath(inputs.parameters.snapshotConfig, '$.repoConfig'), "snapshotName", lower(inputs.parameters.autocreateSnapshotName)))}}",
                  },
                  {
                    "name": "indices",
                    "value": "{{inputs.parameters.indices}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                ],
              },
              "name": "createSnapshot",
              "templateRef": {
                "name": "create-snapshot",
                "template": "snapshotworkflow",
              },
              "when": "'{{inputs.parameters.alreadyDefinedName}}' == ''",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings create-snapshot 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "create-snapshot",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "configContents",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "checksnapshotstatus",
        "outputs": {
          "parameters": [],
        },
        "retryStrategy": {
          "backoff": {
            "cap": "300",
            "duration": "5",
            "factor": "2",
          },
          "limit": "200",
          "retryPolicy": "Always",
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "configContents",
                    "value": "{{inputs.parameters.configContents}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "command",
                    "value": "set -e && [ "$(console --config-file=/config/migration_services.yaml snapshot status)" = "SUCCESS" ] && exit 0 || exit 1",
                  },
                ],
              },
              "name": "checkSnapshotCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "indices",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "snapshotworkflow",
        "outputs": {
          "parameters": [
            {
              "name": "snapshotConfig",
              "valueFrom": {
                "expression": "inputs.parameters.snapshotConfig",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "templateRef": {
                "name": "migration-console",
                "template": "getconsoleconfig",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                  {
                    "name": "command",
                    "value": "set -e && 
console --config-file=/config/migration_services.yaml -v snapshot delete --acknowledge-risk ;
console --config-file=/config/migration_services.yaml -v snapshot create
",
                  },
                ],
              },
              "name": "createSnapshot",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "checkSnapshotStatus",
              "template": "checksnapshotstatus",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings document-bulk-load 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "document-bulk-load",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "name",
            },
          ],
        },
        "name": "deletereplicaset",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "delete",
          "flags": [
            "--ignore-not-found",
          ],
          "manifest": "apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: "{{='bulk-loader-'+inputs.parameters.name}}"
",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "configContents",
            },
            {
              "name": "sessionName",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "waitforcompletion",
        "outputs": {
          "parameters": [],
        },
        "retryStrategy": {
          "backoff": {
            "cap": "300",
            "duration": "5",
            "factor": "2",
          },
          "limit": "200",
          "retryPolicy": "Always",
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "configContents",
                    "value": "{{inputs.parameters.configContents}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "command",
                    "value": "
set -e && 
python -c '
import sys
from lib.console_link.console_link.environment import Environment
from lib.console_link.console_link.models.backfill_rfs import get_detailed_status_obj
from lib.console_link.console_link.models.backfill_rfs import all_shards_finished_processing

status = get_detailed_status_obj(Environment(config_file="/config/migration_services.yaml").target_cluster,
                                 True,
                                 "{{inputs.parameters.sessionName}}")
print(status)
all_finished = all_shards_finished_processing(Environment(config_file="/config/migration_services.yaml").target_cluster,
                                              "{{inputs.parameters.sessionName}}")
sys.exit(0 if all_finished else 1)'",
                  },
                ],
              },
              "name": "checkRfsCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "runmigrationcommand",
              },
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "rfsJsonConfig",
            },
            {
              "name": "podReplicas",
            },
            {
              "name": "loggingConfigurationOverrideConfigMap",
            },
            {
              "description": "Only used for local testing",
              "name": "useLocalStack",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
          ],
        },
        "name": "createreplicaset",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "create",
          "manifest": "apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: "{{=inputs.parameters.sessionName+'-reindex-from-snapshot'}}"
  labels:
    workflows.argoproj.io/workflow: "{{workflow.name}}"
spec:
  replicas: {{=fromJSON(inputs.parameters.podReplicas)}}
  selector:
    matchLabels:
      app: bulk-loader
  template:
    metadata:
      labels:
        app: bulk-loader
        workflows.argoproj.io/workflow: "{{workflow.name}}"
    spec:
      serviceAccountName: argo-workflow-executor
      containers:
        - name: bulk-loader
          image: "{{inputs.parameters.imageReindexFromSnapshotLocation}}"
          imagePullPolicy: "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}"
          command:
            - /rfs-app/runJavaWithClasspath.sh
          args:
            - org.opensearch.migrations.RfsMigrateDocuments
            - ---INLINE-JSON
            - "{{=toBase64(inputs.parameters.rfsJsonConfig)}}"
          env:
            - name: LUCENE_DIR
              value: /tmp
            - name: JAVA_OPTS
              value: "{{=' ' + ' ' + ((!(0 == len(inputs.parameters.loggingConfigurationOverrideConfigMap))) ? ('-Dlog4j2.configurationFile=/config/logConfiguration') : (''))}}"
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: "{{=((fromJSON(inputs.parameters.useLocalStack)) ? ('/config/credentials') : (''))}}"
          volumeMounts:
            - name: log4j-configuration
              mountPath: /config/logConfiguration
              readOnly: true
            - name: localstack-test-creds
              mountPath: /config/credentials
              readOnly: true
      volumes:
        - name: log4j-configuration
          configMap:
            name: "{{=((0 == len(inputs.parameters.loggingConfigurationOverrideConfigMap)) ? ('default-logging-configuration') : (inputs.parameters.loggingConfigurationOverrideConfigMap))}}"
            optional: {{=!(!(0 == len(inputs.parameters.loggingConfigurationOverrideConfigMap)))}}
        - name: localstack-test-creds
          configMap:
            name: localstack-test-creds
            optional: {{=!(fromJSON(inputs.parameters.useLocalStack))}}
",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sessionName",
            },
            {
              "name": "sourceVersion",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "documentBackfillConfig",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
          ],
        },
        "name": "createreplicasetfromconfig",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "podReplicas",
                    "value": "{{=sprig.dig('podReplicas', 1, fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.documentBackfillConfig))}}",
                  },
                  {
                    "name": "useLocalStack",
                    "value": "{{=sprig.dig('repoConfig', 'useLocalStack', false, fromJSON(inputs.parameters.snapshotConfig))}}",
                  },
                  {
                    "name": "rfsJsonConfig",
                    "value": "{{=toJSON(sprig.merge(sprig.merge(sprig.merge((('authConfig' in fromJSON(inputs.parameters.targetConfig)) ? ((('basic' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetUsername", fromJSON(inputs.parameters.targetConfig)['authConfig']['basic']['username'], "targetPassword", fromJSON(inputs.parameters.targetConfig)['authConfig']['basic']['password'])) : ((('sigv4' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetAwsServiceSigningName", fromJSON(inputs.parameters.targetConfig)['authConfig']['sigv4']['service'], "targetAwsRegion", fromJSON(inputs.parameters.targetConfig)['authConfig']['sigv4']['region'])) : ((('mtls' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetCaCert", fromJSON(inputs.parameters.targetConfig)['authConfig']['mtls']['caCert'])) : ({}))))))) : ({})), sprig.dict("targetHost", jsonpath(inputs.parameters.targetConfig, '$.endpoint'), "targetInsecure", sprig.dig('allowInsecure', false, fromJSON(inputs.parameters.targetConfig)))), sprig.omit(fromJSON(inputs.parameters.documentBackfillConfig), 'loggingConfigurationOverrideConfigMap', 'podReplicas')), sprig.merge(sprig.dict("snapshotName", fromJSON(inputs.parameters.snapshotConfig)['snapshotName'], "sourceVersion", inputs.parameters.sourceVersion, "sessionName", inputs.parameters.sessionName, "luceneDir", '/tmp'), sprig.dict("s3Endpoint", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['endpoint'], "s3RepoUri", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['s3RepoPathUri'], "s3Region", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['aws_region'], "s3LocalDir", '/tmp'))))}}",
                  },
                ],
              },
              "name": "createReplicaset",
              "template": "createreplicaset",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceVersion",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "sessionName",
            },
            {
              "name": "indices",
              "value": "[]",
            },
            {
              "name": "documentBackfillConfig",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runbulkload",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "sourceVersion",
                    "value": "{{inputs.parameters.sourceVersion}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "documentBackfillConfig",
                    "value": "{{inputs.parameters.documentBackfillConfig}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                ],
              },
              "name": "createReplicasetFromConfig",
              "template": "createreplicasetfromconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "setupWaitForCompletion",
              "templateRef": {
                "name": "migration-console",
                "template": "getconsoleconfig",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sessionName",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.setupWaitForCompletion.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "waitForCompletion",
              "template": "waitforcompletion",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "name",
                    "value": "{{inputs.parameters.sessionName}}",
                  },
                ],
              },
              "name": "deleteReplicaSet",
              "template": "deletereplicaset",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings full-migration 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "full-migration",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": "main",
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [],
        },
        "name": "donothing",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [],
        ],
      },
      {
        "container": {
          "args": [
            "echo runReplayerForTarget",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "targetConfig",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runreplayerfortarget",
        "outputs": {
          "parameters": [],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "metadataMigrationConfig",
              "value": "",
            },
            {
              "name": "documentBackfillConfig",
              "value": "",
            },
            {
              "description": "Workflow session nonce",
              "name": "latchCoordinationPrefix",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "foreachsnapshotmigration",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "idGenerator",
              "template": "donothing",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{inputs.parameters.metadataMigrationConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                ],
              },
              "name": "metadataMigrate",
              "templateRef": {
                "name": "metadata-migration",
                "template": "migratemetadata",
              },
              "when": "{{=!(0 == len(inputs.parameters.metadataMigrationConfig))}}",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "documentBackfillConfig",
                    "value": "{{inputs.parameters.documentBackfillConfig}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "sessionName",
                    "value": "{{steps.idGenerator.id}}",
                  },
                  {
                    "name": "sourceVersion",
                    "value": "{{=jsonpath(inputs.parameters.sourceConfig, '$.version')}}",
                  },
                ],
              },
              "name": "bulkLoadDocuments",
              "templateRef": {
                "name": "document-bulk-load",
                "template": "runbulkload",
              },
              "when": "{{=!(0 == len(inputs.parameters.documentBackfillConfig))}}",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "indices",
              "value": "[]",
            },
            {
              "name": "migrations",
            },
            {
              "name": "snapshotConfig",
            },
            {
              "name": "sourcePipelineName",
              "value": "{{=fromJSON(inputs.parameters.sourceConfig)['name'] + '_' + join(fromJSON(inputs.parameters.indices))}}",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "foreachsnapshotextraction",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "indices",
                    "value": "{{inputs.parameters.indices}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "autocreateSnapshotName",
                    "value": "{{inputs.parameters.sourcePipelineName}}",
                  },
                ],
              },
              "name": "createOrGetSnapshot",
              "templateRef": {
                "name": "create-or-get-snapshot",
                "template": "createorgetsnapshot",
              },
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{inputs.parameters.imageCaptureProxyLocation}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{inputs.parameters.imageCaptureProxyPullPolicy}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{=sprig.dig('metadataMigrationConfig', '', item)}}",
                  },
                  {
                    "name": "documentBackfillConfig",
                    "value": "{{=sprig.dig('documentBackfillConfig', '', item)}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{steps.createOrGetSnapshot.outputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "foreachSnapshotMigration",
              "template": "foreachsnapshotmigration",
              "withParam": "{{inputs.parameters.migrations}}",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "snapshotExtractAndLoadConfigArray",
              "value": "",
            },
            {
              "name": "replayerConfig",
              "value": "",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "name": "imageCaptureProxyLocation",
            },
            {
              "name": "imageCaptureProxyPullPolicy",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
            {
              "name": "imageReindexFromSnapshotLocation",
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "foreachmigrationpair",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{inputs.parameters.imageCaptureProxyLocation}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{inputs.parameters.imageCaptureProxyPullPolicy}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "indices",
                    "value": "{{=sprig.dig('indices', '', item)}}",
                  },
                  {
                    "name": "migrations",
                    "value": "{{=jsonpath(toJSON(item), '$.migrations')}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{=jsonpath(toJSON(item), '$.snapshotConfig')}}",
                  },
                ],
              },
              "name": "foreachSnapshotExtraction",
              "template": "foreachsnapshotextraction",
              "when": "{{=!(0 == len(inputs.parameters.snapshotExtractAndLoadConfigArray))}}",
              "withParam": "{{inputs.parameters.snapshotExtractAndLoadConfigArray}}",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "description": "List of server configurations to direct migrated traffic toward",
              "name": "migrationConfigs",
            },
            {
              "name": "latchCoordinationPrefix",
            },
            {
              "name": "imageCaptureProxyLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageCaptureProxyPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "captureProxyPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "trafficReplayerPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageReindexFromSnapshotPullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "reindexFromSnapshotPullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsoleLocation",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsoleImage",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
            {
              "name": "imageMigrationConsolePullPolicy",
              "valueFrom": {
                "configMapKeyRef": {
                  "key": "migrationConsolePullPolicy",
                  "name": "{{workflow.parameters.imageConfigMapName}}",
                  "optional": undefined,
                },
              },
            },
          ],
        },
        "name": "main",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "latchCoordinationPrefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                  {
                    "name": "imageCaptureProxyLocation",
                    "value": "{{inputs.parameters.imageCaptureProxyLocation}}",
                  },
                  {
                    "name": "imageCaptureProxyPullPolicy",
                    "value": "{{inputs.parameters.imageCaptureProxyPullPolicy}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotLocation",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotLocation}}",
                  },
                  {
                    "name": "imageReindexFromSnapshotPullPolicy",
                    "value": "{{inputs.parameters.imageReindexFromSnapshotPullPolicy}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{=jsonpath(toJSON(item), '$.sourceConfig')}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{=jsonpath(toJSON(item), '$.targetConfig')}}",
                  },
                  {
                    "name": "snapshotExtractAndLoadConfigArray",
                    "value": "{{=sprig.dig('snapshotExtractAndLoadConfigArray', '', item)}}",
                  },
                  {
                    "name": "replayerConfig",
                    "value": "{{=sprig.dig('replayerConfig', '', item)}}",
                  },
                ],
              },
              "name": "foreachMigrationPair",
              "template": "foreachmigrationpair",
              "withParam": "{{inputs.parameters.migrationConfigs}}",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "prefix",
                    "value": "{{inputs.parameters.latchCoordinationPrefix}}",
                  },
                ],
              },
              "name": "cleanup",
              "templateRef": {
                "name": "target-latch-helpers",
                "template": "cleanup",
              },
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings metadata-migration 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "metadata-migration",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "container": {
          "args": [
            "{{inputs.parameters.commandMode}}",
            "---INLINE-JSON",
            "{{=toJSON(sprig.merge(sprig.merge(sprig.merge((('authConfig' in fromJSON(inputs.parameters.targetConfig)) ? ((('basic' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetUsername", fromJSON(inputs.parameters.targetConfig)['authConfig']['basic']['username'], "targetPassword", fromJSON(inputs.parameters.targetConfig)['authConfig']['basic']['password'])) : ((('sigv4' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetAwsServiceSigningName", fromJSON(inputs.parameters.targetConfig)['authConfig']['sigv4']['service'], "targetAwsRegion", fromJSON(inputs.parameters.targetConfig)['authConfig']['sigv4']['region'])) : ((('mtls' in fromJSON(inputs.parameters.targetConfig)['authConfig']) ? (sprig.dict("targetCaCert", fromJSON(inputs.parameters.targetConfig)['authConfig']['mtls']['caCert'])) : ({}))))))) : ({})), sprig.dict("targetHost", jsonpath(inputs.parameters.targetConfig, '$.endpoint'), "targetInsecure", sprig.dig('allowInsecure', false, fromJSON(inputs.parameters.targetConfig)))), sprig.omit(fromJSON(inputs.parameters.metadataMigrationConfig), 'loggingConfigurationOverrideConfigMap')), sprig.merge(sprig.dict("snapshotName", fromJSON(inputs.parameters.snapshotConfig)['snapshotName'], "sourceVersion", fromJSON(inputs.parameters.sourceConfig)['version']), sprig.dict("s3Endpoint", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['endpoint'], "s3RepoUri", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['s3RepoPathUri'], "s3Region", fromJSON(inputs.parameters.snapshotConfig)['repoConfig']['aws_region'], "s3LocalDir", '/tmp'))))}}",
          ],
          "command": [
            "/root/metadataMigration/bin/MetadataMigration",
          ],
          "env": [
            {
              "name": "AWS_SHARED_CREDENTIALS_FILE",
              "value": "{{=((sprig.dig('repoConfig', 'useLocalStack', false, fromJSON(inputs.parameters.snapshotConfig))) ? ('/config/credentials/configuration') : (''))}}",
            },
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
          "volumeMounts": [
            {
              "mountPath": "/config/credentials",
              "name": "test-creds",
              "readOnly": true,
            },
          ],
        },
        "inputs": {
          "parameters": [
            {
              "name": "commandMode",
            },
            {
              "description": "Snapshot storage details (region, endpoint, etc)",
              "name": "snapshotConfig",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "metadataMigrationConfig",
            },
          ],
        },
        "name": "runmetadata",
        "outputs": {
          "parameters": [],
        },
        "volumes": [
          {
            "configMap": {
              "name": "localstack-test-creds",
              "optional": true,
            },
            "name": "test-creds",
          },
        ],
      },
      {
        "name": "approveevaluate",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "name": "approvemigrate",
        "outputs": undefined,
        "suspend": {},
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "metadataMigrationConfig",
            },
            {
              "description": "Snapshot storage details (region, endpoint, etc)",
              "name": "snapshotConfig",
            },
            {
              "name": "sourceConfig",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "migratemetadata",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{inputs.parameters.metadataMigrationConfig}}",
                  },
                  {
                    "name": "commandMode",
                    "value": "evaluate",
                  },
                ],
              },
              "name": "metadataEvaluate",
              "template": "runmetadata",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "approveEvaluate",
              "template": "approveevaluate",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "metadataMigrationConfig",
                    "value": "{{inputs.parameters.metadataMigrationConfig}}",
                  },
                  {
                    "name": "commandMode",
                    "value": "migrate",
                  },
                ],
              },
              "name": "metadataMigrate",
              "template": "runmetadata",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [],
              },
              "name": "approveMigrate",
              "template": "approvemigrate",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings migration-console 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "migration-console",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
              "value": "",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
              "value": "",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
              "value": "",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
              "value": "",
            },
          ],
        },
        "name": "getconsoleconfig",
        "outputs": {
          "parameters": [
            {
              "name": "configContents",
              "valueFrom": {
                "expression": "toJSON(sprig.merge(sprig.merge(((0 == len(inputs.parameters.kafkaInfo)) ? ({}) : (sprig.dict("kafka", fromJSON(inputs.parameters.kafkaInfo)))), ((0 == len(inputs.parameters.sourceConfig)) ? ({}) : (sprig.dict("source_cluster", fromJSON(inputs.parameters.sourceConfig))))), sprig.merge(((0 == len(inputs.parameters.targetConfig)) ? ({}) : (sprig.dict("target_cluster", fromJSON(inputs.parameters.targetConfig)))), ((0 == len(inputs.parameters.snapshotConfig)) ? ({}) : (sprig.dict("snapshot", fromJSON(inputs.parameters.snapshotConfig)))))))",
              },
            },
          ],
        },
        "steps": [
          [],
        ],
      },
      {
        "container": {
          "args": [
            "
set -e -x

# Save pod name to output path
echo $HOSTNAME > /tmp/podname

echo File contents...
 
base64 -d > /config/migration_services.yaml_ << EOF
{{=toBase64(inputs.parameters.configContents)}}
EOF

cat /config/migration_services.yaml_ | 
jq 'def normalizeAuthConfig:
  if has("authConfig") then
    if (.authConfig | has("basic")) then
      .basic_auth = .authConfig.basic
    elif (.authConfig | has("sigv4")) then
      .sigv4_auth = .authConfig.sigv4
    elif (.authConfig | has("mtls")) then
      .mtls_auth = .authConfig.mtls
    else
      .
    end
    | del(.authConfig, .name, .proxy, .snapshotRepo)
  else
    .
  end;

def normalizeAllowInsecure:
  if has("allowInsecure") then
    .allow_insecure = .allowInsecure | del(.allowInsecure)
  else
    .
  end;

def normalizeRepoPath:
  if has("s3RepoPathUri") then
    .repo_uri = .s3RepoPathUri | del(.s3RepoPathUri)
  else
    .
  end;

def normalizeSnapshotName:
  if has("snapshotName") then
    .snapshot_name = .snapshotName | del(.snapshotName)
  else
    .
  end;

def normalizeRepoConfig:
  if has("repoConfig") then
    .s3 = .repoConfig | del(.repoConfig)
  else
    .
  end;

def removeUseLocalStack:
  del(.useLocalStack);

# Apply recursively to catch nested objects
def recurseNormalize:
  (normalizeAuthConfig
   | normalizeAllowInsecure
   | normalizeRepoPath
   | normalizeSnapshotName
   | normalizeRepoConfig
   | removeUseLocalStack)
  | with_entries(.value |= (if type=="object" then (.|recurseNormalize) else . end));

. | recurseNormalize
' > /config/migration_services.yaml

. /etc/profile.d/venv.sh
source /.venv/bin/activate

echo file dump
echo ---
cat /config/migration_services.yaml
echo ---

{{inputs.parameters.command}}
",
          ],
          "command": [
            "/bin/sh",
            "-c",
          ],
          "env": [],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "configContents",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runmigrationcommand",
        "outputs": {
          "parameters": [],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "configContents",
            },
            {
              "name": "name",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "deployconsolewithconfig",
        "outputs": {
          "parameters": [
            {
              "name": "deploymentName",
              "valueFrom": {
                "path": "{.metadata.name}",
              },
            },
          ],
        },
        "resource": {
          "action": "create",
          "manifest": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{inputs.parameters.name}}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-environment
  template:
    metadata:
      labels:
        app: user-environment
    spec:
      containers:
        - name: main
          image: "{{inputs.parameters.imageMigrationConsoleLocation}}"
          imagePullPolicy: "{{inputs.parameters.imageMigrationConsolePullPolicy}}"
          command:
            - /bin/sh
            - -c
            - |-
              set -e -x

              base64 -d > /config/migration_services.yaml << EOF
              [object Object]EOF
              . /etc/profile.d/venv.sh
              source /.venv/bin/activate
              echo file dump
              echo ---
              cat /config/migration_services.yaml
              echo ---
              [object Object]
",
          "setOwnerReference": true,
          "successCondition": "status.availableReplicas > 0",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
              "value": "",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
              "value": "",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
              "value": "",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
              "value": "",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "runconsole",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaInfo",
                    "value": "{{inputs.parameters.kafkaInfo}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "template": "getconsoleconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "command",
                    "value": "{{inputs.parameters.command}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "runConsoleWithConfig",
              "template": "runmigrationcommand",
            },
          ],
        ],
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "command",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "kafkaInfo",
              "value": "",
            },
            {
              "description": "Source cluster configuration (JSON)",
              "name": "sourceConfig",
              "value": "",
            },
            {
              "description": "Target cluster configuration (JSON)",
              "name": "targetConfig",
              "value": "",
            },
            {
              "description": "Snapshot configuration information (JSON)",
              "name": "snapshotConfig",
              "value": "",
            },
            {
              "name": "name",
            },
          ],
        },
        "name": "deployconsole",
        "outputs": {
          "parameters": [
            {
              "name": "deploymentName",
              "valueFrom": {
                "expression": "steps.getConsoleConfig.outputs.parameters.configContents",
              },
            },
          ],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaInfo",
                    "value": "{{inputs.parameters.kafkaInfo}}",
                  },
                  {
                    "name": "sourceConfig",
                    "value": "{{inputs.parameters.sourceConfig}}",
                  },
                  {
                    "name": "targetConfig",
                    "value": "{{inputs.parameters.targetConfig}}",
                  },
                  {
                    "name": "snapshotConfig",
                    "value": "{{inputs.parameters.snapshotConfig}}",
                  },
                ],
              },
              "name": "getConsoleConfig",
              "template": "getconsoleconfig",
            },
          ],
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "command",
                    "value": "{{inputs.parameters.command}}",
                  },
                  {
                    "name": "name",
                    "value": "{{inputs.parameters.name}}",
                  },
                  {
                    "name": "imageMigrationConsoleLocation",
                    "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
                  },
                  {
                    "name": "imageMigrationConsolePullPolicy",
                    "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
                  },
                  {
                    "name": "configContents",
                    "value": "{{steps.getConsoleConfig.outputs.parameters.configContents}}",
                  },
                ],
              },
              "name": "deployConsoleWithConfig",
              "template": "deployconsolewithconfig",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings replayer 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "replayer",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "targetAwsRegion",
            },
            {
              "name": "targetAwsSigningName",
            },
            {
              "name": "targetCACert",
            },
            {
              "name": "targetClientSecretName",
            },
            {
              "name": "targetInsecure",
            },
            {
              "name": "targetUsername",
            },
            {
              "name": "targetPassword",
            },
            {
              "name": "speedupFactor",
              "value": "1.1",
            },
            {
              "name": "podReplicas",
              "value": "1",
            },
            {
              "name": "authHeaderOverride",
              "value": "",
            },
            {
              "name": "loggingConfigurationOverrideConfigMap",
              "value": "",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
          ],
        },
        "name": "deployreplayer",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "create",
          "manifest": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{=''+'-replayer'}}"
  labels:
    app: replayer
    workflows.argoproj.io/workflow: "{{workflow.name}}"
spec:
  replicas: "0"
  selector:
    matchLabels:
      app: replayer
  template:
    metadata:
      labels:
        app: replayer
        workflows.argoproj.io/workflow: "{{workflow.name}}"
    spec:
      serviceAccountName: argo-workflow-executor
      containers:
        - name: replayer
          image: "{{inputs.parameters.imageTrafficReplayerLocation}}"
          imagePullPolicy: "{{inputs.parameters.imageTrafficReplayerPullPolicy}}"
          env:
            - name: JCOMMANDER_OPTS
              value: "{{=((0 == len(inputs.parameters.targetAwsRegion)) ? ('') : (' --targetAwsRegion '+inputs.parameters.targetAwsRegion))+((0 == len(inputs.parameters.targetAwsSigningName)) ? ('') : (' --targetAwsSigningName '+inputs.parameters.targetAwsSigningName))+((0 == len(inputs.parameters.targetCACert)) ? ('') : (' --targetCACert '+inputs.parameters.targetCACert))+((0 == len(inputs.parameters.targetClientSecretName)) ? ('') : (' --targetClientSecretName '+inputs.parameters.targetClientSecretName))+((0 == len(inputs.parameters.targetInsecure)) ? ('') : (' --insecure '+inputs.parameters.targetInsecure))+((0 == len(inputs.parameters.targetUsername)) ? ('') : (' --targetUsername '+inputs.parameters.targetUsername))+((0 == len(inputs.parameters.targetPassword)) ? ('') : (' --targetPassword '+inputs.parameters.targetPassword))+((0 == len(inputs.parameters.speedupFactor)) ? ('') : (' --speedupFactor '+inputs.parameters.speedupFactor))+((0 == len(inputs.parameters.podReplicas)) ? ('') : (' --podReplicas '+inputs.parameters.podReplicas))+((0 == len(inputs.parameters.authHeaderOverride)) ? ('') : (' --authHeaderOverride '+inputs.parameters.authHeaderOverride))+((0 == len(inputs.parameters.loggingConfigurationOverrideConfigMap)) ? ('') : (' --loggingConfigurationOverrideConfigMap '+inputs.parameters.loggingConfigurationOverrideConfigMap))+((0 == len(inputs.parameters.imageTrafficReplayerLocation)) ? ('') : (' --imageTrafficReplayerLocation '+inputs.parameters.imageTrafficReplayerLocation))+((0 == len(inputs.parameters.imageTrafficReplayerPullPolicy)) ? ('') : (' --imageTrafficReplayerPullPolicy '+inputs.parameters.imageTrafficReplayerPullPolicy))}}"
            - name: LUCENE_DIR
              value: /tmp
            - name: JAVA_OPTS
              value: "{{=' ' + ' ' + (('' == inputs.parameters.loggingConfigurationOverrideConfigMap) ? ('-Dlog4j2.configurationFile=/config/logConfiguration') : (''))}}"
          volumeMounts:
            - name: log4j-configuration
              mountPath: /config/logConfiguration
              readOnly: true
      volumes:
        - name: log4j-configuration
          configMap:
            name: "{{=((0 == len(inputs.parameters.loggingConfigurationOverrideConfigMap)) ? ('default-logging-configuration') : (inputs.parameters.loggingConfigurationOverrideConfigMap))}}"
            optional: {{=!('' == inputs.parameters.loggingConfigurationOverrideConfigMap)}}
",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaTrafficBrokers",
            },
            {
              "name": "kafkaTrafficTopic",
            },
            {
              "name": "kafkaGroupId",
            },
            {
              "name": "targetConfig",
            },
            {
              "name": "replayerConfig",
            },
            {
              "name": "podReplicas",
              "value": "1",
            },
            {
              "name": "imageTrafficReplayerLocation",
            },
            {
              "name": "imageTrafficReplayerPullPolicy",
            },
          ],
        },
        "name": "deployreplayerfromconfig",
        "outputs": {
          "parameters": [],
        },
        "steps": [
          [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "podReplicas",
                    "value": "{{=sprig.dig('podReplicas', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "imageTrafficReplayerLocation",
                    "value": "{{inputs.parameters.imageTrafficReplayerLocation}}",
                  },
                  {
                    "name": "imageTrafficReplayerPullPolicy",
                    "value": "{{inputs.parameters.imageTrafficReplayerPullPolicy}}",
                  },
                  {
                    "name": "targetAwsRegion",
                    "value": "{{=sprig.dig('authConfig', 'sigv4', 'region', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetAwsSigningName",
                    "value": "{{=sprig.dig('authConfig', 'sigv4', 'service', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetCACert",
                    "value": "{{=sprig.dig('authConfig', 'mtls', 'caCert', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetClientSecretName",
                    "value": "{{=sprig.dig('authConfig', 'mtls', 'clientSecretName', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetInsecure",
                    "value": "{{=sprig.dig('allowInsecure', false, fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetUsername",
                    "value": "{{=sprig.dig('authConfig', 'basic', 'username', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "targetPassword",
                    "value": "{{=sprig.dig('authConfig', 'basic', 'password', '', fromJSON(inputs.parameters.targetConfig))}}",
                  },
                  {
                    "name": "speedupFactor",
                    "value": "{{=sprig.dig('speedupFactor', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "authHeaderOverride",
                    "value": "{{=sprig.dig('authHeaderOverride', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                  {
                    "name": "loggingConfigurationOverrideConfigMap",
                    "value": "{{=sprig.dig('loggingConfigurationOverrideConfigMap', '', fromJSON(inputs.parameters.replayerConfig))}}",
                  },
                ],
              },
              "name": "deployReplayer",
              "template": "deployreplayer",
            },
          ],
        ],
      },
    ],
  },
}
`;

exports[`test workflow template renderings setup-kafka 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "setup-kafka",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkaclusterzookeeper",
        "outputs": {
          "parameters": [
            {
              "name": "brokers",
              "valueFrom": {
                "path": "{.status.listeners[?(@.name=='plain')].bootstrapServers}",
              },
            },
          ],
        },
        "resource": {
          "action": "create",
          "manifest": "apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: "{{inputs.parameters.kafkaName}}"
spec:
  kafka:
    version: 3.9.0
    replicas: 1
    listeners:
      - name: tls
        port: 9093
        type: internal
        tls: true
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.9"
    storage:
      type: ephemeral
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
",
          "setOwnerReference": true,
          "successCondition": "status.listeners",
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkanodepool",
        "outputs": {
          "parameters": [],
        },
        "resource": {
          "action": "apply",
          "manifest": "apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: dual-role
  labels:
    strimzi.io/cluster: "{{inputs.parameters.kafkaName}}"
spec:
  replicas: 1
  roles:
    - controller
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 5Gi
        deleteClaim: false
        kraftMetadata: shared
",
          "setOwnerReference": true,
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
          ],
        },
        "name": "deploykafkaclusterkraft",
        "outputs": {
          "parameters": [
            {
              "name": "brokers",
              "valueFrom": {
                "path": "{.status.listeners[?(@.name=='plain')].bootstrapServers}",
              },
            },
          ],
        },
        "resource": {
          "action": "apply",
          "manifest": "apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: "{{inputs.parameters.kafkaName}}"
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: 3.9.0
    metadataVersion: 3.9-IV0
    readinessProbe:
      initialDelaySeconds: 1
      periodSeconds: 2
      timeoutSeconds: 2
      failureThreshold: 1
    livenessProbe:
      initialDelaySeconds: 1
      periodSeconds: 2
      timeoutSeconds: 2
      failureThreshold: 2
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
    config:
      auto.create.topics.enable: false
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
  entityOperator:
    topicOperator: {}
    userOperator: {}
",
          "setOwnerReference": true,
          "successCondition": "status.listeners",
        },
      },
      {
        "dag": {
          "tasks": [
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployPool",
              "template": "deploykafkanodepool",
              "when": "'{{inputs.parameters.useKraft}}'",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployKafkaClusterKraft",
              "template": "deploykafkaclusterkraft",
              "when": "'{{inputs.parameters.useKraft}}'",
            },
            {
              "arguments": {
                "parameters": [
                  {
                    "name": "kafkaName",
                    "value": "{{inputs.parameters.kafkaName}}",
                  },
                ],
              },
              "name": "deployKafkaClusterZookeeper",
              "template": "deploykafkaclusterzookeeper",
              "when": "!('{{inputs.parameters.useKraft}}')",
            },
          ],
        },
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
            {
              "name": "useKraft",
              "value": "true",
            },
          ],
        },
        "name": "clusterdeploy",
        "outputs": {
          "parameters": [
            {
              "name": "kafkaName",
              "valueFrom": {
                "expression": "inputs.parameters.kafkaName",
              },
            },
            {
              "name": "bootstrapServers",
              "valueFrom": {
                "expression": "(('Skipped' == tasks.deployKafkaClusterKraft.status) ? (tasks.deployKafkaClusterZookeeper.outputs.parameters.brokers) : (tasks.deployKafkaClusterKraft.outputs.parameters.brokers))",
              },
            },
          ],
        },
      },
      {
        "inputs": {
          "parameters": [
            {
              "name": "kafkaName",
            },
            {
              "name": "topicName",
            },
            {
              "name": "topicPartitions",
            },
            {
              "name": "topicReplicas",
            },
          ],
        },
        "name": "createkafkatopic",
        "outputs": {
          "parameters": [
            {
              "name": "topicName",
              "valueFrom": {
                "path": "{.status.topicName}",
              },
            },
          ],
        },
        "resource": {
          "action": "apply",
          "manifest": "apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: "{{inputs.parameters.topicName}}"
  labels:
    strimzi.io/cluster: "{{inputs.parameters.kafkaName}}"
spec:
  partitions: "{{inputs.parameters.topicPartitions}}"
  replicas: "{{inputs.parameters.topicReplicas}}"
  config:
    retention.ms: 604800000
    segment.bytes: 1073741824
",
          "setOwnerReference": true,
          "successCondition": "status.topicName",
        },
      },
    ],
  },
}
`;

exports[`test workflow template renderings target-latch-helpers 1`] = `
{
  "apiVersion": "argoproj.io/v1alpha1",
  "kind": "WorkflowTemplate",
  "metadata": {
    "name": "target-latch-helpers",
  },
  "spec": {
    "arguments": {
      "parameters": [
        {
          "name": "etcdEndpoints",
          "value": "http://etcd.ma.svc.cluster.local:2379",
        },
        {
          "name": "etcdUser",
          "value": "root",
        },
        {
          "name": "etcdPassword",
          "value": "password",
        },
        {
          "name": "s3SnapshotConfigMap",
          "value": "s3-snapshot-config",
        },
        {
          "name": "imageConfigMapName",
          "value": "migration-image-config",
        },
      ],
    },
    "entrypoint": undefined,
    "parallelism": 100,
    "serviceAccountName": "argo-workflow-executor",
    "templates": [
      {
        "container": {
          "args": [
            "set -x -e
PROCESSOR_ID="$PROCESSOR_ID"
TARGET_NAME="$TARGET_NAME"
ETCD_ENDPOINT=$ETCD_ENDPOINTS
PREFIX="$WORKFLOW_PREFIX"

normalize_endpoint() {
  echo "$1" | base64
}

NORMALIZED_TARGET=$(normalize_endpoint "$TARGET_NAME")

USERNAME=$ETCD_USER
PASSWORD=$ETCD_PASSWORD
LATCH_KEY_NAME=/$PREFIX/workflow/targets/$NORMALIZED_TARGET/latch

FRIENDLY_NAME="\${NORMALIZED_TARGET}-\${PROCESSOR_ID}"

export ETCDCTL_API=3

# Run etcdctl with configured endpoints
etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINT --user $USERNAME:$PASSWORD"

# Record this processor as finished
$etcdctl_cmd put /$PREFIX/workflow/targets/$NORMALIZED_TARGET/finishedSubFlows/$FRIENDLY_NAME "completed"

execute_transaction() {
local current_value="$1"
local next_value="$2"

echo "LATCH_KEY_NAME=$LATCH_KEY_NAME"
echo "current_value=$current_value"
echo "next_value=$next_value"
echo "etcdctl_cmd=$etcdctl_cmd"

# be very mindful of the empty lines in the file being sent to the transaction command!
$etcdctl_cmd txn  --write-out=json << EOF | jq -e '.succeeded == true'
val("$LATCH_KEY_NAME") = "$current_value"

put $LATCH_KEY_NAME "$next_value"


EOF
}

# Transaction retry loop
while true; do
  CURRENT_COUNT=$($etcdctl_cmd get  $LATCH_KEY_NAME --print-value-only)
  NEW_COUNT=$((CURRENT_COUNT - 1))
  if execute_transaction "$CURRENT_COUNT" "$NEW_COUNT"; then
    echo "Transaction succeeded"
    break
  else
    echo "Transaction failed, retrying..."
    sleep 1
  fi
done

# Default: don't finalize yet
SHOULD_FINALIZE="false"

# Check if latch has reached zero
if [ "$NEW_COUNT" -eq 0 ]; then
  echo "All processors for target $TARGET_NAME have completed" >&2
  SHOULD_FINALIZE="true"
else
  echo "Target $TARGET_NAME still has $NEW_COUNT processors pending" >&2
fi

# Output just the boolean value to stdout for the result
echo $SHOULD_FINALIZE > /tmp/should-finalize
echo $SHOULD_FINALIZE",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [
            {
              "name": "PREFIX",
              "value": "{{inputs.parameters.prefix}}",
            },
            {
              "name": "ETCD_ENDPOINTS",
              "value": "{{inputs.parameters.etcdEndpoints}}",
            },
            {
              "name": "ETCD_PASSWORD",
              "value": "{{inputs.parameters.etcdPassword}}",
            },
            {
              "name": "ETCD_USER",
              "value": "{{inputs.parameters.etcdUser}}",
            },
            {
              "name": "IMAGE_MIGRATION_CONSOLE_LOCATION",
              "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
            },
            {
              "name": "IMAGE_MIGRATION_CONSOLE_PULL_POLICY",
              "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
            },
            {
              "name": "TARGET_NAME",
              "value": "{{inputs.parameters.targetName}}",
            },
            {
              "name": "PROCESSOR_ID",
              "value": "{{inputs.parameters.processorId}}",
            },
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "prefix",
            },
            {
              "name": "etcdEndpoints",
              "value": "{{workflow.parameters.etcdEndpoints}}",
            },
            {
              "name": "etcdPassword",
              "value": "{{workflow.parameters.etcdPassword}}",
            },
            {
              "name": "etcdUser",
              "value": "{{workflow.parameters.etcdUser}}",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
            {
              "name": "targetName",
            },
            {
              "name": "processorId",
            },
          ],
        },
        "name": "decrementlatch",
        "outputs": {
          "parameters": [
            {
              "name": "shouldFinalize",
              "valueFrom": {
                "path": "/tmp/should-finalize",
              },
            },
          ],
        },
      },
      {
        "container": {
          "args": [
            "export ETCDCTL_API=3
etcdctl_cmd="etcdctl --endpoints=$ETCD_ENDPOINTS --user $ETCD_USER:$ETCD_PASSWORD"

PREFIX="$WORKFLOW_PREFIX"
echo "===== CLEANING UP ETCD KEYS FOR PREFIX $PREFIX ====="

# Record workflow completion time
$etcdctl_cmd put /$PREFIX/workflow/info/completed "$(date +%s)"
STARTED=$($etcdctl_cmd get /$PREFIX/workflow/info/started --print-value-only)
COMPLETED=$(date +%s)
DURATION=$((COMPLETED - STARTED))

echo "Workflow completed in $DURATION seconds"

# Get workflow stats for logging purposes
echo "Workflow completion stats:"

# Keep statistics in a separate key that will persist
STATS_KEY="workflow-stats/runs/$PREFIX"

# Save summarized workflow stats to a persistent key
$etcdctl_cmd put /$STATS_KEY/started "$STARTED"
$etcdctl_cmd put /$STATS_KEY/completed "$COMPLETED"
$etcdctl_cmd put /$STATS_KEY/duration "$DURATION"

# For each target, save its finalized status and completed processors
for TARGET_KEY in $($etcdctl_cmd get /$PREFIX/workflow/targets/ --prefix --keys-only | grep "/latch$" | sort); do
  TARGET_PATH=$(echo "$TARGET_KEY" | sed "s|/$PREFIX/workflow/targets/||" | sed "s|/latch$||")
  TARGET_ENDPOINT=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/endpoint --print-value-only)
  LATCH_VALUE=$($etcdctl_cmd get $TARGET_KEY --print-value-only)

  # Save the target stats
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/endpoint "$TARGET_ENDPOINT"
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/final_latch_value "$LATCH_VALUE"

  # Save the list of completed processor chains
  COMPLETED_PROCESSORS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | wc -l)
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/completed_processors "$COMPLETED_PROCESSORS"

  # Save the list of processor chain names
  PROCESSOR_CHAINS=$($etcdctl_cmd get /$PREFIX/workflow/targets/$TARGET_PATH/finishedSubFlows/ --prefix --keys-only | sort | tr '\\n' ',' | sed 's/,$//')
  $etcdctl_cmd put /$STATS_KEY/targets/$TARGET_PATH/processor_chains "$PROCESSOR_CHAINS"

  echo "- Target $TARGET_ENDPOINT: Latch=$LATCH_VALUE, Completed Processors=$COMPLETED_PROCESSORS"
done

# Delete all workflow keys for this run (but keep the stats)
echo "Deleting all workflow keys with prefix: /$PREFIX/workflow/"
$etcdctl_cmd del /$PREFIX/workflow/ --prefix

echo "Cleanup complete. Workflow stats preserved under /$STATS_KEY/"",
          ],
          "command": [
            "sh",
            "-c",
          ],
          "env": [
            {
              "name": "PREFIX",
              "value": "{{inputs.parameters.prefix}}",
            },
            {
              "name": "ETCD_ENDPOINTS",
              "value": "{{inputs.parameters.etcdEndpoints}}",
            },
            {
              "name": "ETCD_PASSWORD",
              "value": "{{inputs.parameters.etcdPassword}}",
            },
            {
              "name": "ETCD_USER",
              "value": "{{inputs.parameters.etcdUser}}",
            },
            {
              "name": "IMAGE_MIGRATION_CONSOLE_LOCATION",
              "value": "{{inputs.parameters.imageMigrationConsoleLocation}}",
            },
            {
              "name": "IMAGE_MIGRATION_CONSOLE_PULL_POLICY",
              "value": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
            },
          ],
          "image": "{{inputs.parameters.imageMigrationConsoleLocation}}",
          "pullPolicy": "{{inputs.parameters.imageMigrationConsolePullPolicy}}",
        },
        "inputs": {
          "parameters": [
            {
              "name": "prefix",
            },
            {
              "name": "etcdEndpoints",
              "value": "{{workflow.parameters.etcdEndpoints}}",
            },
            {
              "name": "etcdPassword",
              "value": "{{workflow.parameters.etcdPassword}}",
            },
            {
              "name": "etcdUser",
              "value": "{{workflow.parameters.etcdUser}}",
            },
            {
              "name": "imageMigrationConsoleLocation",
            },
            {
              "name": "imageMigrationConsolePullPolicy",
            },
          ],
        },
        "name": "cleanup",
        "outputs": {
          "parameters": [],
        },
      },
    ],
  },
}
`;
