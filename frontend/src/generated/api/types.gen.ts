// This file is auto-generated by @hey-api/openapi-ts

/**
 * AuthModelType
 */
export type AuthModelType = "no_auth" | "basic_auth_arn" | "sig_v4_auth";

/**
 * BackfillOverallStatus
 */
export type BackfillOverallStatus = {
  status: StepStateWithPause;
  /**
   * Percentage Completed
   */
  percentage_completed: number;
  /**
   * Eta Ms
   */
  eta_ms?: number | null;
  /**
   * Started
   * Start time in ISO 8601 format
   */
  started?: Date | null;
  /**
   * Finished
   * Start time in ISO 8601 format
   */
  finished?: Date | null;
  /**
   * Shard Total
   */
  shard_total?: number | null;
  /**
   * Shard Complete
   */
  shard_complete?: number | null;
  /**
   * Shard In Progress
   */
  shard_in_progress?: number | null;
  /**
   * Shard Waiting
   */
  shard_waiting?: number | null;
};

/**
 * BasicAuthArn
 */
export type BasicAuthArn = {
  type?: AuthModelType;
  /**
   * User Secret Arn
   */
  user_secret_arn: string;
};

/**
 * ClusterInfo
 */
export type ClusterInfo = {
  /**
   * Endpoint
   */
  endpoint: string;
  /**
   * Protocol
   */
  protocol: string;
  /**
   * Enable Tls Verification
   */
  enable_tls_verification: boolean;
  /**
   * Auth
   */
  auth: NoAuth | BasicAuthArn | SigV4Auth;
  /**
   * Version Override
   */
  version_override?: string | null;
};

/**
 * FailureInfo
 */
export type FailureInfo = {
  /**
   * Type
   */
  type?: string | null;
  /**
   * Message
   */
  message?: string | null;
  /**
   * Fatal
   */
  fatal?: boolean | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>;
};

/**
 * HealthApiResponse
 */
export type HealthApiResponse = {
  /**
   * Checks
   */
  checks: {
    [key: string]: string;
  };
  status: HealthStatus;
};

/**
 * HealthStatus
 */
export type HealthStatus = "ok" | "error";

/**
 * ItemResult
 */
export type ItemResult = {
  /**
   * Name
   */
  name: string;
  /**
   * Successful
   */
  successful: boolean;
  failure?: FailureInfo | null;
};

/**
 * ItemsInfo
 */
export type ItemsInfo = {
  /**
   * Dryrun
   */
  dryRun: boolean;
  /**
   * Indextemplates
   */
  indexTemplates: Array<ItemResult>;
  /**
   * Componenttemplates
   */
  componentTemplates: Array<ItemResult>;
  /**
   * Indexes
   */
  indexes: Array<ItemResult>;
  /**
   * Aliases
   */
  aliases: Array<ItemResult>;
};

/**
 * MetadataClusterInfo
 */
export type MetadataClusterInfo = {
  /**
   * Type
   */
  type?: string | null;
  /**
   * Version
   */
  version?: string | null;
  /**
   * Uri
   */
  uri?: string | null;
  /**
   * Protocol
   */
  protocol?: string | null;
  /**
   * Insecure
   */
  insecure?: boolean | null;
  /**
   * Awsspecificauthentication
   */
  awsSpecificAuthentication?: boolean | null;
  /**
   * Disablecompression
   */
  disableCompression?: boolean | null;
  /**
   * Localrepository
   */
  localRepository?: string | null;
};

/**
 * MetadataClustersInfo
 */
export type MetadataClustersInfo = {
  source: MetadataClusterInfo;
  target: MetadataClusterInfo;
};

/**
 * MetadataMigrateRequest
 */
export type MetadataMigrateRequest = {
  /**
   * Indexallowlist
   */
  indexAllowlist?: Array<string> | null;
  /**
   * Indextemplateallowlist
   */
  indexTemplateAllowlist?: Array<string> | null;
  /**
   * Componenttemplateallowlist
   */
  componentTemplateAllowlist?: Array<string> | null;
  /**
   * Dryrun
   */
  dryRun?: boolean;
};

/**
 * MetadataStatus
 */
export type MetadataStatus = {
  status?: StepState | null;
  /**
   * Started
   * Start time in ISO 8601 format
   */
  started?: Date | null;
  /**
   * Finished
   * Finish time in ISO 8601 format
   */
  finished?: Date | null;
  /**
   * Dryrun
   */
  dryRun?: boolean | null;
  clusters?: MetadataClustersInfo | null;
  items?: ItemsInfo | null;
  transformations?: TransformationInfo | null;
  /**
   * Errors
   */
  errors?: Array<string> | null;
  /**
   * Errorcount
   */
  errorCount?: number | null;
  /**
   * Errorcode
   */
  errorCode?: number | null;
  /**
   * Errormessage
   */
  errorMessage?: string | null;
};

/**
 * NoAuth
 */
export type NoAuth = {
  type?: AuthModelType;
};

/**
 * Session
 */
export type Session = {
  /**
   * Name
   */
  name: string;
  /**
   * Created
   * Start time in ISO 8601 format
   */
  created: Date;
  /**
   * Updated
   * Start time in ISO 8601 format
   */
  updated: Date;
  /**
   * Env
   */
  env: {
    [key: string]: unknown;
  };
};

/**
 * SessionBase
 */
export type SessionBase = {
  /**
   * Name
   */
  name: string;
};

/**
 * SessionDeleteResponse
 */
export type SessionDeleteResponse = {
  /**
   * Detail
   */
  detail: string;
};

/**
 * SigV4Auth
 */
export type SigV4Auth = {
  type?: AuthModelType;
  /**
   * Region
   */
  region: string;
  /**
   * Service
   */
  service: string;
};

/**
 * SnapshotStatus
 */
export type SnapshotStatus = {
  status: StepState;
  /**
   * Percentage Completed
   */
  percentage_completed: number;
  /**
   * Eta Ms
   */
  eta_ms?: number | null;
  /**
   * Started
   * Start time in ISO 8601 format
   */
  started?: Date | null;
  /**
   * Finished
   * Start time in ISO 8601 format
   */
  finished?: Date | null;
  /**
   * Data Total Bytes
   */
  data_total_bytes?: number | null;
  /**
   * Data Processed Bytes
   */
  data_processed_bytes?: number | null;
  /**
   * Data Throughput Bytes Avg Sec
   */
  data_throughput_bytes_avg_sec?: number | null;
  /**
   * Shard Total
   */
  shard_total?: number | null;
  /**
   * Shard Complete
   */
  shard_complete?: number | null;
};

/**
 * StepState
 */
export type StepState = "Pending" | "Running" | "Completed" | "Failed";

/**
 * StepStateWithPause
 */
export type StepStateWithPause =
  | "Pending"
  | "Running"
  | "Paused"
  | "Completed"
  | "Failed";

/**
 * TransformationInfo
 */
export type TransformationInfo = {
  /**
   * Transformers
   */
  transformers: Array<{
    [key: string]: unknown;
  }>;
};

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>;
  /**
   * Message
   */
  msg: string;
  /**
   * Error Type
   */
  type: string;
};

/**
 * VersionApiResponse
 */
export type VersionApiResponse = {
  /**
   * Version
   */
  version: string;
};

export type SystemHealthData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/system/health";
};

export type SystemHealthResponses = {
  /**
   * Successful Response
   */
  200: HealthApiResponse;
};

export type SystemHealthResponse =
  SystemHealthResponses[keyof SystemHealthResponses];

export type VersionSystemVersionGetData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/system/version";
};

export type VersionSystemVersionGetResponses = {
  /**
   * Successful Response
   */
  200: VersionApiResponse;
};

export type VersionSystemVersionGetResponse =
  VersionSystemVersionGetResponses[keyof VersionSystemVersionGetResponses];

export type SessionsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/sessions/";
};

export type SessionsListResponses = {
  /**
   * Response Sessionslist
   * Successful Response
   */
  200: Array<Session>;
};

export type SessionsListResponse =
  SessionsListResponses[keyof SessionsListResponses];

export type SessionCreateData = {
  body: SessionBase;
  path?: never;
  query?: never;
  url: "/sessions/";
};

export type SessionCreateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SessionCreateError = SessionCreateErrors[keyof SessionCreateErrors];

export type SessionCreateResponses = {
  /**
   * Successful Response
   */
  201: Session;
};

export type SessionCreateResponse =
  SessionCreateResponses[keyof SessionCreateResponses];

export type SessionDeleteData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}";
};

export type SessionDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SessionDeleteError = SessionDeleteErrors[keyof SessionDeleteErrors];

export type SessionDeleteResponses = {
  /**
   * Successful Response
   */
  200: SessionDeleteResponse;
};

export type SessionDeleteResponse2 =
  SessionDeleteResponses[keyof SessionDeleteResponses];

export type SessionGetData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}";
};

export type SessionGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SessionGetError = SessionGetErrors[keyof SessionGetErrors];

export type SessionGetResponses = {
  /**
   * Successful Response
   */
  200: Session;
};

export type SessionGetResponse = SessionGetResponses[keyof SessionGetResponses];

export type SessionUpdateData = {
  /**
   * Data
   */
  body: {
    [key: string]: unknown;
  };
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}";
};

export type SessionUpdateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SessionUpdateError = SessionUpdateErrors[keyof SessionUpdateErrors];

export type SessionUpdateResponses = {
  /**
   * Successful Response
   */
  200: Session;
};

export type SessionUpdateResponse =
  SessionUpdateResponses[keyof SessionUpdateResponses];

export type SnapshotStatusData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/snapshot/status";
};

export type SnapshotStatusErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type SnapshotStatusError =
  SnapshotStatusErrors[keyof SnapshotStatusErrors];

export type SnapshotStatusResponses = {
  /**
   * Successful Response
   */
  200: SnapshotStatus;
};

export type SnapshotStatusResponse =
  SnapshotStatusResponses[keyof SnapshotStatusResponses];

export type MetadataMigrateData = {
  body: MetadataMigrateRequest;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/metadata/migrate";
};

export type MetadataMigrateErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetadataMigrateError =
  MetadataMigrateErrors[keyof MetadataMigrateErrors];

export type MetadataMigrateResponses = {
  /**
   * Successful Response
   */
  200: MetadataStatus;
};

export type MetadataMigrateResponse =
  MetadataMigrateResponses[keyof MetadataMigrateResponses];

export type MetadataStatusData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/metadata/status";
};

export type MetadataStatusErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type MetadataStatusError =
  MetadataStatusErrors[keyof MetadataStatusErrors];

export type MetadataStatusResponses = {
  /**
   * Successful Response
   */
  200: MetadataStatus;
};

export type MetadataStatusResponse =
  MetadataStatusResponses[keyof MetadataStatusResponses];

export type BackfillStatusData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/backfill/status";
};

export type BackfillStatusErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type BackfillStatusError =
  BackfillStatusErrors[keyof BackfillStatusErrors];

export type BackfillStatusResponses = {
  /**
   * Successful Response
   */
  200: BackfillOverallStatus;
};

export type BackfillStatusResponse =
  BackfillStatusResponses[keyof BackfillStatusResponses];

export type ClusterSourceData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/clusters/source";
};

export type ClusterSourceErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ClusterSourceError = ClusterSourceErrors[keyof ClusterSourceErrors];

export type ClusterSourceResponses = {
  /**
   * Successful Response
   */
  200: ClusterInfo;
};

export type ClusterSourceResponse =
  ClusterSourceResponses[keyof ClusterSourceResponses];

export type ClusterTargetData = {
  body?: never;
  path: {
    /**
     * Session Name
     */
    session_name: string;
  };
  query?: never;
  url: "/sessions/{session_name}/clusters/target";
};

export type ClusterTargetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type ClusterTargetError = ClusterTargetErrors[keyof ClusterTargetErrors];

export type ClusterTargetResponses = {
  /**
   * Successful Response
   */
  200: ClusterInfo;
};

export type ClusterTargetResponse =
  ClusterTargetResponses[keyof ClusterTargetResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
