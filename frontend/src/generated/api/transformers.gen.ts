// This file is auto-generated by @hey-api/openapi-ts

import type {
  SessionsListResponse,
  SessionCreateResponse,
  SessionGetResponse,
  SessionUpdateResponse,
  SnapshotStatusResponse,
  MetadataMigrateResponse,
  MetadataStatusResponse,
} from "./types.gen";

const sessionSchemaResponseTransformer = (data: any) => {
  data.created = new Date(data.created);
  data.updated = new Date(data.updated);
  return data;
};

export const sessionsListResponseTransformer = async (
  data: any,
): Promise<SessionsListResponse> => {
  data = data.map((item: any) => {
    return sessionSchemaResponseTransformer(item);
  });
  return data;
};

export const sessionCreateResponseTransformer = async (
  data: any,
): Promise<SessionCreateResponse> => {
  data = sessionSchemaResponseTransformer(data);
  return data;
};

export const sessionGetResponseTransformer = async (
  data: any,
): Promise<SessionGetResponse> => {
  data = sessionSchemaResponseTransformer(data);
  return data;
};

export const sessionUpdateResponseTransformer = async (
  data: any,
): Promise<SessionUpdateResponse> => {
  data = sessionSchemaResponseTransformer(data);
  return data;
};

const snapshotStatusSchemaResponseTransformer = (data: any) => {
  if (data.started) {
    data.started = new Date(data.started);
  }
  if (data.finished) {
    data.finished = new Date(data.finished);
  }
  return data;
};

export const snapshotStatusResponseTransformer = async (
  data: any,
): Promise<SnapshotStatusResponse> => {
  data = snapshotStatusSchemaResponseTransformer(data);
  return data;
};

const metadataStatusSchemaResponseTransformer = (data: any) => {
  if (data.started) {
    data.started = new Date(data.started);
  }
  if (data.finished) {
    data.finished = new Date(data.finished);
  }
  return data;
};

export const metadataMigrateResponseTransformer = async (
  data: any,
): Promise<MetadataMigrateResponse> => {
  data = metadataStatusSchemaResponseTransformer(data);
  return data;
};

export const metadataStatusResponseTransformer = async (
  data: any,
): Promise<MetadataStatusResponse> => {
  data = metadataStatusSchemaResponseTransformer(data);
  return data;
};
