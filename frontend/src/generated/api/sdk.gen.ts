// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  SystemHealthData,
  SystemHealthResponses,
  VersionSystemVersionGetData,
  VersionSystemVersionGetResponses,
  SessionsListData,
  SessionsListResponses,
  SessionCreateData,
  SessionCreateResponses,
  SessionCreateErrors,
  SessionDeleteData,
  SessionDeleteResponses,
  SessionDeleteErrors,
  SessionGetData,
  SessionGetResponses,
  SessionGetErrors,
  SessionUpdateData,
  SessionUpdateResponses,
  SessionUpdateErrors,
  SnapshotStatusData,
  SnapshotStatusResponses,
  SnapshotStatusErrors,
  MetadataMigrateData,
  MetadataMigrateResponses,
  MetadataMigrateErrors,
  MetadataStatusData,
  MetadataStatusResponses,
  MetadataStatusErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";
import {
  sessionsListResponseTransformer,
  sessionCreateResponseTransformer,
  sessionGetResponseTransformer,
  sessionUpdateResponseTransformer,
  snapshotStatusResponseTransformer,
  metadataMigrateResponseTransformer,
  metadataStatusResponseTransformer,
} from "./transformers.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Health
 */
export const systemHealth = <ThrowOnError extends boolean = false>(
  options?: Options<SystemHealthData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SystemHealthResponses,
    unknown,
    ThrowOnError
  >({
    url: "/system/health",
    ...options,
  });
};

/**
 * Version
 */
export const versionSystemVersionGet = <ThrowOnError extends boolean = false>(
  options?: Options<VersionSystemVersionGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    VersionSystemVersionGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/system/version",
    ...options,
  });
};

/**
 * List Sessions
 */
export const sessionsList = <ThrowOnError extends boolean = false>(
  options?: Options<SessionsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    SessionsListResponses,
    unknown,
    ThrowOnError
  >({
    responseTransformer: sessionsListResponseTransformer,
    url: "/sessions/",
    ...options,
  });
};

/**
 * Create Session
 */
export const sessionCreate = <ThrowOnError extends boolean = false>(
  options: Options<SessionCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    SessionCreateResponses,
    SessionCreateErrors,
    ThrowOnError
  >({
    responseTransformer: sessionCreateResponseTransformer,
    url: "/sessions/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete Session
 */
export const sessionDelete = <ThrowOnError extends boolean = false>(
  options: Options<SessionDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    SessionDeleteResponses,
    SessionDeleteErrors,
    ThrowOnError
  >({
    url: "/sessions/{session_name}",
    ...options,
  });
};

/**
 * Single Session
 */
export const sessionGet = <ThrowOnError extends boolean = false>(
  options: Options<SessionGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SessionGetResponses,
    SessionGetErrors,
    ThrowOnError
  >({
    responseTransformer: sessionGetResponseTransformer,
    url: "/sessions/{session_name}",
    ...options,
  });
};

/**
 * Update Session
 */
export const sessionUpdate = <ThrowOnError extends boolean = false>(
  options: Options<SessionUpdateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    SessionUpdateResponses,
    SessionUpdateErrors,
    ThrowOnError
  >({
    responseTransformer: sessionUpdateResponseTransformer,
    url: "/sessions/{session_name}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Snapshot Status
 */
export const snapshotStatus = <ThrowOnError extends boolean = false>(
  options: Options<SnapshotStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    SnapshotStatusResponses,
    SnapshotStatusErrors,
    ThrowOnError
  >({
    responseTransformer: snapshotStatusResponseTransformer,
    url: "/sessions/{session_name}/snapshot/status",
    ...options,
  });
};

/**
 * Migrate Metadata
 * Migrate metadata for the given session.
 * If dry_run=True, only evaluates the migration without making changes.
 */
export const metadataMigrate = <ThrowOnError extends boolean = false>(
  options: Options<MetadataMigrateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    MetadataMigrateResponses,
    MetadataMigrateErrors,
    ThrowOnError
  >({
    responseTransformer: metadataMigrateResponseTransformer,
    url: "/sessions/{session_name}/metadata/migrate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Metadata Status
 * Get the status of the most recent metadata operation for the session.
 */
export const metadataStatus = <ThrowOnError extends boolean = false>(
  options: Options<MetadataStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    MetadataStatusResponses,
    MetadataStatusErrors,
    ThrowOnError
  >({
    responseTransformer: metadataStatusResponseTransformer,
    url: "/sessions/{session_name}/metadata/status",
    ...options,
  });
};
