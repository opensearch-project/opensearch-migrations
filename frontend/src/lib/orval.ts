/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Migration Assistant API
 * OpenAPI spec version: 0.0.1
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  HealthStatus
} from './orval/models';
import type {
  HealthApiResponse
} from './orval/models';

/**
 * @summary Health
 */
export const healthSystemHealthGet = <TData = AxiosResponse<HealthApiResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/system/health`,options
    );
  }

export type HealthSystemHealthGetResult = AxiosResponse<HealthApiResponse>


export const getHealthSystemHealthGetResponseMock = (overrideResponse: Partial< HealthApiResponse > = {}): HealthApiResponse => ({checks: {
        [faker.string.alphanumeric(5)]: faker.string.alpha({length: {min: 10, max: 20}})
      }, status: faker.helpers.arrayElement(Object.values(HealthStatus)), ...overrideResponse})


export const getHealthSystemHealthGetMockHandler = (overrideResponse?: HealthApiResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<HealthApiResponse> | HealthApiResponse)) => {
  return http.get('*/system/health', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getHealthSystemHealthGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getMigrationAssistantAPIMock = () => [
  getHealthSystemHealthGetMockHandler()]
