plugins {
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'com.bmuschko.docker-remote-api'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.opensearch.migrations.common.CommonUtils

node {
    version = '20.12.2'
    npmVersion = '10.5.0'
    download = true
}

def buildInputs = [
    'package.json',
    'package-lock.json',
    'next-config.ts',
    'postcss.config.mjs',
    'tailwind.config.ts',
    'tsconfig.json',
    'src/**',
    'public/**'
]

def buildExclusions = [
    '.gradle',
    '.next',
    'node_modules',
]

def buildOutputs = [
    'out'
]

// Register copy version file task
CommonUtils.copyVersionFileToDockerStaging(project, "frontend", "build/")

def backendApiProject = project(':console_link')
tasks.register('syncBackendClientDefinition', Sync) {
    dependsOn backendApiProject.tasks.named('generateOpenApiSpec')
    from backendApiProject.layout.buildDirectory.file('openapi.json')
    into layout.buildDirectory.dir('openapi')

    outputs.file(layout.buildDirectory.file('openapi/openapi.json'))
}

tasks.register('generateBackendClient', NpmTask) {
    dependsOn 'npmInstall'
    dependsOn 'syncBackendClientDefinition'
    dependsOn 'copyVersionFile_frontend'
    group = 'build'
    description = 'Generates the TypeScript API client from openapi.json'

    args = ['run', 'openapi-ts']
    inputs.file layout.buildDirectory.file('openapi/openapi.json')
    outputs.dir layout.projectDirectory.dir('src/generated')
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn 'npmInstall'
    dependsOn 'generateBackendClient'
    group = 'build'
    args = ['run', 'build']
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
    outputs.files fileTree(dir: '.', include: buildOutputs, exclude: buildExclusions)
}

tasks.register('lintFrontend', NpmTask) {
    dependsOn 'buildFrontend'
    group = 'check'
    args =  ['run', 'lint']
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
}

tasks.register('checkGeneratedFilesTracked', Exec) {
    dependsOn 'buildFrontend'
    group = 'check'
    description = 'Verifies there are no untracked files in src/generated directory'
    workingDir = rootProject.rootDir
   
    standardOutput = System.out
    errorOutput = System.err
    
    commandLine 'bash', '-c', '''
        changed=$(git diff --name-only -- frontend/src/generated/)
        untracked=$(git ls-files --others --exclude-standard -- frontend/src/generated/)
        if [ -n "$changed$untracked" ]; then
            echo "Error: Unstaged or untracked files under frontend/src/generated/:"
            [ -n "$changed" ] && echo "$changed"
            [ -n "$untracked" ] && echo "$untracked"
            echo "Please run ./gradlew frontend:generateBackendClient and commit the updated files"
            exit 1
        else
            echo "OK: No unstaged or untracked files under frontend/src/generated/"
        fi
        '''
}

tasks.register('cleanFrontend', Delete) {
    delete buildOutputs
}

tasks.register('buildDockerImage', DockerBuildImage) {
    dependsOn 'buildFrontend'
    dependsOn 'copyVersionFile_frontend'
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
    outputs.file(imageIdFile)

    def name = "website"
    def hash = CommonUtils.calculateDockerHash(project.fileTree("Dockerfile"))
    inputDir = project.file('.')

    images.add("migrations/${name}:${hash}".toString())
    images.add("migrations/${name}:${version}".toString())
    images.add("migrations/${name}:latest".toString())
}

tasks.register('helpFrontend', NpmTask) {
    args =  ['run']
    doFirst {
        println """
Use `npm` locally for detailed work in this project, gradle tasks are used for continuous integration testing and deployment.
The following is a list of npm commands to execute:
        """
    }
}

assemble.dependsOn 'buildFrontend'
check.dependsOn 'lintFrontend'
check.dependsOn 'checkGeneratedFilesTracked'
clean.dependsOn 'cleanFrontend'
