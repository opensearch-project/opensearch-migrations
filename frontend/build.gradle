plugins {
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'com.bmuschko.docker-remote-api'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import org.opensearch.migrations.common.CommonUtils

node {
    version = '20.12.2'
    npmVersion = '10.5.0'
    download = true
}

def buildInputs = [
    'package.json',
    'package-lock.json',
    'next-config.ts',
    'postcss.config.mjs',
    'tailwind.config.ts',
    'tsconfig.json',
    'src/**',
    'public/**'
]

def buildExclusions = [
    '.gradle',
    '.next',
    'node_modules',
]

def buildOutputs = [
    'out'
]

// Register copy version file task
CommonUtils.copyVersionFileToDockerStaging(project, "frontend", "build/")

tasks.register('buildFrontend', NpmTask) {
    dependsOn 'npmInstall'
    args = ['run', 'build']
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
    outputs.files fileTree(dir: '.', include: buildOutputs, exclude: buildExclusions)
}

tasks.register('lintFrontend', NpmTask) {
    args =  ['run', 'lint']
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
    dependsOn 'buildFrontend'
}

tasks.register('cleanFrontend', Delete) {
    delete buildOutputs
}

tasks.register('buildDockerImage', DockerBuildImage) {
    dependsOn 'buildFrontend'
    dependsOn 'copyVersionFile_frontend'
    inputs.files fileTree(dir: '.', include: buildInputs, exclude: buildExclusions)
    outputs.file(imageIdFile)

    def name = "website"
    def hash = CommonUtils.calculateDockerHash(project.fileTree("Dockerfile"))
    inputDir = project.file('.')

    images.add("migrations/${name}:${hash}".toString())
    images.add("migrations/${name}:${version}".toString())
    images.add("migrations/${name}:latest".toString())
}

tasks.register('helpFrontend', NpmTask) {
    args =  ['run']
    doFirst {
        println """
Use `npm` locally for detailed work in this project, gradle tasks are used for continuous integration testing and deployment.
The following is a list of npm commands to execute:
        """
    }
}

assemble.dependsOn 'buildFrontend'
check.dependsOn 'lintFrontend'
clean.dependsOn 'cleanFrontend'
