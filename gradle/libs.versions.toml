[versions]
aws-crt = "0.39.0"
aws-msk-iam-auth = "2.3.2"
aws-sdk = "2.34.0"
bouncycastle = "1.82"
commons-collections = "4.5.0"
commons-compress = "1.26.2"
disruptor = "4.0.0"
dockerapi = "3.6.0"
errorprone = "2.42.0"
graalvm = "25.0.0"
groovy = "3.0.25"
guava = "33.5.0-jre"
hamcrest = "3.0"
httpclient5 = "5.5"
jackson = "2.20.0"
jackson-annotations = "2.20"
jcommander = "2.0"
jenkins-pipeline-unit = "1.23"
jmespath-core = "0.6.0"
jmeter = "5.6.3"
jmh-core = "1.37"
jolt-core = "0.1.8"
json = "20250517"
junit-platform = "1.13.4"
junit-jupiter = "5.13.4"
kafka-clients = "4.1.0"
log4j = "2.25.2"
lombok = "1.18.42"
lucene5 = '5.5.5'
lucene6 = '6.6.6'
lucene7 = '7.7.3'
lucene9 = "9.12.1"
mockito = "5.20.0"
netty = "4.1.124.Final"
opensearch-testcontainers = "2.0.1"
opentelemetry = "1.54.1"
opentelemetry-semconv = "1.23.1-alpha"
protobuf = "4.32.1"
reactor-netty = "1.2.10"
reactor-test = "3.7.11"
semver4j = "6.0.0"
slf4j = "2.0.17"
testcontainers = "1.21.3"
toxiproxy = "2.1.11"
zstd-jni = "1.5.7-4"

[libraries]
aws-arns = { module = "software.amazon.awssdk:arns", version.ref = "aws-sdk" }
aws-auth = { module = "software.amazon.awssdk:auth", version.ref = "aws-sdk" }
aws-crt = { module = "software.amazon.awssdk.crt:aws-crt", version.ref = "aws-crt" }
aws-msk-iam-auth = { module = "software.amazon.msk:aws-msk-iam-auth", version.ref = "aws-msk-iam-auth" }
aws-s3 = { module = "software.amazon.awssdk:s3", version.ref = "aws-sdk" }
aws-s3-transfer-manager = { module = "software.amazon.awssdk:s3-transfer-manager", version.ref = "aws-sdk" }
aws-sdk-core = { module = "software.amazon.awssdk:sdk-core", version.ref = "aws-sdk" }

bouncycastle-certs = { module = "org.bouncycastle:bcpkix-jdk18on", version.ref = "bouncycastle" }
bouncycastle-provider = { module = "org.bouncycastle:bcprov-jdk18on", version.ref = "bouncycastle" }

commons-collections = { module = "org.apache.commons:commons-collections4", version.ref = "commons-collections" }
commons-compress = { module = "org.apache.commons:commons-compress", version.ref = "commons-compress" }

disruptor = { module = "com.lmax:disruptor", version.ref = "disruptor" }

docker-java = { module = "com.github.docker-java:docker-java", version.ref = "dockerapi" }
docker-java-core = { module = "com.github.docker-java:docker-java-core", version.ref = "dockerapi" }
docker-java-transport-httpclient5 = { module = "com.github.docker-java:docker-java-transport-httpclient5", version.ref = "dockerapi" }

errorprone = { module = "com.google.errorprone:error_prone_core", version.ref = "errorprone" }

groovy = { module = "org.codehaus.groovy:groovy-all", version.ref = "groovy" }

guava = { module = "com.google.guava:guava", version.ref = "guava" }

hamcrest = { module = "org.hamcrest:hamcrest", version.ref = "hamcrest" }

httpclient5 = { module = "org.apache.httpcomponents.client5:httpclient5", version.ref = "httpclient5" }

jackson-annotations = { module = "com.fasterxml.jackson.core:jackson-annotations", version.ref = "jackson-annotations" }
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-dataformat-smile = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-smile", version.ref = "jackson" }
jackson-dataformat-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }

jcommander = { module = "org.jcommander:jcommander", version.ref = "jcommander" }

jenkins-pipeline-unit = { module = "com.lesfurets:jenkins-pipeline-unit", version.ref = "jenkins-pipeline-unit" }

jmespath-core = { module = "io.burt:jmespath-core", version.ref = "jmespath-core" }

jmeter-config = { module = "org.apache.jmeter:ApacheJMeter_config", version.ref = "jmeter" }
jmeter-core = { module = "org.apache.jmeter:ApacheJMeter_core", version.ref = "jmeter" }
jmeter-http = { module = "org.apache.jmeter:ApacheJMeter_http", version.ref = "jmeter" }

jmh-core = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh-core" }

jolt-core = { module = "com.bazaarvoice.jolt:jolt-core", version.ref = "jolt-core" }

json = { module = "org.json:json", version.ref = "json" }

junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher", version.ref = "junit-platform" }

junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit-jupiter" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit-jupiter" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit-jupiter" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit-jupiter" }


kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka-clients" }

log4j-api = { module = "org.apache.logging.log4j:log4j-api", version.ref = "log4j" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }
log4j-slf4j2-impl = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j" }

lombok = { module = "org.projectlombok:lombok", version.ref = "lombok" }

lucene-v5-backward-codecs = { module = "org.apache.lucene:lucene-backward-codecs", version.ref = "lucene5" }
lucene-v5-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene5" }
lucene-v5-suggest = { module = "org.apache.lucene:lucene-suggest", version.ref = "lucene5" }
lucene-v6-backward-codecs = { module = "org.apache.lucene:lucene-backward-codecs", version.ref = "lucene6" }
lucene-v6-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene6" }
lucene-v6-suggest = { module = "org.apache.lucene:lucene-suggest", version.ref = "lucene6" }
lucene-v7-backward-codecs = { module = "org.apache.lucene:lucene-backward-codecs", version.ref = "lucene7" }
lucene-v7-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene7" }
lucene-v7-suggest = { module = "org.apache.lucene:lucene-suggest", version.ref = "lucene7" }
lucene-v9-analysis-common = { module = "org.apache.lucene:lucene-analysis-common", version.ref = "lucene9" }
lucene-v9-backward-codecs = { module = "org.apache.lucene:lucene-backward-codecs", version.ref = "lucene9" }
lucene-v9-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene9" }
lucene-v9-suggest = { module = "org.apache.lucene:lucene-suggest", version.ref = "lucene9" }

mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }

netty-all = { module = "io.netty:netty-all", version.ref = "netty" }
netty-buffer = { module = "io.netty:netty-buffer", version.ref = "netty" }
netty-codec-http = { module = "io.netty:netty-codec-http", version.ref = "netty" }
netty-handler = { module = "io.netty:netty-handler", version.ref = "netty" }

opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "opentelemetry" }
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "opentelemetry" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "opentelemetry" }
opentelemetry-sdk-testing = { module = "io.opentelemetry:opentelemetry-sdk-testing", version.ref = "opentelemetry" }
opentelemetry-semconv = { module = "io.opentelemetry.semconv:opentelemetry-semconv", version.ref = "opentelemetry-semconv" }

polyglot = { module = "org.graalvm.polyglot:polyglot", version.ref = "graalvm" }
polyglot-js-community = { module = "org.graalvm.polyglot:js-community", version.ref = "graalvm" }

protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }
protobuf-protoc = { module = "com.google.protobuf:protoc", version.ref = "protobuf" }

reactor-netty-core = {module = "io.projectreactor.netty:reactor-netty-core", version.ref = "reactor-netty" }
reactor-netty-http = {module = "io.projectreactor.netty:reactor-netty-http", version.ref = "reactor-netty" }

reactor-test = {module = "io.projectreactor:reactor-test", version.ref = "reactor-test" }

semver4j = { module = "org.semver4j:semver4j", version.ref = "semver4j" }

slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

testcontainers = {module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit-jupiter = {module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-kafka = {module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-opensearch = {module = "org.opensearch:opensearch-testcontainers", version.ref = "opensearch-testcontainers" }
testcontainers-toxiproxy = {module = "org.testcontainers:toxiproxy", version.ref = "testcontainers" }

toxiproxy = {module = "eu.rekawek.toxiproxy:toxiproxy-java", version.ref = "toxiproxy" }

zstd-jni = {module = "com.github.luben:zstd-jni", version.ref = "zstd-jni" }

# List all boms here with prefix boms- to force platforms across all projects
boms-aws-sdk          = { module = "software.amazon.awssdk:bom", version.ref = "aws-sdk" }
boms-jackson          = { module = "com.fasterxml.jackson:jackson-bom", version.ref = "jackson" }
boms-junit            = { module = "org.junit:junit-bom", version.ref = "junit-jupiter" }
boms-netty            = { module = "io.netty:netty-bom", version.ref = "netty" }
boms-testcontainers   = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
boms-opentelemetry    = { module = "io.opentelemetry:opentelemetry-bom", version.ref = "opentelemetry" }

# Transitive dependencies to force based on CVEs
transitive-apache-httpclient = { module = "org.apache.httpcomponents:httpclient",    version = "4.5.14"   }
transitive-commons-lang3     = { module = "org.apache.commons:commons-lang3",        version = "3.18.0"   }
transitive-commons-net       = { module = "commons-net:commons-net",                 version = "3.12.0"   }
transitive-dnsjava           = { module = "dnsjava:dnsjava",                         version = "3.6.3"    }
transitive-jersey-common     = { module = "org.glassfish.jersey.core:jersey-common", version = "3.1.11"   }
transitive-json-path         = { module = "com.jayway.jsonpath:json-path",           version = "2.9.0"    }
transitive-json-smart        = { module = "net.minidev:json-smart",                  version = "2.6.0"    }
transitive-jsoup             = { module = "org.jsoup:jsoup",                         version = "1.21.2"   }
transitive-snappy-java       = { module = "org.xerial.snappy:snappy-java",           version = "1.1.10.8" }
transitive-tika-core         = { module = "org.apache.tika:tika-core",               version = "3.2.3"    }
transitive-xalan             = { module = "xalan:xalan",                             version = "2.7.3"    }
transitive-xstream           = { module = "com.thoughtworks.xstream:xstream",        version = "1.4.21"   }