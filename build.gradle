import com.google.cloud.tools.jib.gradle.JibTask
import groovy.json.JsonOutput

plugins {
//    Observing higher memory usage with task-tree plugin. Disabling except if needed
//    id "com.dorongold.task-tree" version "4.0.1"
    id "com.diffplug.spotless" version '7.2.1'
    id 'io.freefair.lombok' version '8.14.2' apply false
    id 'me.champeau.jmh' version '0.7.3' apply false
    id 'com.gradleup.shadow' version '8.3.8' apply false
    id 'com.avast.gradle.docker-compose' version "0.17.12" apply false
    id 'com.google.protobuf' version "0.9.5" apply false
    id 'com.google.cloud.tools.jib' version '3.4.5' apply false

    // Used in top level build.gradle
    id 'jacoco' apply true
}

allprojects {
    repositories {
        mavenCentral()
    }
}


// Ensure Capture Proxy and Dependencies are built with JDK 11 for On Node Install

// Cache dependencies during the configuration phase
ext.captureProxyDependencies = []
gradle.projectsEvaluated {
    def captureProxyProject = rootProject.project(":TrafficCapture:trafficCaptureProxyServer")
    captureProxyDependencies = captureProxyProject.configurations.collectMany { configuration ->
        configuration.dependencies.findAll { it instanceof ProjectDependency }.collect { it.path }
    }
    // Add the TrafficCaptureProxyServer project itself
    captureProxyDependencies << captureProxyProject.path
}

// Modify sourceCompatibility during the execution phase
gradle.taskGraph.whenReady {
    allprojects {
        tasks.withType(JavaCompile).configureEach {
            def jvmVersion = (project.path in rootProject.captureProxyDependencies) ? JavaVersion.VERSION_11 : JavaVersion.VERSION_17
            sourceCompatibility = jvmVersion
            targetCompatibility = jvmVersion
        }
    }
}



// Define version properties
ext {
    // support -Dbuild.version, but include default
    buildVersion = System.getProperty("build.version", "0.1.0")
    // support -Dbuild.snapshot=false, but default to true
    buildSnapshot = System.getProperty("build.snapshot", "true") == "true"
    finalVersion = buildSnapshot ? "${buildVersion}-SNAPSHOT" : buildVersion
}

allprojects {
    version = finalVersion
    // This should eventually change, see https://opensearch.atlassian.net/browse/MIGRATIONS-2167
    group = 'org.opensearch.migrations.trafficcapture'
    tasks.withType(Jar).tap {
        configureEach {
            manifest {
                attributes(
                        'SPDX-License-Identifier': 'Apache-2.0'
                )
            }
        }
    }
}

task buildDockerImages() {
    dependsOn(':frontend:buildDockerImage')
    dependsOn(':TrafficCapture:dockerSolution:buildDockerImages')
    dependsOn(':DocumentsFromSnapshotMigration:buildDockerImages')
}

def commonExclusions = ['**/build/**',
                        '**/node_modules/**',
                        '**/opensearch-cluster-cdk/**',
                        '**/cdk.out/**',
                        '**/transformation/standardJavascriptTransforms/node_modules/**',
                        '**/frontend/**']
spotless {
    format 'misc', {
        target fileTree('.') {
            include '**/*.gradle', '.gitattributes', '.gitignore'
            exclude commonExclusions
        }
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()

    }
    yaml {
        target fileTree('.') {
            include '**/*.yml'
            exclude commonExclusions
        }
        trimTrailingWhitespace()
        leadingTabsToSpaces()
        endWithNewline()
    }
    json {
        target fileTree('.') {
            include '*.json'
            exclude commonExclusions
        }
        prettier()
        endWithNewline()
    }
}

subprojects {
    apply plugin: "com.diffplug.spotless"
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    // See https://github.com/diffplug/spotless/tree/main/plugin-gradle#java for some documentation,
    // though what '#' does is still undocumented from what I can tell
    spotless {
        java {
            target "**/*.java"
            targetExclude '**/build/**', ".gradle/**"
            importOrder(
                    'javax',
                    'java',
                    'org.opensearch',
                    '',
                    '\\#')
            leadingTabsToSpaces()
            endWithNewline()
            removeUnusedImports()
        }
    }

    plugins.withId('com.google.cloud.tools.jib') {
        tasks.withType(JibTask).configureEach {
            notCompatibleWithConfigurationCache("because https://github.com/GoogleContainerTools/jib/issues/3132")
        }
    }

    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    plugins.withId('java') {

        java {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(17))
                vendor.set(JvmVendorSpec.AMAZON)
            }
        }

        tasks.withType(Test) {
            // Getting javadoc to compile is part of the test suite to ensure we are able to publish our artifacts
            dependsOn project.javadoc
        }
        if (!sourceSets.test.allSource.files.isEmpty()) {
            tasks.withType(Test) {
                testLogging {
                    events = ["passed", "skipped", "failed"]
                    exceptionFormat = "full"
                    showExceptions = true
                    showCauses = true
                    showStackTraces = true
                }
                maxParallelForks = gradle.startParameter.maxWorkerCount

                // Provide way to exclude particular tests from CLI
                // e.g. ../gradlew test -PexcludeTests=**/KafkaProtobufConsumerLongTermTest*
                if (project.hasProperty('excludeTests')) {
                    exclude project.property('excludeTests')
                }

                useJUnitPlatform()
                //  Disable parallel test execution, see MIGRATIONS-1666
                systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
                systemProperty 'log4j2.contextSelector', 'org.apache.logging.log4j.core.selector.BasicContextSelector'

                // Register BucketTestExtension for all tests to enable test striping
                // Test striping allows distributing test execution across multiple runs
                // Usage: ./gradlew test -Dtest.striping.total=N -Dtest.striping.index=I
                //   where N is the total number of buckets (e.g., 3)
                //   and I is the current bucket index (0 to N-1)
                // Example: To run 1/3 of tests in first bucket:
                //   ./gradlew test -Dtest.striping.total=3 -Dtest.striping.index=0
                def total = System.getProperty("test.striping.total")
                def index = System.getProperty("test.striping.index")

                if (total != null) {
                    systemProperty "test.striping.total", total
                }
                if (index != null) {
                    systemProperty "test.striping.index", index
                }

                systemProperty 'junit.jupiter.extensions.autodetection.enabled', true
                // Verify assertions in tests
                jvmArgs += ['-ea', '-XX:+HeapDumpOnOutOfMemoryError', '-Xmx2g']
                systemProperty "junit.jupiter.execution.timeout.default", "5m"
                jacoco {
                    enabled = true
                    def stripingSuffix = (total != null && index != null) ? "-${index}-of-${total}" : ""
                    destinationFile = layout.buildDirectory.file("jacoco/${project.name}-${name}${stripingSuffix}.exec").get().asFile
                }
            }

            // Mutually exclusive tests to avoid duplication
            tasks.named('test') {
                systemProperty 'migrationLogLevel', 'TRACE'
                useJUnitPlatform {
                    excludeTags('longTest', 'isolatedTest')
                }
            }

            tasks.register('slowTest', Test) {
                systemProperty 'migrationLogLevel', 'DEBUG'
                useJUnitPlatform {
                    includeTags 'longTest'
                    excludeTags 'isolatedTest'
                }
            }

            tasks.register('isolatedTest', Test) {
                maxParallelForks = 1
                useJUnitPlatform {
                    includeTags 'isolatedTest'
                }
            }

            tasks.register('fullTest') {
                dependsOn test
                dependsOn slowTest
                dependsOn isolatedTest
            }
        } else {
            tasks.withType(Test) {
                jacoco {
                    enabled = false
                }
            }
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }

        task sourcesJar(type: Jar) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
            duplicatesStrategy = DuplicatesStrategy.WARN
        }

        def excludedProjectPaths = [
                ':TrafficCapture',
                ':TrafficCapture:dockerSolution',
        ]
        if (!(project.path in excludedProjectPaths)) {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        versionMapping {
                            allVariants {
                                // Test fixtures are published as a separate jar in maven
                                // This ensures dependencies that are only declared in test
                                // fixtures have a version number in the pom
                                if (project.plugins.hasPlugin('java-test-fixtures')) {
                                    fromResolutionOf('testFixturesRuntimeClasspath')
                                }
                                fromResolutionResult()
                            }
                        }

                        from components.java
                        artifact javadocJar
                        artifact sourcesJar

                        pom {
                            name = project.name
                            description = 'Everything opensearch migrations'
                            url = 'http://github.com/opensearch-project/opensearch-migrations'

                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            developers {
                                developer {
                                    name = "OpenSearch"
                                    url = "https://github.com/opensearch-project/opensearch-migrations"
                                }
                            }
                            scm {
                                connection = "scm:git@github.com:opensearch-project/opensearch-migrations.git"
                                developerConnection = "scm:git@github.com:opensearch-project/opensearch-migrations.git"
                                url = "git@github.com:opensearch-project/opensearch-migrations.git"
                            }
                        }

                        pom.withXml {
                            def pomFile = asNode()

                            // Find all dependencies in the POM file
                            def dependencies = pomFile.dependencies.dependency

                            // Iterate over each dependency and check if the version is missing
                            dependencies.each { dependency ->
                                def version = dependency.version.text()

                                if (version == null || version.trim().isEmpty() || version.trim() == 'unspecified') {
                                    def groupId = dependency.groupId.text()
                                    def artifactId = dependency.artifactId.text()
                                    throw new GradleException("Dependency ${groupId}:${artifactId} is missing a version in the pom.xml")
                                }
                            }
                        }

                        // Suppress POM metadata warnings for test fixtures
                        suppressPomMetadataWarningsFor('testFixturesApiElements')
                        suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
                    }
                }
                repositories {
                    maven { url = "${rootProject.buildDir}/repository" }
                    maven {
                        url = "https://aws.oss.sonatype.org/content/repositories/snapshots"
                        name = 'staging'
                    }
                }
            }
        }

        def testsWithJacoco = project.tasks.withType(Test).matching { it.jacoco && it.jacoco.enabled }
        jacocoTestReport {
            dependsOn = testsWithJacoco
            executionData.from testsWithJacoco*.jacoco.destinationFile
            reports {
                xml.required = true
            }
        }

        // Utility task to allow copying required libraries into a 'dependencies' folder for security scanning
        tasks.register('copyDependencies', Sync) {
            duplicatesStrategy = DuplicatesStrategy.WARN

            from configurations.runtimeClasspath
            into "${buildDir}/dependencies"
        }
    }
}

tasks.register('jacocoAggregateReport', JacocoReport) {
    group = 'Verification'
    description = 'Generates an aggregate report from exec files in build/jacocoMerged/*.exec over the whole project'

    // Find all merged .exec files
    executionData.setFrom(fileTree(dir: "${buildDir}", includes: [
            "jacocoMerged/**/*.exec"
    ]))

    // Get all subprojects with Java plugin
    def javaProjects = subprojects.findAll { it.plugins.hasPlugin('java') }

    // Collect all class directories from Java subprojects
    classDirectories.setFrom(
            files(javaProjects.collect { project ->
                project.sourceSets.main.output.classesDirs.filter { dir ->
                    !dir.path.contains('captureProtobufs')
                }
            })
    )

    // Collect all source directories from Java subprojects
    sourceDirectories.setFrom(
            files(javaProjects.collect { project ->
                project.sourceSets.main.allSource.srcDirs
            })
    )

    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/mergedReport/jacocoMergedReport.xml")
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/mergedReport/html")
    }

    doLast {
        File xmlFile = reports.xml.outputLocation.get().asFile
        // Doctype's are not allowed by the XmlParser, so remove them
        String xmlText = xmlFile.text.replaceAll(/(?m)<!DOCTYPE[^>]*>/, "")
        def reportXml = new XmlParser().parseText(xmlText)

        List<String> summaryLines = []
        summaryLines << "### Code Coverage Summary"
        reportXml.counter.each { c ->
            int missed  = c.@missed  as int
            int covered = c.@covered as int
            int total   = missed + covered
            double percent  = total ? (covered / total * 100) : 0
            // Looks like: "LINE       : 85.4% (123/144)"
            summaryLines <<  String.format(
                "%-12s : %6.1f%% (%d/%d)",
                c.@type, percent, covered, total
            )
        }

        // Print to the console logger
        summaryLines.each { line ->
            logger.lifecycle(line)
        }

        // If running in a github action, print into that file
        def summaryPath = System.getenv('GITHUB_STEP_SUMMARY')
        if (summaryPath) {
            def ghaSummary = new File(summaryPath)
            ghaSummary.parentFile?.mkdirs()
            ghaSummary.withWriterAppend { w ->
                summaryLines.each { w.println(it) }
            }
        }
    }
}

gradle.projectsEvaluated {
    Set<Task> isolatedTestsTasks = [] as Set
    Set<Task> sharedProcessTestsTasks = [] as Set

    subprojects { subproject ->
        // Collect all Test type tasks
        subproject.tasks.withType(Test).all { task ->
            if (task.name == "isolatedTest") {
                isolatedTestsTasks.add(task)
            } else {
                sharedProcessTestsTasks.add(task)
            }
        }

        // Collect tasks named 'test' (no need to check for duplicates with Sets)
        subproject.tasks.matching { task ->
            task.name == 'test' && !(task instanceof Test)
        }.configureEach { task ->
            println "adding task named 'test' = ${task}"
            sharedProcessTestsTasks.add(task)
        }
    }

    // Create a sequential dependency chain
    Task previousTask = null
    isolatedTestsTasks.toList().sort { task -> task.project.name }.each { task ->
        sharedProcessTestsTasks.forEach {task.mustRunAfter(it) }
        if (previousTask != null) {
            task.mustRunAfter(previousTask)
        }
        previousTask = task as Task
    }

    tasks.register("allTests") {
        dependsOn sharedProcessTestsTasks
        dependsOn isolatedTestsTasks
    }
}

def jacocoExecFilesProvider = provider {
    def execFiles = []
    rootProject.subprojects.each { subproject ->
        subproject.tasks.withType(Test).configureEach { testTask ->
            def jacocoExtension = testTask.extensions.findByType(JacocoTaskExtension)
            if (jacocoExtension?.enabled) {
                execFiles << jacocoExtension.destinationFile
            }
        }
    }
    return execFiles
}

def jacocoTestTasksProvider = provider {
    def testTasks = []
    rootProject.subprojects.each { subproject ->
        subproject.tasks.withType(Test).configureEach { testTask ->
            def jacocoExtension = testTask.extensions.findByType(JacocoTaskExtension)
            if (jacocoExtension?.enabled) {
                testTasks << testTask
            }
        }
        // Add jacocoTestReport tasks if they exist
        if (subproject.tasks.findByName('jacocoTestReport')) {
            testTasks << subproject.tasks.jacocoTestReport
        }
    }
    return testTasks
}

def syncJacocoExecFiles = tasks.register("syncJacocoExecFiles", Sync) {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    into layout.buildDirectory.dir("jacocoMerged")

    from jacocoExecFilesProvider
    dependsOn jacocoTestTasksProvider
}

tasks.register('gatherJacocoExecForMerging', Copy) {
    description = 'Local troubleshooting, gathers coverage all exec files in build/jacocoMerged/*.exec into to be consumed by jacocoAggregateReport'

    from subprojects.collect { proj ->
        fileTree(dir: proj.buildDir, include: 'jacoco/*.exec')
    }
    into "$buildDir/jacocoMerged"
}

tasks.register('mergeJacocoReports') {
    dependsOn syncJacocoExecFiles
    finalizedBy jacocoAggregateReport

    doLast {
        def execFiles = jacocoExecFilesProvider.get()
        if (execFiles.isEmpty()) {
            throw new GradleException("No Jacoco exec files found in subprojects.")
        }
        println "Merged ${execFiles.size()} Jacoco execution files"
    }
}

def publishedArtifacts = []
subprojects.each { proj ->
    def publishingExtension = proj.extensions.findByType(PublishingExtension)
    if (publishingExtension) {
        publishingExtension.publications.withType(MavenPublication).all { publication ->
            publishedArtifacts << "${publication.groupId}.${publication.artifactId}"
        }
    }
}
tasks.register('listPublishedArtifacts') {
    doLast {
        publishedArtifacts.each { println it }
    }
}

tasks.register("listTestTasksAsJson") {
    doLast {
        println JsonOutput.prettyPrint(JsonOutput.toJson(testTasksProvider.get()))
    }
}
