plugins {
    id 'application'
    id 'java'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.beust:jcommander:1.81'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.16.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.2'
    implementation 'io.netty:netty-codec-http:4.1.108.Final'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.lucene:lucene-core:8.11.3'
    implementation 'org.apache.lucene:lucene-analyzers-common:8.11.3'
    implementation 'org.apache.lucene:lucene-backward-codecs:8.11.3'
    implementation 'software.amazon.awssdk:s3:2.25.16'
}

application {
    mainClassName = 'com.rfs.ReindexFromSnapshot'
}

// Cleanup additional docker build directory
clean.doFirst {
    delete project.file("./docker/build")
}

task demoPrintOutSnapshot (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.DemoPrintOutSnapshot'
}

task copyDockerRuntimeJars (type: Copy) {
    description = 'Copy runtime JARs and app jar to docker build directory'

    // Define the destination directory
    def buildDir = project.file("./docker/build/runtimeJars")
    into buildDir

    // Add all the required runtime JARs to be copied
    from configurations.runtimeClasspath
    from tasks.named('jar')
    include '*.jar'
}

// ./gradlew composeUp
// ./gradlew composeDown
dockerCompose {
    useComposeFiles = ['docker/docker-compose.yml']
    projectName = 'rfs-compose'
}

// ./gradlew buildDockerImages
task buildDockerImages (type: DockerBuildImage) {
    dependsOn copyDockerRuntimeJars
    def dockerImageName = "reindex_from_snapshot"
    inputDir = project.file("./docker")
    images.add("migrations/${dockerImageName}:${version}")
    images.add("migrations/${dockerImageName}:latest")
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))