plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id 'java'
    id 'io.freefair.lombok'
    id 'java-test-fixtures'
    id 'me.champeau.jmh'
    id 'com.gradleup.shadow'
}

ext {
    awsSdkVersion = '2.25.16'
    dataset = findProperty('dataset') ?: 'skip_dataset'
    luceneVersion7 = '7.7.3'
    luceneVersion9 = '9.11.1'
}

configurations {
    lucene7
    lucene9
}

task shadowLucene7(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()
    configurations = [project.configurations.lucene7]
    archiveClassifier.set('lucene7-shadow')
    relocate 'org.apache.lucene', 'shadow.lucene7.org.apache.lucene'
}

task shadowLucene9(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()
    archiveClassifier.set('lucene9-shadow')
    configurations = [project.configurations.lucene9]
    relocate 'org.apache.lucene', 'shadow.lucene9.org.apache.lucene'
}

tasks.register('prepareShadowJars') {
    dependsOn shadowLucene7, shadowLucene9
}

tasks.named('build') {
    dependsOn prepareShadowJars
}

tasks.named('test') {
    dependsOn prepareShadowJars
}


dependencies {
    implementation project(':awsUtilities')
    implementation project(':coreUtilities')
    implementation project(':transformation')

    implementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerInterface')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJMESPathMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJinjavaTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJoltMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    implementation libs.jcommander
    implementation libs.jackson.databind
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.dataformat.smile
    implementation group: 'io.netty', name: 'netty-codec-http'
    implementation libs.httpclient5
    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.slf4j2.impl

    lucene7 "org.apache.lucene:lucene-core:${luceneVersion7}"
    lucene7 "org.apache.lucene:lucene-backward-codecs:${luceneVersion7}"

    lucene9 "org.apache.lucene:lucene-core:${luceneVersion9}"
    lucene9 "org.apache.lucene:lucene-analysis-common:${luceneVersion9}"
    lucene9 "org.apache.lucene:lucene-backward-codecs:${luceneVersion9}"

    implementation shadowLucene7.outputs.files
    implementation shadowLucene9.outputs.files

    testImplementation shadowLucene7.outputs.files
    testImplementation shadowLucene9.outputs.files

    testFixturesImplementation shadowLucene7.outputs.files
    testFixturesImplementation shadowLucene9.outputs.files

    implementation libs.s3
    implementation libs.s3.transfer.manager
    implementation libs.aws.crt

    implementation libs.reactor.netty.core
    implementation libs.reactor.netty.http

    implementation libs.s3
    implementation libs.s3.transfer.manager
    implementation libs.aws.crt

    testImplementation 'com.github.docker-java:docker-java-core:3.3.6'
    testImplementation 'com.github.docker-java:docker-java-transport-httpclient5:3.3.6'

    testImplementation testFixtures(project(path: ':RFS'))
    testImplementation group: 'org.apache.lucene', name: 'lucene-backward-codecs'
    testImplementation group: 'io.projectreactor', name: 'reactor-test'
    testImplementation libs.log4j.core
    testImplementation libs.log4j.slf4j2.impl
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.params
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter

    testImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerLoaders')
    testRuntimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    testRuntimeOnly libs.junit.jupiter.engine

    testImplementation libs.jmh.core

    // Integration tests
    testImplementation testFixtures(project(path: ':testHelperFixtures'))
    testImplementation testFixtures(project(path: ':coreUtilities'))
    testImplementation libs.testcontainers
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    // why are these under implementation with the above comment for integ tests?
    implementation libs.httpclient5
    implementation libs.jackson.databind
    implementation libs.jackson.core
    implementation libs.jackson.annotations

    testFixturesImplementation project(':transformation')
    testFixturesImplementation testFixtures(project(":coreUtilities"))
    testFixturesImplementation libs.docker.java
    testFixturesImplementation libs.docker.java.core
    testFixturesImplementation libs.docker.java.transport.httpclient5
    testFixturesImplementation libs.testcontainers

    testFixturesImplementation libs.hamcrest
}

jmh {
    includeTests = true // Benchmarks should be in test code, not product code
    failOnError = true
    fork = 0
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt")
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt")
}
