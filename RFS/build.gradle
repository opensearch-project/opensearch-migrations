plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
    id 'io.freefair.lombok' version '8.6'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import groovy.transform.Canonical
import org.opensearch.migrations.common.CommonUtils

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

@Canonical
class DockerServiceProps {
    String projectName = ""
    String dockerImageName = ""
    String inputDir = ""
    Map<String, String> buildArgs = [:]
    List<String> taskDependencies = []
}

repositories {
    mavenCentral()
}

ext {
    awsSdkVersion = '2.25.16'
    dataset = findProperty('dataset') ?: 'skip_dataset'
}

dependencies {
    implementation project(":commonDependencyVersionConstraints")

    implementation project(':coreUtilities')

    implementation group: 'com.beust', name: 'jcommander'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'io.netty', name: 'netty-codec-http'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core'
    implementation group: 'org.apache.lucene', name: 'lucene-core'
    implementation group: 'org.apache.lucene', name: 'lucene-analyzers-common'
    implementation group: 'org.apache.lucene', name: 'lucene-backward-codecs'

    implementation platform('io.projectreactor:reactor-bom:2023.0.5') 
    implementation 'io.projectreactor.netty:reactor-netty-core' 
    implementation 'io.projectreactor.netty:reactor-netty-http'

    implementation group: 'software.amazon.awssdk', name: 's3'
    implementation group: 'software.amazon.awssdk', name: 's3-transfer-manager'

    testImplementation group: 'io.projectreactor', name: 'reactor-test'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
    testImplementation group: 'org.mockito', name: 'mockito-core'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'


    // Integration tests
    testImplementation group: 'org.testcontainers', name: 'testcontainers'
    testImplementation group: 'org.hamcrest', name: 'hamcrest'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
}

application {
    mainClassName = 'com.rfs.ReindexFromSnapshot'
}

task runRfsWorker (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.RunRfsWorker'
}

// Cleanup additional docker build directory
clean.doFirst {
    delete project.file("./docker/build")
}

// Utility task to allow copying required libraries into a 'dependencies' folder for security scanning
tasks.register('copyDependencies', Sync) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from configurations.runtimeClasspath
    into "${buildDir}/dependencies"
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test/html")
    }
}

task demoPrintOutSnapshot (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.DemoPrintOutSnapshot'
}

task copyDockerRuntimeJars (type: Sync) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    description = 'Copy runtime JARs and app jar to docker build directory'

    // Define the destination directory
    def buildDir = project.file("./docker/build/runtimeJars")
    into buildDir

    // Add all the required runtime JARs to be copied
    from configurations.runtimeClasspath
    from tasks.named('jar')
    include '*.jar'
}

DockerServiceProps[] dockerServices = [
        new DockerServiceProps([projectName:"reindexFromSnapshot",
                                dockerImageName:"reindex_from_snapshot",
                                inputDir:"./docker",
                                taskDependencies:["copyDockerRuntimeJars"]]),
        new DockerServiceProps([projectName:"emptyElasticsearchSource",
                                dockerImageName:"empty_elasticsearch_source",
                                inputDir:"./docker/TestSource_ES_7_10"]),
        new DockerServiceProps([projectName:"trafficGenerator",
                                dockerImageName:"osb_traffic_generator",
                                inputDir:"./docker/TrafficGenerator",
                                taskDependencies:[":TrafficCapture:dockerSolution:buildDockerImage_elasticsearchTestConsole"]]),
] as DockerServiceProps[]

for (dockerService in dockerServices) {
    task "buildDockerImage_${dockerService.projectName}" (type: DockerBuildImage) {
        def hash = CommonUtils.calculateDockerHash(project.fileTree("docker/${dockerService.projectName}"))
        for (dep in dockerService.taskDependencies) {
            dependsOn dep
        }
        inputDir = project.file(dockerService.inputDir)
        buildArgs = dockerService.buildArgs
        images.add("migrations/${dockerService.dockerImageName}:${hash}")
        images.add("migrations/${dockerService.dockerImageName}:${version}")
        images.add("migrations/${dockerService.dockerImageName}:latest")
    }
}

apply from: 'build-preloaded-source-image.gradle'

dockerCompose {
    useComposeFiles = ['docker/docker-compose.yml']
    projectName = 'rfs-compose'
}

// ../gradlew buildDockerImages
task buildDockerImages {
    for (dockerService in dockerServices) {
        dependsOn "buildDockerImage_${dockerService.projectName}"
    }
}

tasks.named("buildDockerImage_elasticsearchRFSSource") {
    dependsOn(':TrafficCapture:dockerSolution:buildDockerImage_elasticsearchTestConsole')
}
tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events "failed"
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams = true
    }
}