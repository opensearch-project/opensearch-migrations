plugins {
    id 'application'
    id 'java'
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.bmuschko.docker-remote-api'
    id 'io.freefair.lombok' version '8.6'
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.beust:jcommander:1.81'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-smile:2.16.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.2'
    implementation 'io.netty:netty-codec-http:4.1.108.Final'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.lucene:lucene-core:8.11.3'
    implementation 'org.apache.lucene:lucene-analyzers-common:8.11.3'
    implementation 'org.apache.lucene:lucene-backward-codecs:8.11.3'
    implementation 'software.amazon.awssdk:s3:2.25.16'
}

application {
    mainClassName = 'com.rfs.ReindexFromSnapshot'
}

// Cleanup additional docker build directory
clean.doFirst {
    delete project.file("./docker/build")
}

ext {
    dataset = findProperty('dataset') ?: 'no-data'
}

task demoPrintOutSnapshot (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.DemoPrintOutSnapshot'
}

task copyDockerRuntimeJars (type: Copy) {
    description = 'Copy runtime JARs and app jar to docker build directory'

    // Define the destination directory
    def buildDir = project.file("./docker/build/runtimeJars")
    into buildDir

    // Add all the required runtime JARs to be copied
    from configurations.runtimeClasspath
    from tasks.named('jar')
    include '*.jar'
}

def dockerFilesInternalServices = [
        "reindexFromSnapshot": "reindex_from_snapshot",
        "elasticsearchRFSSource": "elasticsearch_rfs_source"
]

dockerFilesInternalServices.forEach { projectName, dockerImageName ->
    task "buildDockerImage_${projectName}" (type: DockerBuildImage) {
        if (projectName == "reindexFromSnapshot") {
            dependsOn copyDockerRuntimeJars
            inputDir = project.file("./docker")
        }
        if (projectName == "elasticsearchRFSSource") {
            inputDir = project.file("./docker/TestSource_ES_7_10")
            buildArgs = ['EXISTING_DATA': "${project.ext.dataset}"]
        }
        images.add("migrations/${dockerImageName}:${version}")
        images.add("migrations/${dockerImageName}:latest")
    }
}

// ./gradlew composeUp
// ./gradlew composeDown
dockerCompose {
    useComposeFiles = ['docker/docker-compose.yml']
    projectName = 'rfs-compose'
}

// ./gradlew buildDockerImages
task buildDockerImages {
    dependsOn buildDockerImage_reindexFromSnapshot
    dependsOn buildDockerImage_elasticsearchRFSSource
}

tasks.getByName('composeUp')
        .dependsOn(tasks.getByName('buildDockerImages'))