plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'io.freefair.lombok' version '8.6'
    id 'java-test-fixtures'
}

java.sourceCompatibility = JavaVersion.VERSION_11
java.targetCompatibility = JavaVersion.VERSION_11


repositories {
    mavenCentral()
}

ext {
    awsSdkVersion = '2.25.16'
    dataset = findProperty('dataset') ?: 'skip_dataset'
}

dependencies {
    implementation project(":commonDependencyVersionConstraints")

    implementation project(':coreUtilities')

    implementation group: 'com.beust', name: 'jcommander'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-smile'
    implementation group: 'io.netty', name: 'netty-codec-http'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl'
    implementation group: 'org.apache.lucene', name: 'lucene-core'
    implementation group: 'org.apache.lucene', name: 'lucene-analyzers-common'
    implementation group: 'org.apache.lucene', name: 'lucene-backward-codecs'
    implementation group: 'software.amazon.awssdk', name: 's3'
    implementation group: 'software.amazon.awssdk', name: 's3-transfer-manager'
    implementation group: 'software.amazon.awssdk.crt', name: 'aws-crt'

    implementation platform('io.projectreactor:reactor-bom:2023.0.5') 
    implementation 'io.projectreactor.netty:reactor-netty-core' 
    implementation 'io.projectreactor.netty:reactor-netty-http'

    testImplementation testFixtures(project(path: ':RFS'))
    testImplementation group: 'io.projectreactor', name: 'reactor-test'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j2-impl'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params'
    testImplementation group: 'org.mockito', name: 'mockito-core'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter'

    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'

    // Integration tests
    testImplementation group: 'org.opensearch', name: 'opensearch-testcontainers'
    testImplementation group: 'org.testcontainers', name: 'testcontainers'
    testImplementation group: 'org.hamcrest', name: 'hamcrest'

    testFixturesImplementation project(":commonDependencyVersionConstraints")
    testFixturesImplementation group: 'com.github.docker-java', name: 'docker-java'
    testFixturesImplementation group: 'com.github.docker-java', name: 'docker-java-core'
    testFixturesImplementation group: 'com.github.docker-java', name: 'docker-java-transport-httpclient5'
    testFixturesImplementation group: 'org.testcontainers', name: 'testcontainers'
}

application {
    mainClassName = 'com.rfs.ReindexFromSnapshot'
}

task runRfsWorker (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.RunRfsWorker'
}

task createSnapshot (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.RfsCreateSnapshot'
}

task migrateMetadata (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.RfsMigrateMetadata'
}

task migrateDocuments (type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.rfs.RfsMigrateDocuments'
}

// Utility task to allow copying required libraries into a 'dependencies' folder for security scanning
tasks.register('copyDependencies', Sync) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from configurations.runtimeClasspath
    into "${buildDir}/dependencies"
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.required = true
        html.destination file("${buildDir}/reports/jacoco/test/html")
    }
}

test {
    useJUnitPlatform {
        excludeTags 'longTest'
    }

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams = true
    }
}

task slowTest(type: Test) {
    // include longTest
    jacoco {
        enabled = true
    }
}