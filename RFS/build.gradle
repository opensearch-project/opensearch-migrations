plugins {
    id 'org.opensearch.migrations.java-library-conventions'
    id 'io.freefair.lombok'
    id 'java-test-fixtures'
    id 'me.champeau.jmh'
    id 'com.gradleup.shadow'
}

ext {
    awsSdkVersion = '2.25.16'
    dataset = findProperty('dataset') ?: 'skip_dataset'
}

configurations {
    lucene6
    lucene7
    lucene9
}

task shadowLucene6(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()
    configurations = [project.configurations.lucene6]
    archiveClassifier.set('lucene6-shadow')
    relocate 'org.apache.lucene', 'shadow.lucene6.org.apache.lucene'
}

task shadowLucene7(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()
    configurations = [project.configurations.lucene7]
    archiveClassifier.set('lucene7-shadow')
    relocate 'org.apache.lucene', 'shadow.lucene7.org.apache.lucene'
}

task shadowLucene9(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()
    archiveClassifier.set('lucene9-shadow')
    configurations = [project.configurations.lucene9]
    relocate 'org.apache.lucene', 'shadow.lucene9.org.apache.lucene'
}

tasks.register('prepareShadowJars') {
    dependsOn shadowLucene6, shadowLucene7, shadowLucene9
}

tasks.named('build') {
    dependsOn prepareShadowJars
}

tasks.named('test') {
    dependsOn prepareShadowJars
}


dependencies {
    implementation project(':awsUtilities')
    implementation project(':coreUtilities')
    implementation project(':transformation')

    implementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerInterface')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJMESPathMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonJoltMessageTransformerProvider')
    runtimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    implementation libs.jcommander
    implementation libs.jackson.databind
    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.dataformat.smile
    implementation libs.netty.codec.http
    implementation libs.httpclient5
    implementation libs.log4j.api
    implementation libs.log4j.core
    implementation libs.log4j.slf4j2.impl

    lucene6 libs.lucene.v6.core
    lucene6 libs.lucene.v6.backward.codecs

    lucene7 libs.lucene.v7.core
    lucene7 libs.lucene.v7.backward.codecs

    lucene9 libs.lucene.v9.core
    lucene9 libs.lucene.v9.analysis.common
    lucene9 libs.lucene.v9.backward.codecs

    implementation shadowLucene6.outputs.files
    implementation shadowLucene7.outputs.files
    implementation shadowLucene9.outputs.files

    testImplementation shadowLucene6.outputs.files
    testImplementation shadowLucene7.outputs.files
    testImplementation shadowLucene9.outputs.files

    testFixturesImplementation shadowLucene6.outputs.files
    testFixturesImplementation shadowLucene7.outputs.files
    testFixturesImplementation shadowLucene9.outputs.files

    implementation libs.aws.crt
    implementation libs.aws.s3
    implementation libs.aws.s3.transfer.manager

    implementation libs.reactor.netty.core
    implementation libs.reactor.netty.http

    implementation libs.aws.crt
    implementation libs.aws.s3
    implementation libs.aws.s3.transfer.manager

    testImplementation libs.docker.java.core
    testImplementation libs.docker.java.transport.httpclient5

    testImplementation testFixtures(project(path: ':RFS'))
    testImplementation libs.lucene.v9.backward.codecs
    testImplementation libs.reactor.test
    testImplementation libs.log4j.core
    testImplementation libs.log4j.slf4j2.impl
    testImplementation libs.junit.jupiter.api
    testImplementation libs.junit.jupiter.params
    testImplementation libs.mockito.core
    testImplementation libs.mockito.junit.jupiter

    testImplementation project(':transformation:transformationPlugins:jsonMessageTransformers:jsonMessageTransformerLoaders')
    testRuntimeOnly project(':transformation:transformationPlugins:jsonMessageTransformers:jsonTypeMappingsSanitizationTransformerProvider')

    testRuntimeOnly libs.junit.jupiter.engine

    testImplementation libs.jmh.core

    // Integration tests
    testImplementation testFixtures(project(path: ':testHelperFixtures'))
    testImplementation testFixtures(project(path: ':coreUtilities'))
    testImplementation libs.testcontainers
    testImplementation libs.hamcrest
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
    // why are these under implementation with the above comment for integ tests?
    implementation libs.httpclient5
    implementation libs.jackson.databind
    implementation libs.jackson.core
    implementation libs.jackson.annotations

    testFixturesImplementation project(':transformation')
    testFixturesImplementation testFixtures(project(":coreUtilities"))
    testFixturesImplementation libs.docker.java
    testFixturesImplementation libs.docker.java.core
    testFixturesImplementation libs.docker.java.transport.httpclient5
    testFixturesImplementation libs.testcontainers

    testFixturesImplementation libs.hamcrest
    testFixturesImplementation libs.guava
    testFixturesImplementation libs.slf4j.api
}

jmh {
    includeTests = true // Benchmarks should be in test code, not product code
    failOnError = true
    fork = 0
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt")
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt")
}
