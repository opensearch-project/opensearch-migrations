import com.bmuschko.gradle.docker.tasks.container.*
import com.github.dockerjava.core.DefaultDockerClientConfig
import com.github.dockerjava.core.DockerClientImpl
import com.github.dockerjava.httpclient5.ApacheDockerHttpClient

def createDockerClient() {
    def config = DefaultDockerClientConfig.createDefaultConfigBuilder().build()
    def httpClient = new ApacheDockerHttpClient.Builder()
            .dockerHost(config.getDockerHost())
            .sslConfig(config.getSSLConfig())
            .maxConnections(100)
            .build()

    return DockerClientImpl.getInstance(config, httpClient)
}

def uniqueId = UUID.randomUUID();
def myNetworkName = "rfs-preload-source-${uniqueId}";
def createNetworkTask = task createNetwork(type: Exec) {
    commandLine 'docker', 'network', 'create', myNetworkName
    doLast {
        println 'Network created'
    }
}
task createInitialElasticsearchContainer(type: DockerCreateContainer) {
    dependsOn createNetwork, buildDockerImage_emptyElasticsearchSource_7_10
    targetImageId 'migrations/empty_elasticsearch_source_7_10:latest'
    containerName = "elasticsearch-${uniqueId}"
    hostConfig.network = myNetworkName
    networkAliases = ['elasticsearch']
    hostName = 'elasticsearch'
}

def startSourceTask = task startInitialElasticsearchContainer(type: DockerStartContainer) {
    dependsOn createInitialElasticsearchContainer
    targetContainerId createInitialElasticsearchContainer.getContainerId()
}

task createClientContainer(type: DockerCreateContainer) {
    dependsOn startInitialElasticsearchContainer, buildDockerImage_trafficGenerator
    targetImageId 'migrations/osb_traffic_generator:latest'
    containerName = "traffic-generator-container-${uniqueId}"
    hostConfig.network = myNetworkName
    cmd = ['default_osb_test_workloads', "http://elasticsearch:9200"]
}

def startClientTask = task startClientContainer(type: DockerStartContainer) {
    dependsOn createClientContainer
    targetContainerId createClientContainer.getContainerId()
}

task waitClientContainer(type: DockerWaitContainer) {
    dependsOn startClientContainer
    targetContainerId createClientContainer.getContainerId()
}

// Task to commit the source container to create a new image that will include the loaded data
def sourceContainerCommitTask = task commitSourceContainer() {
    dependsOn waitClientContainer

    doLast {
        def client = createDockerClient()
        def containerId = createInitialElasticsearchContainer.getContainerId().get()

        client.commitCmd(containerId)
                .withRepository("migrations/elasticsearch_rfs_source")
                .withTag("latest")
                .exec()
    }
}

task removeClientContainer(type: DockerRemoveContainer) {
    dependsOn commitSourceContainer
    targetContainerId createClientContainer.getContainerId()
}
startClientTask.finalizedBy(removeClientContainer)

// Task to stop and remove the primary container
task stopInitialElasticsearchContainer(type: DockerStopContainer) {
    dependsOn commitSourceContainer
    targetContainerId createInitialElasticsearchContainer.getContainerId()
}

task removeInitialElasticsearchContainer(type: DockerRemoveContainer) {
    dependsOn stopInitialElasticsearchContainer
    targetContainerId createInitialElasticsearchContainer.getContainerId()
}
startSourceTask.finalizedBy(removeInitialElasticsearchContainer)

def deleteNetworkTask = task deleteNetwork(type: Exec) {
    mustRunAfter removeInitialElasticsearchContainer, removeClientContainer
    commandLine 'docker', 'network', 'rm', myNetworkName
    doLast {
        println 'Custom network removed'
    }
    ignoreExitValue = true
}
createNetworkTask.finalizedBy(deleteNetworkTask)

// Orchestration task
task orchestrateContainers {
    dependsOn removeInitialElasticsearchContainer
    doLast {
        println 'Primary container modified, committed as a new image, and cleaned up.'
        println 'Client container executed, waited for completion, and cleaned up.'
    }
}

task buildDockerImage_elasticsearchRFSSource {
    dependsOn sourceContainerCommitTask
}